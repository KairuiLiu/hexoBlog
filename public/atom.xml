<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuKairui Blog</title>
  
  
  <link href="http://liukairui.cc/atom.xml" rel="self"/>
  
  <link href="http://liukairui.cc/"/>
  <updated>2020-11-19T17:37:01.295Z</updated>
  <id>http://liukairui.cc/</id>
  
  <author>
    <name>LiuKairui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>尚硅谷 JavaScript 进阶版笔记</title>
    <link href="http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7JavaScript%E8%BF%9B%E9%98%B6%E7%89%88%E7%AC%94%E8%AE%B0/"/>
    <id>http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7JavaScript%E8%BF%9B%E9%98%B6%E7%89%88%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-19T17:35:50.000Z</published>
    <updated>2020-11-19T17:37:01.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>分类</p><ul><li>基本(值)类型<ul><li>string: 任意字符串</li><li>number: 任意数字</li><li>boolean: true false</li><li>undefined: undefined</li><li>null: null</li></ul></li><li>对象(引用)类型<ul><li>object: 任意对象</li><li>function: 一个特别的对象(可以执行)</li><li>array: 一种特别的对象(属性有数值下标属性,数组内部的元素是有序的)</li></ul></li></ul></li><li><p>判断</p><ul><li>typeof: 返回数据类型的字符串表达<code>typeof tmp===&quot;undefined&quot;</code>,array和object的typeof都是object所以不能区别</li><li>instanceof: 实例</li><li>===/== 一般判断全等用===这个不做数据转化<code>a===undefined</code> 一般用于null undefined的判断(因为他们只有一个值)</li></ul></li><li><p>undefined与null区别</p><ul><li>undefined 表示只有定义没有赋值</li><li>null 表示定义了赋值了值为null</li><li>设置null的初衷是为了表示这个变量准备被赋值成对象,但是目前还没有赋值,所以<code>typeof null</code>的结果是object</li><li>null的另一个作用是将没有用的对象的地址设置为null,当内存没人指的时候就会释放,被垃圾回收器回收</li></ul></li><li><p>在什么时候将变量的值赋值为null</p><ul><li>在初始化但是临时不赋值的时候,为了标记</li><li>在变量不用的时候释放内存</li></ul></li><li><p>严格区分数据类型与变量类型</p><ul><li>数据的类型<ul><li>基本类型</li><li>对象类型</li></ul></li><li>变量类型(实际上指的是变量值的类型,是存了数字还是地址)<ul><li>基本类型: 保存的是基本类型数据</li><li>引用类型: 保存的是地址的路径<h2 id="数据-变量-与内存"><a href="#数据-变量-与内存" class="headerlink" title="数据,变量,与内存"></a>数据,变量,与内存</h2></li></ul></li></ul></li><li><p>数据: 存储在内存中代表特定信息的东西,本质上是<code>010101..</code></p></li><li><p>内存: 内存条通电之后可以存储数据的空间(临时的),一个内存块里面有两个小数据一个是地址值一个是存的值 </p><ul><li>内存的分类有栈,堆</li><li>栈里面存全局变量和局部变量</li><li>堆里面是对象的本身(但是表示堆的标识符是在堆空间里面的)</li></ul></li><li><p>变量: 可变换的量,由变量名和值组成,每个变量名都占用一小块内存</p></li></ul><p>内存中所有的操作的目标都是数据,操作的运算有:</p><ul><li><p>算数运算</p></li><li><p>逻辑运算</p></li><li><p>赋值运算</p></li><li><p>运行函数</p></li><li><p>数据,变量,内存之间的关系</p></li></ul><p>内存是存储数据的临时空间,变量是内存的标识</p><ul><li>内存与赋值的问题</li></ul><p><code>var a=XXX;</code>a中到底存了什么?</p><ul><li>当XXX是基本数据类型,那么他保存的就是这个数据</li><li>当XXX是对象的时候,保存的是对象的地址值</li><li>当XXX是变量的时候,保存的是XXX的内存内容(两者都有可能)</li><li>当两个引用变量指向了同一个对象,通过一个变量修改数据,那么另一个变量看到的是修改后的数据</li><li>对象在函数传递参数的时候是将内容赋值给了形参,对象赋值的内容是地址,所以相当于是传地址</li><li>值得注意这两种情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">age</span>:<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">a=&#123;<span class="attr">age</span>:<span class="number">13</span>&#125;;</span><br><span class="line"><span class="comment">// 此时ab指向的地址发生了改变,两者不相干</span></span><br><span class="line"><span class="keyword">var</span> fun=<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  v=&#123;<span class="attr">age</span>:<span class="number">15</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">fun(b);</span><br><span class="line"><span class="comment">// 此时b并不会发生改变因为v是一个**独立的变量**,最开始是和b指向了一个地址,但是赋值之后指向的地址发生了改变,所以v的变化不会影响b</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>JS是如何管理内存的<ol><li>内存生命周期<ul><li>分配小的内存空间,获得小内存的使用权</li><li>存储数据进行反复操作</li><li>没人指向小内存空间的时候释放空间</li></ul></li><li>释放内存<ul><li>程序或者作用域结束的时候释放作用域里面的变量(注意这里指的是释放标识符,小内存早就被释放了)</li><li>对于对象使用垃圾回收器回收</li></ul></li></ol></li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>什么是对象<ul><li>多个数据的封装体</li><li>用来保存多个数据的容器</li><li>一个对象代表现实中的一个事物</li></ul></li><li>为什么要用对象<ul><li>统一管理多个元素</li></ul></li><li>对象的组成<ul><li>属性</li><li>方法(特别的属性–属性值是函数)</li></ul></li><li>访问对象内部的元素<ul><li><code>OBJ.属性名</code> 当属性名是关键字/包含<code>-</code>/包含<code> </code>/变量名不确定,用变量存储变量名的时候不能用</li><li><code>OBJ[&quot;属性名&quot;]</code></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>为什么要用函数<ul><li>提高代码复用</li></ul></li><li>如何定义函数<ul><li>函数声明</li><li>表达式</li></ul></li><li>函数的调用<ul><li><code>fun.call(obj)</code>: 让一个函数成为一个陌生属性的方法是JS的一大特性</li><li><code>AAA()</code></li></ul></li></ul><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><ul><li><p>什么是回调函数</p><ul><li>自己定义的</li><li>自己没有调用(指的是没有写明,例如window.onclick就是一个没有调用的回调函数,是在特定时间自动执行的)</li><li>最后执行了</li></ul></li><li><p>常见的回调函数</p><ul><li>dom事件回调函数(与用户交互比较重要的点,发生时间的DOM元素)</li><li>定时器回调函数</li><li>ajax回调函数(与后台交互比较重要的点)</li><li>生命周期回调函数</li></ul></li></ul><h2 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h2><p>IIFE(Immediately-Invoked Function Expression) 立即调用函数表达式</p><p>一般来说我们写的是非匿名函数,这样可以将他存起来,当时我们也可以写没有对象接受内容的匿名函数,因为没有标识符标识他,所以他必须立即执行,否则以后就无法调用了(这里的非匿名不是说<code>setInterval(function()&#123;&#125;,1000)</code>这种,因为传值的时候相当于赋值了)</p><p>对于上述的匿名函数我们必须要当场执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;123&quot;</span>)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;();</span></span><br></pre></td></tr></table></figure><p>在后面加上<code>([参数列表])</code>就可以执行了,因为我们将前面当作了一个整体去执行,最好前面也加上一个<code>()</code>变成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;123&quot;</span>)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;)();</span></span><br></pre></td></tr></table></figure><p>加上<code>()</code>之后函数定义的变量就从之前的全局变量变成了局部变量,好处有:</p><ul><li>隐藏实现:这样的话其他函数就看不到这个函数了(因为本身他就要匿名,最好不要让其他函数看见)</li><li>不会污染外部的命名空间</li></ul><p>于是我们可以像C++中封装函数一样去封装一个JS函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">work1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// true work code 1;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">work2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// true work code 2;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">work2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// true work code 3;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.XXX=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>()...</span><br><span class="line">      <span class="keyword">return</span> work1();</span><br><span class="line">    <span class="keyword">if</span>()...</span><br><span class="line">      <span class="keyword">return</span> work2();</span><br><span class="line">    <span class="keyword">return</span> work3();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们希望实现一个模块,但是不想暴露细节函数,于是全员匿名,最后提供一个中控函数绑定到window,这在之后就是创建模块的方法,例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span> <span class="title">module</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> someThing = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> otherThing = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(someThing);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doOtherThing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(otherThing);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doSomeThing:doSomeThing,</span><br><span class="line">    doOtherThing:doOtherThing</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">myModule.doSomeThing();</span><br><span class="line">myModule.doOtherThing();</span><br></pre></td></tr></table></figure><h2 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h2><p>注意的一点,对于如下的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fun2();</span><br><span class="line">&#125;</span><br><span class="line">fun1();</span><br></pre></td></tr></table></figure><p>这里输出的this是<code>window</code>,同时请注意以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp=<span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fun2();</span><br><span class="line">&#125;</span><br><span class="line">tmp.fun=fun1;</span><br><span class="line">tmp.fun();</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;fun: ƒ&#125;</span><br><span class="line">VM144:5 Window &#123;0: Window, window: Window, self: Window, document: document, name: &quot;&quot;, location: Location, …&#125;</span><br></pre></td></tr></table></figure><p>相当于只要不是明确是对象调的都是window</p><ul><li>this是什么<ul><li><strong>任何函数本质上都是通过对象调用的</strong></li><li>所有函数内部都有一个变量this</li><li>他指向的是调用函数的当前对象 </li></ul></li></ul><h2 id="JS的分号问题"><a href="#JS的分号问题" class="headerlink" title="JS的分号问题"></a>JS的分号问题</h2><ul><li>可加可不加</li><li>但是如果不加分号导致二义性要加(小中括号开头的),例如<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">3</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)()</span><br></pre></td></tr></table></figure>会被认为是要执行一个名字叫做<code>3</code>的函数,参数列表为fun…<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">3</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)()</span><br></pre></td></tr></table></figure>那么就要加了</li><li>注意: JS在代码发布的时候会有一个<code>合理压缩</code>的过程,例如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_first_function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ohh here is a note</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>会被压缩成<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">123</span>;<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">3</span>;&#125;</span><br></pre></td></tr></table></figure>不仅压行,还直接改函数名…</li></ul><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>任何<code>函数</code>都具有prototype属性,一个函数默认指向了一个Object空对象(原型对象),也就是说在函数被创建的时候会JS会默认创建一个对象,这个对象的内容是空的</p><p>原型对象的元素是给事例对象用的,</p><p>在<code>prototype</code>中还有一个元素是<code>constructor</code>这是一个引用变量,指向了指向prototype的对象,也就是构造函数与原型对象有一个相互引用的关系</p><h2 id="显式原型与隐式原型"><a href="#显式原型与隐式原型" class="headerlink" title="显式原型与隐式原型"></a>显式原型与隐式原型</h2><ul><li>每个<strong>函数</strong>function都有一个<code>prototype</code>,也就是显式原型</li><li>每个<strong>事例对象</strong>都有一个<code>__proto__</code>,可以称为隐式原型</li><li>事例对象的<code>__proto__</code>的值是构造函数的<code>prototype</code></li><li><strong>注意</strong>:显式原型与隐式原型都是引用对象,指向的是原型,验证方法就是在创建元素后修改显式原型的内容</li><li>在ES6之前程序员可以直接操作显式原型,但是不能操作隐式原型</li></ul><p>与其他语言不同的是,大部分语言采用的是基于类的基础而JS是采用基于对象的继承,这就导致JS存在原型链</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>我们可以尝试一直输出一个对象的<strong>porto</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> FnFunctionVals=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn=<span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn IS &quot;</span>,fn);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn PROTO&quot;</span>,fn.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn PROTO PROTO&quot;</span>,fn.__proto__.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn PROTO PROTO PROTO&quot;</span>,fn.__proto__.__proto__.__proto__);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn IS &quot;</span>,Fn);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn PROTO&quot;</span>,Fn.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn PROTO PROTO&quot;</span>,Fn.__proto__.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Fn PROTO PROTO PROTO&quot;</span>,Fn.__proto__.__proto__.__proto__);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Fn IS  Fn__proto__: <span class="built_in">Object</span></span><br><span class="line">Fn PROTO Objectconstructor: ƒ Fn()__proto__: <span class="built_in">Object</span></span><br><span class="line">Fn PROTO PROTO Objectconstructor: ƒ <span class="built_in">Object</span>()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()<span class="built_in">arguments</span>: (...)caller: (...)length: <span class="number">1n</span>ame: <span class="string">&quot;isPrototypeOf&quot;</span>__proto__: ƒ ()[[Scopes]]: Scopes[<span class="number">0</span>]propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()</span><br><span class="line">Fn PROTO PROTO PROTO <span class="literal">null</span></span><br><span class="line">Fn IS  ƒ <span class="function"><span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> FnFunctionVals=<span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">tmp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">Fn PROTO ƒ () &#123; [native code] &#125;</span><br><span class="line">Fn PROTO PROTO Objectconstructor: ƒ <span class="built_in">Object</span>()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()</span><br><span class="line">Fn PROTO PROTO PROTO <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>可以看到是Fn这个<strong>对象</strong>,请注意,此处没有调用函数的prototype而是直接调用了对象的__proto__他们是一样的,可以看到fn对象的第一个原型就是Object,这个object包含了指回fn对象的<code>constructor</code>,之后这个对象又指向了一个Object对象,最后被指向的对象没有原型了,但是他还是一个Object对象,他包含了Object最基本的对象</p><pre class="mermaid">graph LR    Fn[Fn函数标识符] --__proto__--> FnObj[Fn函数对象] --prototype--> Object[Object对象包含了函数中写在原型的函数] --__proto__--> ObjectNull[Object原型对象] --__proto__--> null[NULL空对象]    Object --constructor--> FnObj    JSObj[JS解释器的Object标识符] --__proto__--> objFun[JS解释器的Object函数对象] --__proto__--> ObjectNull[Object原型对象]    fn[fn变量的标识符] --__proto__--> Fnme[Fn的实例对象此处有直接定义给fn的方法] --__proto__--> Object    Object --constructor--> Fnme</pre><p>最后null的<code>__proto__</code>是报错…</p><p>从上面可以看到,我们其实是顺着隐式原型链连起来的,原型链是用来查找对象的属性的不是方法(虽然我认为方法也是属性…)</p><h2 id="构造函数-原型等原型链之间的关系图与解释"><a href="#构造函数-原型等原型链之间的关系图与解释" class="headerlink" title="构造函数,原型等原型链之间的关系图与解释"></a>构造函数,原型等原型链之间的关系图与解释</h2><p>我们有构造函数<code>Foo()</code></p><pre class="mermaid">graph LR  subgraph 实例    f1[...=newFoo]    o1[...=newObject]  end  subgraph 函数    Foo[Function Foo]    Obj[function Object]    Fun[function Function]  end  subgraph 原型    FooProt[Foo.prototype]    ObjProt[Object.prototype]    FunProt[Function.prototype]  end f1 --__proto__-->FooProt Foo --prototypr-->FooProt FooProt--constructor-->Foo Foo --__proto__-->FunProt Fun --__proto__-->FunProt FunProt --constructor--> Fun Fun --prototype--> FunProt Obj --__proto__-->FunProt Obj --prototype--> ObjProt o1 --__proto__--> ObjProt FooProt--__proto__-->ObjProt ObjProt--__proto__--> NULL ObjProt--constructor--> Obj FunProt-->ObjProt</pre><p>从左上角开始看</p><ul><li>f1,f2是Foo构造函数构造的实例,他们的__proto__就是构造函数的prototype</li><li>对于构造函数Foo来说,prototype就是Foo的一个空实例,这个空实例的构造函数就是Foo</li><li>同时,Foo是一个函数,也是一个对象,Foo是由Function构造函数构造的一个function,所以Foo的__proto__是Function函数的prototype</li><li>对于构造函数Function来说他的prototype就是他的一个空实例,这个实例的构造函数就是他</li><li>同时Function是一个函数,所以Function是Function构造出来的一个对象,也具有<strong>proto</strong>,他的__proto__应该是Function函数的构造函数Function的prototype</li><li>对于Function的prototype来说,他是一个对象,所以他的__proto__就是Object</li><li>对于Object来说,他的prototype是他的空实例,空实例的构造函数就是Object</li><li>对于对象o1,他是Object的实例,所以__proto__就是Object的prototypr</li><li>对于Object来说,他是由Function创建的函数实例,所以他的__proto__就是Function的prototype</li></ul><h2 id="原型链的属性"><a href="#原型链的属性" class="headerlink" title="原型链的属性"></a>原型链的属性</h2><p>我们可以把一个属性设置到原型链的属性上,那么我们声明一个事例的时候事例可以直接通过<code>.</code>访问到原型上设置的属性,当我们为这个实例设置相同的属性是时候,JS并不会查找原型链上有没有这个属性,而是直接将属性设置到了实例上,这相当于此时,对于这个实例有两个同名属性,一个在原型链上,一个在实例上,这样的修改不会影响到其他是实例</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><ul><li>代码的分类<ul><li>全局代码</li><li>函数局部代码</li></ul></li><li>全局执行上下文<ul><li>在执行全局代码前将window设置为全局执行上下文</li><li>对全局数据进行预处理<ul><li>var定义为全局变量,值为undefined,添加windows属性</li><li>function 声明全局函数,同时赋值,添加为window方法</li><li>this设置为window</li></ul></li><li>从头执行代码 </li></ul></li><li>函数执行上下文<ul><li>在调用函数之前创建对应的函数执行上下文</li><li>对局部数据进行预处理<ul><li>将形参列表赋值为实参为执行上下文添加对应的属性</li><li>将argument赋值,添加上下文属性</li><li>var定义局部变量,赋值为undefined,添加上下文属性</li><li>function声明函数,赋值函数内容,添加上下文方法</li><li>赋值this</li></ul></li><li>执行函数代码</li></ul></li><li>局部变量的栈<ul><li>我们可以将存放标识符的栈进一步细分,存储全局变量的栈,存储局部函数变量的栈,全局元素栈可以被局部函数栈访问,但是局部元素栈的元素不可以在全局被访问,相当于这个栈在全局是被隐藏的</li></ul></li><li>执行上下文栈<ul><li>全局代码执行的时候JS会创建一个栈存储全局上下文对象</li><li>执行window的时候压栈</li><li>函数执行的时候将函数上下文对象入栈</li><li>程序结束之后对象出栈</li><li>全局执行结束之后应该只可以看到window的上下文对象 </li></ul></li></ul><h2 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h2><ul><li>理解<ul><li>就是一块地盘,一个代码所在的区域</li><li>相对于上下文对象,带编码的时候元素的作用域就确定了</li></ul></li><li>分类<ul><li>全局作用域</li><li>函数作用域</li><li>块作用域(ES6之前没有)</li></ul></li><li>作用<ul><li>隔离变量</li></ul></li><li>与执行上下文的区别<ul><li>全局作用域外,每个函数都会创建自己的作用域,在函数定义的时候创建,而不是在函数调用的时候</li><li>全局执行上下文是字啊全局作用域确定,JS代码马上要执行的时候确定的</li><li>函数上下文是在调用函数的时候确定,函数体代码是在执行之前确定</li><li>作用域是静态的,函数定义好就一直存在,不会变化</li><li>上下文是动态的,调用的时候创建,结束的时候释放</li><li>上下文环境对象是从属于作用域的</li><li>全局上下文环境对应全局作用域</li><li>函数上下文环境对应函数作用域</li></ul></li><li>作用域链<ul><li>嵌套的作用域形成的<strong>由内而外</strong>的链称为作用域链</li><li>当我们调用一个函数,JS顺着作用域链找不到就会报错,注意查找的时候如果这个属性是当前作用域中某个对象的属性,那么是找不到是</li></ul></li></ul><h2 id="循环变量监听"><a href="#循环变量监听" class="headerlink" title="循环变量监听"></a>循环变量监听</h2><p>以前写过这样的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;我是第<span class="number">0</span>个&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;我是第<span class="number">1</span>个&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;我是第<span class="number">2</span>个&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bts=<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>,len=bts.length;i&lt;len;i++</span>)</span>&#123;</span><br><span class="line">            bts[i].idx=i;</span><br><span class="line">            bts[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="built_in">this</span>.idx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>实现了点击第几个弹出几</p><p>有一个坑就是如果不记录这个按钮是第几个就会出现谁点击都是3,这是因为在循环的时候只进行了函数声明,调用的时候函数内部i去window的作用域下找i,只找到循环结束的3,这就导致全输出3,一个解决方法是为按钮附上index值,也可以添加一个作用域不让onclick出去找i</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bts=<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>,len=bts.length;i&lt;bts.length;i++</span>)</span>&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sigBtn=bts[i];</span><br><span class="line">            sigBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别就是为window内部又写了一个作用域,形参为i,这样的话找i就一定找的是形参i,现在只需要告诉每个按钮i的具体值,可以使用函数调用传递参数,但是这个函数只是在这里用一下,所以完全可以匿名立即执行,于是有了上面的代码,注意匿名函数的函数作用域,实际上这就用到了闭包的技术</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul><li>如何产生闭包<ul><li>当一个嵌套的内部函数引用了嵌套的外部函数的变量,就产生了闭包</li></ul></li><li>闭包是什么<ul><li>闭包有2种理解</li><li>一种认为是嵌套在内部的子函数</li><li>一种认为是包含被引用变量的对象</li><li>他存在与内部函数中</li></ul></li><li>产生闭包的条件<ul><li>函数嵌套</li><li>内部函数引用了外部函数的变量</li><li>外部函数被调用(注意,闭包出现于外层函数执行子函数变量提升的时候,而不是子函数被调用,甚至可能子函数不会被调用,但是在变量提升的时候已经有了闭包,当然,如果写的是<code>var tmp=function()&#123;&#125;</code>那必然在父函数开始的时候不产生闭包)</li></ul></li></ul><p>陷阱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f=fn1();</span><br><span class="line">f()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><p>输出分别是3 4</p><p>看到f定义的那一句,模拟执行,f获得了fn1的返回值,我们执行fn1,首先是进入fn1,创建闭包,<strong>把闭包给了fn2</strong>,不调用fn2,直接返回fn2<strong>对象,不仅仅是代码,连着fn2刚刚拿到的闭包一起返回了</strong>,调用f的时候fn2使用了自己的闭包,找到a=2,输出了3,再次调用的时候fn2使用了自己的闭包,找到a=3,输出了4,想要恢复很简单,重新赋值f</p><p>其实错误版本的按钮点击函数,也是由于闭包惹得祸,如果没有闭包,函数已经被赋值怎么可能找到外边还有一个i呢,也是在定义的时候已经把i传进了onclick函数</p><ul><li><p>chrome开发人员工具<code>Call Stack</code><br>类似于上下文栈,唯一特殊的(anonymous)指的是全局栈</p></li><li><p>闭包的作用</p></li><li><p>使函数内部的变量在函数执行结束之后仍然活在内存中</p></li><li><p>让外部函数可以直接操作其他作用域的局部变量</p></li><li><p>被闭包指向的局部变量在函数执行完后不消失的原因是有闭包在指向这个变量, 而闭包没有消失的原因是有元素指向的存储闭包的函数</p></li><li><p>闭包的生命周期</p><ul><li>在子函数被定义的时候产生</li><li>在子函数成为垃圾对象的时候消失</li></ul></li></ul><h2 id="利用闭包实现js模块"><a href="#利用闭包实现js模块" class="headerlink" title="利用闭包实现js模块"></a>利用闭包实现js模块</h2><ul><li>js模块就是具有特定功能的js文件,要求如下</li><li>将所有的函数与功能都放在函数内部</li><li>函数只可以暴露一个或者多个方法</li><li>当我们想要返回多个方法的时候可以采用对象的方法直接封装所有的函数,属性名可以命名为方法名,更加方便</li></ul><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fn = myModule();</span></span><br><span class="line">    fn.dootherthing();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myModule</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg=<span class="string">&quot;My atguigu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;dosomtthing() &quot;</span>+msg.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dootherthing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;dootherthing() &quot;</span>+msg.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        dosomething: dosomething,</span><br><span class="line">        dootherthing: dootherthing</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用立即调用函数直接将事例写入到window中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    fn.dootherthing();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg=<span class="string">&quot;My atguigu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;dosomtthing() &quot;</span>+msg.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dootherthing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;dootherthing() &quot;</span>+msg.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.fn=&#123;</span><br><span class="line">        dosomething:dosomething,</span><br><span class="line">        dootherthing:dootherthing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>闭包的缺点<ul><li>局部变量释放延迟,占用内存</li><li>容易造成内存泄漏</li></ul></li><li>解决方案<ul><li>及时释放(<code>f=null</code>使得内部函数成为垃圾对象)</li><li>不用闭包</li></ul></li></ul><h2 id="内存溢出与泄漏"><a href="#内存溢出与泄漏" class="headerlink" title="内存溢出与泄漏"></a>内存溢出与泄漏</h2><ul><li>内存溢出<ul><li>一种程序运行的时候出现的错误</li><li>当程序运行的时候需要内存超过剩余内存的时候,会抛出内存溢出错误<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;<span class="xml"><span class="tag">&lt;<span class="name">10000;i++)</span></span></span></span><br><span class="line"><span class="xml">  obj[i]=new Array(10000000);</span></span><br></pre></td></tr></table></figure>会造成溢出(同时注意这种语法,obj是一个伪数组,其实就是obj下面的属性为0,1,2,3…)浏览器显示崩溃了,内存不足</li></ul></li><li>内存泄漏<ul><li>占用的内存没有被及时释放,这不是错误,只是一种问题,累计的内存泄漏多了容易导致内存溢出</li><li>原因<ul><li>错误的调用了全局变量(eg 没有写var)</li><li>没有及时清理计时器或回调函数</li><li>闭包</li></ul></li></ul></li></ul><h2 id="对象的创建模式"><a href="#对象的创建模式" class="headerlink" title="对象的创建模式"></a>对象的创建模式</h2><ul><li>Object构造函数模式<ul><li>先创建一个空的object对象,然后动态的添加属性/方法</li><li>起始的时候对象内部的数据不确定</li><li>问题:语句多<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">p.name=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">p.age=<span class="number">2</span>;</span><br><span class="line">p.setName=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>对象字面量模式<ul><li>使用<code>&#123;&#125;</code>创建对象,同时指定属性/方法</li><li>适用于起始对象内部的元素数据是确定的</li><li>问题: 如果创建了多个对象会有重复代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p=&#123;</span><br><span class="line">  name:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  age:<span class="number">12</span>,</span><br><span class="line">  setname:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>工厂模式<ul><li>通过工厂函数(返回对象的函数)创建对象然后返回</li><li>适用场景: 需要创建多个函数</li><li>问题: 没有一个对象有具体的类型,都是Object<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePeople</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p=&#123;</span><br><span class="line">    name:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    age:<span class="number">12</span>,</span><br><span class="line">    setname:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>自定义构造函数模式<ul><li>自定义构造函数,通过new创建对象</li><li>适用场景: 需要创建多个类确定的对象</li><li>问题: 每个对象都有相同的数据 占用内存<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">  <span class="built_in">this</span>.age=age;</span><br><span class="line">  <span class="built_in">this</span>.setname=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对于每一个事例,属性可能不相同,内存相互独立,但是方法是一样的,但是内存还是独立的,这造成了内存的占用,所以要将函数放在原型上,这样所有的函数都指向同一个”空对象”于是有了下面的模式</li></ul></li><li>构造函数+原型的组合模式<ul><li>自定义构造函数,属性在函数中初始化,方法添加到原型上</li><li>适用于要创建多个类型创建的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">  <span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setname=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="继承模式-原型链的继承"><a href="#继承模式-原型链的继承" class="headerlink" title="继承模式: 原型链的继承"></a>继承模式: 原型链的继承</h2><p>当创建了两个对象的构造-原型函数之后,需要建立两个类的继承关系,但是js是基于对象的继承的,所以子元素需要继承父元素的原型链,只需要将子元素<strong>构造函数</strong>的prototype设置为父元素的<strong>实例</strong>,eg</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Supper</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.supProp=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Supper.prototype.showSupper=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.supProp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Suber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.subProp=<span class="string">&quot;suber&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Suber.prototype=<span class="keyword">new</span> Supper();     <span class="comment">// 注意这里要先写,否则之前写的就成垃圾了</span></span><br><span class="line"></span><br><span class="line">Suber.prototype.showSuber=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.subProp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub=<span class="keyword">new</span> Suber();</span><br><span class="line">sub.showSupper();</span><br><span class="line">sub.showSuber();</span><br></pre></td></tr></table></figure><p>注意,以上代码存在隐患,因为sub是sup的子元素所以把Sub的prototype设置为Sub的实例,但是Sup实例的构造函数还是Sup,这里要同意修正为sub</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Supper</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.supProp=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Supper.prototype.showSupper=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.supProp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Suber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.subProp=<span class="string">&quot;suber&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Suber.prototype=<span class="keyword">new</span> Supper();     <span class="comment">// 注意这里要先写,否则之前写的就成垃圾了</span></span><br><span class="line">Suber.prototype.constructor = Suber;</span><br><span class="line"></span><br><span class="line">Suber.prototype.showSuber=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.subProp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub=<span class="keyword">new</span> Suber();</span><br><span class="line">sub.showSupper();</span><br><span class="line">sub.showSuber();</span><br></pre></td></tr></table></figure><h2 id="继承模式-借用构造函数继承"><a href="#继承模式-借用构造函数继承" class="headerlink" title="继承模式:借用构造函数继承"></a>继承模式:借用构造函数继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">  <span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,p</span>)</span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>,name,age);</span><br><span class="line">  <span class="built_in">this</span>.p=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,p</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">  <span class="built_in">this</span>.age=age;</span><br><span class="line">  <span class="built_in">this</span>.p=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并没有创建出一个继承关系,但是能用</p><h2 id="继承模式-组合继承"><a href="#继承模式-组合继承" class="headerlink" title="继承模式: 组合继承"></a>继承模式: 组合继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">  <span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.setname=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,p</span>)</span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>,name,age);</span><br><span class="line">  <span class="built_in">this</span>.p=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype=<span class="keyword">new</span> Person();</span><br><span class="line">Student.prototype.constructor=Student;</span><br><span class="line">Student.prototype.setp=<span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.p=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s=<span class="keyword">new</span> Student(<span class="string">&quot;A&quot;</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.setname(<span class="string">&quot;B&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(s.setp(<span class="number">123</span>));</span><br></pre></td></tr></table></figure><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>白天看</p><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><ul><li>进程: 程序的一次允许占用了一个独立的内存空间</li><li>线程: 进程内部一个独立的执行单元,是程序执行的一个完整流程,是CPU最小调度单元</li><li>一个程序可以创建多个进程</li><li>一个程序如果每个<strong>进程只有一个线程</strong>那么就叫他但线程的</li><li>应用必须运行在一个进程的线程上</li><li>一个进程至少有一个允许的线程,叫主线程,自动创建,其他的叫分线程</li><li>一个进程的数据何以供多线程共享,进程之间不共享</li><li>线程池保存了多个线程对象容器实现复用</li><li>多个线程不一定同时进行,例如线程数目大于cpu核心数目</li></ul><p>比较:</p><ul><li>多线程<ul><li>优点:提高CPU利用率</li><li>缺点:创建多线程有开心,线程切换有开销,存在锁死与状态同步问题</li></ul></li><li>单线程<ul><li>优点: 代码简单</li><li>缺点: 慢</li></ul></li><li>JS是单线程运行的,但是可以使用H5的web workers进行多线程允许</li><li>浏览器是多线程允许的</li><li>浏览器有单进程的,有多进程的<ul><li>多进程: chrome 新IE</li><li>单进行: 火狐 老IE</li></ul></li></ul><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>浏览器内核: 支持浏览器允许的核心程序</p><ul><li>chrome/Safasi: webkit</li><li>firefox : Gecko</li><li>IE : trident</li></ul><blockquote><p>页面的绘制（绘制，就是把一个HTML文件变成一个活灵活现的页面展示的过程…），只有一半轮子是Chrome自己做的，还有一部分来自于WebKit，这个Apple打造的Web渲染器。。。<br>之所以说是一半轮子来源于WebKit，是因为WebKit本身包含两部分主要内容，一部分是做Html渲染的，另一部分是做JavaScript解析的。在Chrome中，只有Html的渲染采用了WebKit的代码，而在JavaScript上，重新搭建了一个NB哄哄的V8引擎。目标是，用WebKit + V8的强强联手，打造一款上网冲浪的法拉利，从效果来看，还着实做的不错。。。<br>不过，虽说Chrome和WebKit都是开源的，并联手工作。但是，Chrome还是刻意的和WebKit保持了距离，为其始乱终弃埋下了伏笔。Chrome在WebKit上封装了一层，称为WebKit Glue。Glue层中，大部分类型的结构和接口都和WebKit类似，Chrome中依托WebKit的组件，都只是调用WebKit Glue层的接口，而不是直接调用WebKit中的类型。按照Chrome自己文档中的话来说，就是，虽然我们再用WebKit实现页面的渲染，但通过这个设计（加一个间接层…）已经从某种程度大大降低了与WebKit的耦合，使得可以很容易将WebKit换成某个未来可能出现的更好的渲染引擎。。。</p></blockquote><p>内核是一个大程序,有很多模块</p><ul><li>主线程<ul><li>JS引擎:解析运行JS</li><li>HTML,CSS文档解析模块: 负责解析文本文件</li><li>DOM/CSS模块: 负责DOM文档结构对象的构建</li><li>布局与渲染模块: 负责布局效果的绘制</li></ul></li><li>分线程<ul><li>定时器模块: JS代码是单线程的,所以虽然模块是在分线程,但是代码还是在主线程</li><li>DOM事件响应模块</li><li>网络请求模块</li><li>…</li></ul></li></ul><h2 id="关于定时器"><a href="#关于定时器" class="headerlink" title="关于定时器"></a>关于定时器</h2><p>定时器真的是定时执行的吗?</p><p>定时器一般会延迟一点点(可以接受),单也有可能会延长很多时间(例如在支持很大的循环)</p><h2 id="验证JS是单线程执行的"><a href="#验证JS是单线程执行的" class="headerlink" title="验证JS是单线程执行的"></a>验证JS是单线程执行的</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line">alert(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;111111&quot;</span>);</span><br></pre></td></tr></table></figure><p>当点击确定后等一会儿才开始alert,说明alert同时暂停了定时器模块与主线程,但是最新的chrome修改了定时器框架,不用等待了,按顺序输出 </p><h2 id="事件循环模型"><a href="#事件循环模型" class="headerlink" title="事件循环模型"></a>事件循环模型</h2><ul><li>代码分类:<ul><li>初始化代码</li><li>回调代码</li></ul></li><li>js引擎的执行流程<ul><li>执行初始化函数代码,有一部分代码会在所有代码执行完才运行 我们称之为异步调用  </li><li>设置计时器,监听,网络请求</li><li>在DOM事件发生的时候调用回调函数</li></ul></li></ul><ul><li>模型的2个重要组成部分:<ul><li>事件管理模块</li><li>回调队列</li></ul></li><li>模型的运转流程<ul><li>执行初始化代码, 将事件回调函数交给对应模块管理</li><li>当事件发生时, 管理模块会将回调函数及其数据添加到回调列队中</li><li>只有当初始化代码执行完后(可能要一定时间), 才会遍历读取回调队列中的回调函数执行</li></ul></li></ul><h2 id="H5-Web-Workers"><a href="#H5-Web-Workers" class="headerlink" title="H5 Web Workers"></a>H5 Web Workers</h2><ul><li>可以让js在分线程执行</li><li>Worker<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">&#x27;worker.js&#x27;</span>);</span><br><span class="line">worker.onMessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;event.data&#125; : 用来接收另一个线程发送过来的数据的回调</span><br><span class="line">worker.postMessage(data1) : 向另一个线程发送数据</span><br></pre></td></tr></table></figure></li><li>问题:<ul><li>worker内代码不能操作DOM更新UI</li><li>不是每个浏览器都支持这个新特性</li><li>不能跨域加载JS</li></ul></li></ul>]]></content>
    
    
    <summary type="html">此版为JavaScript进阶版，以讲述原理为主，来自尚硅谷2019张晓飞版</summary>
    
    
    
    <category term="前端" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="http://liukairui.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="笔记" scheme="http://liukairui.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript" scheme="http://liukairui.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>尚硅谷 JavaScript 基础版笔记</title>
    <link href="http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7JavaScript%E5%9F%BA%E7%A1%80%E7%89%88%E7%AC%94%E8%AE%B0/"/>
    <id>http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7JavaScript%E5%9F%BA%E7%A1%80%E7%89%88%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-13T16:00:24.000Z</published>
    <updated>2020-11-15T18:34:47.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p>ECMAScript与Javascript<br> ECMAScript是JavaScript的标准</p><p> 一个JS包含三个元素:<code>ECMAScript</code>,<code>DOM</code>(文档对象模型: 如何通过JS操作网页),<code>BOM</code>(浏览器对象模型: 如何通过JS操作浏览器)</p></li><li><p>JS是一种解释形语言</p></li><li><p>JS是一种动态语言(和Py一样的一个变量多类型)</p></li><li><p>JS是OOP语言 </p></li></ol><h2 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h2><ul><li>JS代码要写在HTML的<code>script</code>标签中,<code>type=text/javascript</code>(不写也可以，默认就是)</li><li>代码以分号结尾</li></ul><ol><li><p>在浏览器中弹出一个警告框：</p><p><code>alert(&quot;XXX&quot;)</code>弹出一个通知框，显示XXX内容，只有一个确定 </p></li><li><p>在页面上输出内容</p><p> <code>document.write(&quot;XXX&quot;);</code>直接在网页中显示双引号的HTML代码，例如:<code>write(&quot;1&lt;/br&gt;2&lt;/br&gt;3&quot;)</code>，值得注意的是显示的文字并不会出现在网页原代码的body部分</p></li><li><p>向控制台输出某句话</p><p> <code>console.log(&quot;XXX&quot;)</code>向控制台输出一个内容</p></li></ol><h2 id="JS代码编写的位置"><a href="#JS代码编写的位置" class="headerlink" title="JS代码编写的位置"></a>JS代码编写的位置</h2><ol><li>可以将JS代码编写到标签的<code>onclick</code>属性中，当我们点击代码的时候JS代码就会执行，例如如下代码会在点击的时候显示”嘿嘿”<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;嘿嘿&#x27;)&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>值得注意的是，与py一样，命令外面用<code>&quot;&quot;</code>围起来了，所以围里面要用<code>&#39;&#39;</code></strong></p><ol start="2"><li>JS代码可以写在超链接的<code>href</code>属性中，但是这个时候就有格式要求了,要先谢<code>javascript:</code>,效果和之前一样<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;嘿嘿&#x27;);&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>与CSS一样，这种直接写在标签里面的形式不怎么用</strong></p><ol start="3"><li>和CSS一样JS可以写在<code>script</code>里面，也可以写在外部文件里面, 外部引用的时候写法是<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意JS代码是按照自上向下的顺序执行的</strong></p><h2 id="JS的基本用法"><a href="#JS的基本用法" class="headerlink" title="JS的基本用法"></a>JS的基本用法</h2><ol><li>JS的注释,单行<code>//</code>,多航<code>/**/</code>，值得注意的是和less不同，两者都会被显示到源代码中</li><li>HTML不区分大小写但是JS严格区分大小写</li><li>JS中每一条语句以分号结尾(如果不写，浏览器会自动加，但是消耗内存，且存在分号加错的情况)</li><li>JS中忽略多的空格与换行，可以利用这个特性进行代码格式化</li></ol><h2 id="字面量与变量"><a href="#字面量与变量" class="headerlink" title="字面量与变量"></a>字面量与变量</h2><ul><li>字面量: 可以认为字面量是常量，是一些不可改变的值，例如<code>1,2,3,4</code>这些都是不可变的，字面量都是可以直接使用的，但是一般都不会直接使用字面量</li><li>变量可以用来保存字面量，并且变量是可以变化的，用起来更加的简单，所以在开发的时候很少使用字面量</li></ul><p><strong>感觉很类似于C中的左值与右值</strong></p><ul><li>在JS中使用<code>var</code>关键字来声明一个变量, 但是刚声明的变量不能直接使用，例如<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>会输出<code>undefined</code>, 还和没有声明不同，没声明会报错<code>Uncaught ReferenceError: XXX is not defined at </code></li></ul><p>声明变量是没有值的，可以用<code>=</code>为变量赋值</p><p>当然声明赋值接受同时进行</p><p>可以通过变量对字面值进行描述</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>在JS中所有可以自主命名的全部可以叫做标识符，例如: 变量名/函数名/属性名都属于标识符</p><ol><li>命名一个标识符的时候我们可以写 字母 数字 下划线 $</li><li>不能以数字开头</li><li>标识符不能是JS中的关键字的保留字，例如<code>var</code></li><li>标识符建议采用驼峰命名法(首字母小写，其余单词开头大写), 当然可以不接受建议</li></ol><p>JS在保存标识符的时候采用的是Unicode编码，所以理论上Unicode编码都可以使用，理论上中文可以</p><p><strong>和C语言一模一样</strong></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型指的是字面量的类型，在JS中一共有6种</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Null(空值)</li><li>Undefined(未定义)</li><li>Object(对象)</li></ul><p>p.s. 动态语言的好处，把很多类型直接整合到一起</p><p>其中基本数据类型就是除了Object之外的，Object属于引用数据类型</p><p>可以使用运算符号<code>typeof()</code>检查变量,例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(b));</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123</span><br><span class="line">123</span><br><span class="line">number</span><br><span class="line">string</span><br></pre></td></tr></table></figure><ul><li><p>String字符串:</p><ul><li><p>JS中字符串需要用引号(单引号或双引号均可)引起来</p></li><li><p>注意单引号里面用双引号，双引号里面用单引号</p></li><li><p>如果你就是不想用单引号，那么就要告诉浏览器你这里的双引号是用来干啥的，是框字符串的还是一个普通的双引号，这里我们可以使用<code>\</code>作为转意字符，例如<code>\&quot;</code>,例如<code>var str2=&quot;我说：\&quot;今天天\&#39;气真不\&#39;错\&quot;&quot;;</code>，转意字符还有<code>\n</code>: 换行，<code>\t</code>: 制表符,<code>\\</code>表示<code>\</code>…</p><p><strong>和C语言完全一样</strong></p></li></ul></li><li><p>Number数值:</p><ul><li>在JS中所有类型的数字全是Number不区分<code>float</code>,<code>int</code></li><li>Number的最大值: 可以输出<code>Number.MAX_VALUE</code> 为: 1.7976931348623157e+308, 如果我们要求输出<code>Number.MAX_VALUE * Number.MAX_VALUE</code>结果会显示<code>Infinity</code></li><li>注意<code>Infinity</code>是一个字面量，允许被赋值，值得注意的是一定不能加引号，否则就是字符串了，并且注<code>Infinity</code>的typeof是<code>Number</code>, 存在<code>-Infinity</code></li><li>两个字符串相乘的结果是<code>NaN</code> 表示<code>Not a Number</code>, 与<code>Infinity</code>同理，字面量可以赋值，typeof是<code>Number</code>,不要引号!!</li><li>Number可以表示的最小精度<code>Number.MAX_VALUE</code>,也就是最小正值</li><li>JS的浮点数运算可能不精确，所以千万不要用JS进行高精运算，这些给服务器去算</li></ul></li><li><p>Boolean布尔值：</p><p>  <strong>与C++完全一样</strong></p></li><li><p>Null空值：</p><ul><li>只有一个数据元素就是null</li><li>专门用来表示空对象</li><li>值得注意的是<strong>用<code>typeof</code>看null,视频上说会显示<code>Object</code>但是本机上是<code>null</code>,null绝对不是一个对象，null有自己的类型，它是一个特殊的类型，至于为什么会null返回object，这是官方承认的错误</strong></li></ul></li><li><p>undefined未定义：</p><ul><li>声明变量不给他赋值就输出会显示这个</li><li>不声明就输出会报错</li><li><code>typeof()</code>是<code>undefined</code></li></ul></li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ul><li>指的是将一个数据类型转化为<code>String</code>,<code>Number</code>,<code>Boolean</code></li></ul><ol><li><p>转化为String:</p><ul><li>调用被被转化类型的<code>toString</code>方法: (<code>XXX.toString()</code>),<strong>注意，他不会修改原变量，而是作为返回值返回</strong>，bool的toString是”true”/“false”但是存在问题，Null的toString会报错<code>Uncaught TypeError: Cannot read property &#39;toString&#39; of null</code>,<code>undefined</code>同理，因为这两个类型没有<code>toString</code></li><li>调用String()函数: 将被转化的数据作为参数传入, 这个支持Null与Undefined,<strong>说白了就是C++的构造函数</strong></li></ul></li><li><p>转化为Number</p><ul><li>Number函数: 同上，非数字的字符串转<code>Number</code>会<code>NaN</code>，空string串(允许包含任意空格)会转化为0, bool=true转为1,false转化为0, null转为0, undefined转为0</li><li>专门对付字符串的方式：parseInt()与parseFloat(),可以将字符串中有效的对应内容解析，例如<code>parseInt(&quot;123r456&quot;)</code>会先解析<code>123</code>然后遇到<code>r</code>直接<code>break</code>! , 对非string传入参数，会默认先String</li></ul></li></ol><p><strong>没有toNumber</strong></p><ol start="3"><li>转化为boolean<ul><li><code>Boolean</code>函数 Number 非0true,0false， String 非空true空false， Null 为false， undefined为false, Object为true</li></ul></li></ol><h2 id="其他进制的数字"><a href="#其他进制的数字" class="headerlink" title="其他进制的数字:"></a>其他进制的数字:</h2><ul><li>表示16进制(需要以0x开头)： <code>var a=0x3f3f3f3f;</code>, 输出会自动转化为10进制</li><li>表示8进制(需要以0开头)： <code>var a=070;</code>, 输出会自动转化为10进制</li><li>表示2进制(需要以0b开头)： <code>var a=0b10;</code>, 输出会自动转化为10进制</li></ul><p>  <strong>注意<code>parseInt(&quot;070&quot;)</code>会被不同浏览器解析成10或8进制,只需改为<code>parseInt(&quot;070&quot;,8)</code>即可</strong></p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>运算符也叫操作符，例如:<code>+</code>,<code>typeof()[返回值是string]</code></p><p>算数运算符:<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>：</p><ul><li><p><code>+</code>: 对非Number进行运算的时候遵循上面的规律进行转化运算，NaN参与运算结果一定是NaN，<strong>特殊的，两个字符串<code>相加</code>(只有相加)的结果是两个字符串拼接，任何值与字符串相加数字会转化为字符串任何拼接,包括NaN</strong>，利用这个性质可以任意类型+空字符串得到字符串类型，隐式类型转化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Infinity+&quot;hello&quot;</span><br><span class="line">&quot;Infinityhello&quot;</span><br><span class="line">NaN+&quot;hello&quot;</span><br><span class="line">&quot;NaNhello&quot;</span><br></pre></td></tr></table></figure><p>运算是<strong>自左向右</strong>的所以<code>&quot;1&quot;+2+3=&quot;123&quot;</code>,<code>1+2+&quot;3&quot;=&quot;33&quot;</code></p></li><li><p><code>-</code>/<code>*</code>/<code>/</code>:对非Number进行运算的时候遵循上面的规律进行转化运算，NaN参与运算结果一定是NaN，<strong>特殊的，字符串相减的时候会转化为Number</strong>，利用这个性质可以做string隐式类型转化为Number</p></li><li><p><code>%</code>取模运算</p></li></ul><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>一元运算符:<code>+</code>,<code>-</code></p><ul><li><code>Number</code>:<code>+</code>不会产生影响，<code>-</code>会取反</li><li>非<code>Number</code>会先转化再运算,例如<code>-true=-1</code>,<code>-NaN=NaN</code></li><li>利用这个性质<code>+a</code>可以吧a转化为<code>Number</code>，例如<code>+&quot;1&quot;+2+3=6</code></li></ul><h2 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h2><ul><li>自增可以使得变量在自身的基础上加1,<code>a++ &lt;=&gt; a=a+1</code>,<code>++a &lt;=&gt; a=a+1</code>,自带赋值，前后<code>++</code>与C语言相同</li><li>自减可以使得变量在自身的基础上减1,<code>a-- &lt;=&gt; a=a-1</code>,<code>--a &lt;=&gt; a=a-1</code>,自带赋值，前后<code>--</code>与C语言相同</li><li>唯一的区别是后++是先给值然后马上自增，没有C++所谓的分隔符，例如<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b++ + ++b + b);</span><br></pre></td></tr></table></figure>结果是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10+12+12&#x3D;34</span><br></pre></td></tr></table></figure>并且注意<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</span><br><span class="line">b=b++;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure>等价于<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var b&#x3D;10;</span><br><span class="line">var c&#x3D;b++;</span><br><span class="line">b&#x3D;c;</span><br><span class="line">console.log(b);</span><br></pre></td></tr></table></figure>同样的<code>--</code>同理</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>三个:非<code>!</code>,与<code>&amp;&amp;</code>,或<code>||</code></p><ul><li><code>!</code>:对bool进行运算就是取反，对非bool会先转化为bool我们可以利用他将一种类型将其转化为bool,方法是<code>!!tmp</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!a);</span><br><span class="line"><span class="built_in">console</span>.log(!!a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!b);</span><br><span class="line"><span class="built_in">console</span>.log(!!b);</span><br></pre></td></tr></table></figure>得到结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure></li></ul><p>-<code>&amp;&amp;</code>，<code>||</code>与C相同，也有短路，非bool进行运算需要先转换为bool进行运算，然后<strong>返回原值</strong></p><ul><li><code>&amp;&amp;</code>两个值都是<code>true</code>返回后边的</li><li><code>&amp;&amp;</code>有<code>false</code>，返回<code>第一个false对应的</code></li><li><code>||</code>有<code>true</code>返回<code>第一个true对应的</code></li><li>第一个是<code>false</code>返回第二个</li></ul><p>说白了返回值就是在加入短路原则之后最后判断的那个元素</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><code>+=</code>,<code>-=</code>,<code>*=</code>,<code>/=</code>,<code>%=</code>与C完全相同</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系成立返回<code>true</code></p><p><code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>==</code>,<code>!=</code></p><ul><li>除了<code>==</code>与<code>!=</code>符号:</li></ul><p>非数值的情况: 转化为Number, 任何值与<code>NaN</code>比较都是false</p><p>特殊的: 符号两侧都是字符串会分别比较字符的Unicode编码(和C++一样)，前面的一样短的小， 所以谨慎比较两个数字字符串</p><ul><li><p>对于<code>==</code>与<code>!=</code>符号： 类型不同会自动进行类型转化，但是左边转右边还是右边转左边都不一定，注意的是<code>undefined</code>==<code>null</code>,<code>任何值</code>==<code>NaN</code>都为false, 包括<code>NaN</code></p></li><li><p><code>===</code>,<code>!==</code>与<code>==</code>,<code>!=</code></p></li></ul><p>简单来说： <code>==</code> 代表相同， <code>===</code>代表严格相同</p><p>这么理解： 当进行双等号比较时候： 先检查两个操作数数据类型，如果相同， 则进行===比较， 如果不同， 则愿意为你进行一次类型转换， 转换成相同类型后再进行比较， 而===比较时， 如果类型不同，直接就是false.</p><p>操作数1 == 操作数2，  操作数1 === 操作数2</p><p>比较过程：</p><ul><li>双等号==： </li></ul><ol><li>如果两个值类型相同，再进行三个等号(===)的比较</li><li>如果两个值类型不同，也有可能相等，需根据以下规则进行类型转换在比较：<ol><li>如果一个是null，一个是undefined，那么相等</li><li>如果一个是字符串，一个是数值，把字符串转换成数值之后再进行比较</li></ol></li></ol><ul><li>三等号===:</li></ul><ol><li>如果类型不同，就一定不相等</li><li>如果两个都是数值，并且是同一个值，那么相等；如果其中至少一个是NaN，那么不相等。（判断一个值是否是NaN，只能使用isNaN( ) 来判断）</li><li>如果两个都是字符串，每个位置的字符都一样，那么相等，否则不相等。</li><li>如果两个值都是true，或是false，那么相等</li><li>如果两个值都引用同一个对象或是函数，那么相等，否则不相等</li><li>如果两个值都是null，或是undefined，那么相等</li></ol><h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a><code>Unicode</code>编码</h2><p>使用转义字符<code>\u+四位编码</code>在<code>console</code>输出Unicode编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;\u0031&quot;);</span><br><span class="line">console.log(&quot;\u2620&quot;);</span><br></pre></td></tr></table></figure><p><strong>注意这个值是16进制的</strong></p><p>使用<code>&amp;#+CODE+;</code>在网页输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&amp;#2620;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><p><strong>注意这个是十进制的</strong></p><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>三元运算符<code>XX?XX:XX</code>,与C完全相同，区别是C的第二第三位置只能写表达式，但是这里可以写函数</p><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><ul><li>可以使用<code>,</code>同时声明多个变量</li><li>先乘除后加减</li><li>同优先级自左向右</li><li>优先级同C</li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>JS的语句是一条一条自上到下顺序执行的，使用<code>&#123;&#125;</code>对代码进行分组,<code>&#123;&#125;</code>中的语句称作代码块，代码块内部内容对外完全可见</p><ul><li><p>流程控制语句</p><ul><li><p>条件判断语句</p><ul><li>if(条件表达式){语句}，当然单句不需要大括号</li><li>if(条件){语句1}else{语句2}</li><li>if(条件){语句1}else if(条件){语句2}… else{语句n}</li></ul></li><li><p>条件分支语句</p><ul><li>switch语句, 注意比较方式是<strong>全等</strong>比较，一旦全等从当前开始执行代码，所以和C一样要写<code>break</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">switch</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">case</span> X:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> Y:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> Z:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>十分先进的是<code>switch</code>的<code>case</code>支持case为条件，例如<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">switch</span>(<span class="params"><span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">case</span> a&gt;<span class="number">10</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>循环语句</p><ul><li><code>while()&#123;&#125;</code>   </li><li><code>do&#123;&#125; while()</code></li><li>for(;;){}</li></ul></li><li><p><code>break</code>&amp;<code>continue</code><br>正常模式下与C一样，但是在C在二重循环中想在内部循环中直接退出两个循环必须写flag然后两次break,JS提供了Label的机制可以直接用break退出指定循环而不是最近的循环，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">77</span> &amp;&amp; j==<span class="number">11</span>)</span><br><span class="line">      <span class="keyword">break</span> outer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样<code>  break</code>的就不是最近的循环了</p><h2 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h2></li></ul></li><li><p><code>prompt()</code>会弹出一个输入框，需要string作为参数，作为输入的提示, 返回值是输入(和py的input一样)</p></li></ul><h2 id="赋值的返回值"><a href="#赋值的返回值" class="headerlink" title="赋值的返回值"></a>赋值的返回值</h2><p>  与C++相同，赋值的返回值是这个值本身</p><p>  在C语言中如果你把<code>if(a==5)</code>写成<code>if(a=5)</code>那么一定会得到true,因为相当于是写了<code>if(5)</code>，</p><p>  在C语言中如果你把<code>if(a==0)</code>写成<code>if(a=0)</code>那么一定会得到false,因为相当于是写了<code>if(0)</code></p><p>  这里也是一样的</p><h2 id="设置计时器"><a href="#设置计时器" class="headerlink" title="设置计时器"></a>设置计时器</h2><p>注意，计时器的不是js里那个多长时间执行一次的计时器，而是个开发者debug的一个普通计时器，写法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;计时器名称&quot;</span>);</span><br><span class="line">...被计时的代码;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&quot;计时器名称&quot;</span>);</span><br></pre></td></tr></table></figure><p>最后会在浏览器的consol的上显示提示<code>计时器名称:XXms</code></p><h2 id="对象简介"><a href="#对象简介" class="headerlink" title="对象简介"></a>对象简介</h2><p>对象的分类：</p><ol><li>内建对象：在任何的ES标准的实现中都可以实现，例如<code>Math</code></li><li>宿主对象：JS允许环境提供的对象，主要指的是浏览器提供的对象，例如BOM, DOM，注意，这两个不是两个对象，而是两个对象族，包含的对象有例如<code>document</code></li><li>自定义对象：由开发人员自己创建的对象</li></ol><p>创建对象</p><ol><li><p>使用new关键字调用的函数是构造函数：<code>constructor</code></p><p>构造函数是专门用来构造对象的</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p> 上面这条命令就构造了一个Object对象</p></li><li><p>给对象添加属性</p><ul><li>对象.属性名=属性值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.name=<span class="string">&quot;AAA&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>读取对象中的一个属性</p><ul><li>对象.属性</li><li>读取对象没有的属性不会报错，会返回<code>Undefined</code></li></ul></li><li><p>修改对象的属性<br>不    - 对象.属性名=属性值</p></li><li><p>删除对象的属性</p><ul><li><code>delete 对象.属性名</code></li></ul></li></ol><p>注意事项</p><ul><li>对象的属性名不强制使用变量规范，例如<code>var</code>是接受的，但是不建议，注意的是，如果使用特殊名，要用如写写法增删查改<code>obj[&quot;属性名]=&quot;LALALAL&quot;</code></li><li>受益于动态语言，JS对象的属性值接受任何类型</li><li><code>in</code>运算符：<code>属性名</code> in <code>对象</code> 返回对象是否包含属性名的bool类型，属性名加引号</li><li>对象类型属于引用数据类型，<code>类似</code>于是C++的引用，如果一个对象是通过赋值得到的，元对象变化，被赋值的变量也会变化</li><li>注意这里的引用不是C++的引用，每一个对象实际的值是指针，所以可以设置<code>obj=NULL</code>取消这种联系，综上，这里的引用实际上相当于是一种指针</li><li>当你比较两个对象，他实际上比较的是两个对象的内存地址</li><li><strong>一定记住，JS的对象的引用和C++的指针一样</strong></li></ul><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><p>可以通过对象字面量的方式创建对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2=&#123;<span class="attr">name</span>:<span class="string">&quot;AAA&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;BBB&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>对象字面量属性名可以加<code>&quot;</code>也可以不加，不建议加，使用特殊属性名必须加</p><p>最后一个属性后面不要加逗号</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>函数也是一个对象</li><li>函数可以封装一些功能，在执行的时候需要执行这一系列代码</li><li>声明方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br></pre></td></tr></table></figure></li></ul><p>可以将要封装的代码以一种特殊的字符串的方式传递给构造函数</p><p>函数中的代码会在函数调用的时候执行</p><p>调用的方法是 <code>函数对象()</code>,这样函数会按照调用顺序执行</p><p>在开发中很少使用构造函数构造一个函数</p><p>可以使用函数声明创建一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span>,...,形参N]</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在<code>console.log(函数名)</code>查看函数内容</p><p>调用方法与之前相同</p><p>可以不写函数名创建一个匿名函数，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>可以在函数的括号中指定多个参数，受益于动态语言，不需要写明类型，解析器也不检查调用的时候实参的数量与类型，实参从左向右读，多的不管，如果少给了，没给的全部undefined</p><p>函数支持返回值<code>return val;</code>,return 之后的语句都不执行</p><p>得益于动态语言，可以肆无忌惮的使用一个(非)匿名对象(甚至是函数对象)作为参数</p><p>函数内部支持嵌套函数，这个时候要注意<code>fn4</code>是函数对象，值是代码的内容，<code>fn4()</code>是函数，值是函数的返回值</p><p>如果一个函数作为对象赋值给对象的一个属性那么这个函数也被称作<code>方法</code></p><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>有点函数我想让他在创建之后立即执行，但是只想让他执行一次，因为执行一次，给他一个对象或者是一个函数名似乎有点浪费，我们可以创建一个立即执行函数，就是在匿名函数的基础上外面加一个<code>()</code>, 例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  consol.log(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个方法会吧对象中每一个<strong>属性的名字</strong>赋值给变量，而不是属性值，可以做如下改进</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  consol.log(n+<span class="string">&quot;=&quot;</span>+obj[n]+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>在JS中一共有两种作用域：</p><ol><li>全局作用域<ul><li>直接编写在script标签中的js代码都在全局作用域</li><li>变量在页面打开时创建，在页面关闭的时候销毁</li><li>全局作用域中有一个全局对象<code>window</code> 他代表着浏览器窗口，他由浏览器创建可以直接使用，</li><li>在全局作用域用所有创建的对象都会作为window对象的属性保存，可以通过如下方式证明:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>考虑到对一个普通变量可以不声明直接定义成员函数，所以window对象理论上可以这么做，于是发现<code>var a=1</code>与<code>a=1</code>其实都可以声明一个变量</li></ul><ol start="2"><li>函数作用域<ul><li>调用函数的时候被创建 函数结束的时候销毁，每一次调用相互独立， 在函数中可以访问到全局变量，变量冲突的时候会保护内部变量， 如果实在是想访问全局变量可以使用<code>window.XX</code></li></ul></li></ol><h2 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h2><p>考虑运行以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">    a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="number">1</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>会得到如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">49 Uncaught ReferenceError: a is not defined</span><br><span class="line">b&#x3D;undefined</span><br></pre></td></tr></table></figure><p>可以看到b与a的报错不同，似乎是在说b定义了但是没有初始化，这是因为js在程序运行之前会将所有<code>var</code>的变量做提前声明，相当于执行了如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> b;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">    a=<span class="number">1</span>;</span><br><span class="line">    b=<span class="number">1</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>理论上，函数也是一个对象，变量是什么样的函数也应该是什么样的, 我们写下如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun1();</span><br><span class="line">fun2();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun2= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这相当于是做了函数的不声明就调用，但是fun1()顺利执行了，fun2()报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: fun2 is not a function</span><br></pre></td></tr></table></figure><p>这是因为我们可以理解变量的<code>var</code>相当于就是函数的<code>function</code> 所以第一个相当于是直接声明，第二个实际上是声明了一个变量等于这个函数对象，只是提前了变量，没有提前那个等于函数,上述代码相当于:(注意，函数提前声明的时候连值一起提前了)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun2;</span><br><span class="line"></span><br><span class="line">fun1();</span><br><span class="line">fun2();</span><br><span class="line"></span><br><span class="line">fun2= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意声明提前是提前到作用域开始时</strong></p><p><strong>我们说如果不写<code>var</code>就声明便来嗯相当于是声明了window的变量，所以在函数作用域内不加<code>var</code>声明的变量也相当于是声明了一个全局作用域的变量</strong></p><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>在要调试的代码前加入<code>debugger;</code>或者在浏览器source里面加入断点</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>JS解析器在每次调用函数的时候都会向函数内部传递一个隐含的参数，这个隐含参数就是<code>this</code></p><p>我们可以尝试输出<code>this</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Window &#123;<span class="attr">window</span>: Window, <span class="attr">self</span>: Window, <span class="attr">document</span>: <span class="built_in">document</span>, <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">location</span>: Location, …&#125;</span><br><span class="line"><span class="number">0</span>: Window &#123;<span class="attr">window</span>: Window, <span class="attr">self</span>: Window, <span class="attr">document</span>: <span class="built_in">document</span>, <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">location</span>: Location, …&#125;</span><br><span class="line">alert: ƒ alert()</span><br><span class="line">atob: ƒ atob()</span><br><span class="line">blur: ƒ blur()</span><br><span class="line">btoa: ƒ btoa()</span><br><span class="line">caches: CacheStorage &#123;&#125;</span><br><span class="line">cancelAnimationFrame: ƒ cancelAnimationFrame()</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><code>this</code>指向的是一个对象，叫做上下文对象，根据函数的调用方式，this会指向不同的对象，我们定义一个对象，里面包含一个函数对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">      <span class="comment">//console.log(&quot;a= &quot;+a+&quot;,b= &quot;+b);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  name:<span class="string">&quot;12&quot;</span>,</span><br><span class="line">  hh=fun;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.hh();</span><br><span class="line">fun();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到如下结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">name</span>: <span class="string">&quot;12&quot;</span>, <span class="attr">hh</span>: ƒ&#125;</span><br><span class="line">hh: ƒ fun()</span><br><span class="line">name: <span class="string">&quot;12&quot;</span></span><br><span class="line">__proto__: <span class="built_in">Object</span></span><br><span class="line"></span><br><span class="line">Window &#123;<span class="attr">window</span>: Window, <span class="attr">self</span>: Window, <span class="attr">document</span>: <span class="built_in">document</span>, <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">location</span>: Location, …&#125;</span><br><span class="line"><span class="number">0</span>: Window &#123;<span class="attr">window</span>: Window, <span class="attr">self</span>: Window, <span class="attr">document</span>: <span class="built_in">document</span>, <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">location</span>: Location, …&#125;</span><br><span class="line">alert: ƒ alert()</span><br><span class="line">atob: ƒ atob()</span><br><span class="line">blur: ƒ blur()</span><br><span class="line">btoa: ƒ btoa()</span><br><span class="line">caches: CacheStorage &#123;&#125;</span><br><span class="line">cancelAnimationFrame: ƒ cancelAnimationFrame()</span><br><span class="line">cancelIdleCallback: ƒ cancelIdleCallback()</span><br><span class="line">captureEvents: ƒ captureEvents()</span><br><span class="line">chrome: &#123;<span class="attr">loadTimes</span>: ƒ, <span class="attr">csi</span>: ƒ&#125;</span><br><span class="line"><span class="built_in">clearInterval</span>: ƒ <span class="built_in">clearInterval</span>()</span><br><span class="line"><span class="built_in">clearTimeout</span>: ƒ <span class="built_in">clearTimeout</span>()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据函数调用方式不同，函数的this不同，注意<strong>是调用方式不同，不是存储地址不同</strong>，以函数的形式调用，永远是<code>window</code>如果是对象以方法的形式调用，<code>this</code>指向的就是这个对象</p><h2 id="使用factory创建对象"><a href="#使用factory创建对象" class="headerlink" title="使用factory创建对象"></a>使用factory创建对象</h2><p>通过factory可以大批量的创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">creatPeople</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obg=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        obg.name=name;</span><br><span class="line">        obg.age=age;</span><br><span class="line">        obg.sex=sex;</span><br><span class="line">        obg.sayname=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> o1=creatPeople(<span class="string">&quot;A&quot;</span>,<span class="number">1</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> o2=creatPeople(<span class="string">&quot;B&quot;</span>,<span class="number">2</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> o3=creatPeople(<span class="string">&quot;C&quot;</span>,<span class="number">3</span>,<span class="string">&quot;female&quot;</span>);</span><br><span class="line">    o1.sayname();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>有一个缺点是使用这种方式创建的对象全部是Object类的对象，我们无法区分这个对象到底是什么</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>我们可以创建一个构造函数，让构造函数帮我们创建对象</p><p>构造函数与一般函数没有区别，建议首字母大写</p><p>构造函数调用的时候JS解释器：</p><ol><li>立刻创建一个对象</li><li>将this设置为他创建的对象</li><li>逐行执行程序中的代码</li><li>返回对象</li></ol><p>我们可以做如下调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">        <span class="built_in">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    syc=<span class="keyword">new</span> Person(<span class="string">&quot;syc&quot;</span>,<span class="number">17</span>,<span class="string">&quot;man&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(syc);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以使用 <code>instanceof</code> 判断一个对象是不是一个类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(syc <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure><p>返回<code>true</code></p><p><strong>所有的对象都是<code>Obejct</code>的实例</strong></p><p>这样的构造函数存在问题， 如果我的类中有一个成员函数，那么用如上的方式会创建100个对象，那么也会定义100个完全相同但是相互独立的成员函数，这会造成大量的浪费，我们可以在全局定义一个函数，然后声明变量的时候直接等于这个函数，这种方式节约了空间，但是全局函数会造成其他名字冲突与函数被其他对象调用的bug,造成程序不安全</p><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>原型属性: prototype</p><p>我们每创建一个函数的时候JS解析器会想函数中添加一个属性prototype</p><p>同样的，对象也具有<code>prototype</code>属性，但是不能直接访问，可以使用<code>obj.__proto__</code>访问，</p><p>同一个New函数做出来的对象，他们的原型对象属性都是相同的，这是因为<code>obj.__proto__</code>是个指针，指向<code>prototype</code>,也就是说同一个类具有相同的原型对象</p><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fun.prototype= &quot;</span>+fun.prototype);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mc = <span class="keyword">new</span> fun();</span><br><span class="line">    <span class="built_in">console</span>.log(mc.__proto__==fun.prototype);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mc2 = <span class="keyword">new</span> fun();</span><br><span class="line">    <span class="built_in">console</span>.log(mc2   .__proto__==mc.__proto__);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我们可以利用这个原型对象实现构造函数成员重复定义的问题，因为原型对象也是一个对象，把函数写在这个对象里面，实例的对象用的是原型的指针，所以只占用了一个指针空间，因为原型对象是构造函数的对象，别人不好访问，其次，JS有一个特点是对象如果调用自己的元素，如果自己作用域没有，会去原型对象里面找，原型没有才会去全局找，于是我们可以写出以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">...</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.sayname=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = New People(...)</span><br><span class="line"></span><br><span class="line">a.sayname();</span><br></pre></td></tr></table></figure><p>用如下方式写成员函数与变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc=<span class="keyword">new</span> People();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mc.toString());</span><br></pre></td></tr></table></figure><p>检查属性名是否在对象中，还是用<code>in</code>,但是如果属性是在prototype中也会产生true，若想区分，可以使用<code>obj.hasOwnProperty(&quot;属性名&quot;)</code>这样的话只有直接定义的会返回true，定义在prototype中的会false</p><p>原型对象也是对象，所以原型对象也有原型</p><p>当我们使用一个对象或者方法的时候会先使用，没有去原型对象，如果没有就去原型的原型找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(mc.__proto__.__proto__);</span><br><span class="line"><span class="built_in">console</span>.log(mc.__proto__.__proto__.__proto__);</span><br></pre></td></tr></table></figure><p>我们发现有原型的原型，没有原型的原型的原型</p><p>这是因为我们定义的一个类，那么他的实例的原型是这个构造函数的原型，而这个构造函数的原型指向了他的父类Object的原型,证明如下,在console下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> People;</span><br><span class="line"><span class="keyword">var</span> md = <span class="keyword">new</span> <span class="built_in">Object</span></span><br><span class="line">mc.__proto__ == md.__proto__</span><br><span class="line">mc.__proto__.__proto__ == md.__proto__</span><br></pre></td></tr></table></figure><p>第一个返回false，第二个true，做如下实验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mc.__proto__.__proto__.__proto__</span><br><span class="line">mc.__proto__.__proto__.__proto__.__proto__</span><br><span class="line">md.__proto__.__proto__</span><br><span class="line">md.__proto__.__proto__.__proto__</span><br></pre></td></tr></table></figure><p>结果是NULL，<code>Uncaught TypeError: Cannot read property &#39;__proto__&#39; of null</code>,NULL，<code>Uncaught TypeError: Cannot read property &#39;__proto__&#39; of null</code></p><p>三四是等价于一二的，只有我们看<code>mc.__proto__.__proto__.__proto__</code>相当于是mc的原型的原型的原型，mc的原型的原型就是md的原型，就是Object的原型对象，这个Object的原型对象也是对象，所以Object的原型对象也有<code>__proto__</code>但是他没有父类，相当于他的<code>__proto__</code>不指向任何对象，所以是NULL，这样的话如果我们访问<code>mc.__proto__.__proto__.__proto__.__proto__</code>相当于是访问<code>Object.__proto__.__proto__</code>,相当于是<code>NULL.__proto__</code>，所以报错</p><p>p.s. 在console下写<code>New</code>的时候<code>N</code>不能大写！</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>我们在打印对象console.log的时候，输出的结果默认是obj.toString()的返回值，如果我们实在是不想看这个数据，可以通过 <strong>重写</strong> toString解决，请注意，是重写不是重载，区别参考C++，我们还要保证重写的函数比原来的toString优先调用，可以发现<code>mc.__proto__.__proto__.hasOwnProperty(&quot;toString&quot;)</code>=true, 也就是说toString是定义在Object里面的函数，所以我们只要定义我们的toString在<code>mc</code>或者<code>mc.__proto__</code>里面，就会被优先调用，写下函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc=<span class="keyword">new</span> People();</span><br><span class="line"></span><br><span class="line">mc.toString=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mc);</span><br></pre></td></tr></table></figure><p>似乎没有正常显示，是因为2020年这个方法挂了</p><h2 id="垃圾回收-GC"><a href="#垃圾回收-GC" class="headerlink" title="垃圾回收(GC)"></a>垃圾回收(GC)</h2><ul><li>程序在运行过程中会产生垃圾, 会导致程序运行过慢，所以我们需要一个垃圾回收机制</li></ul><p>当一个对象没有任何变量指向他/对他引用，这种对象就是垃圾，他会大量占用内存空间，所以必须清理</p><p>JS目前有自动的垃圾回收机制，会自动销毁，我们也不能进行人工干预 </p><p>如果想让js进行回收可以直接让指向他的对象全部设为NULL，这样会自动回收垃圾，相当于我们只进行了吧对象认到垃圾桶，谁回收，如何销毁不用我们管</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>数组也是对象</p></li><li><p>他和普通对象功能类似，也是用来存值</p></li><li><p>不同的时候变量是用字符串做索引的，数组是用索引值访问的</p></li><li><p>创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure></li><li><p>添加/读取元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[i]=p;</span><br></pre></td></tr></table></figure></li><li><p>读取不存在的索引返回<code>Undefined</code></p></li><li><p>获取<strong>连续</strong>数组数组长度<code>arr.length</code></p></li><li><p>对于<strong>不连续</strong>的数组，会返回元素最大占用索引+1</p></li><li><p>可以用<code>console.log(arr)</code>打印数组，但是对于非连续数组会在没定义的地方不显示，于是会出现一堆<code>,,,</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">arr[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">arr[<span class="number">3</span>]=<span class="number">3</span>;</span><br><span class="line">arr.length=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">arr.length=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0,1,2,3,,,,,</span><br><span class="line">0,1</span><br></pre></td></tr></table></figure><p>可以看到手动修改arr的length会影响输出</p></li><li><p>小技巧，像数组最后元素输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[arr.length]=<span class="number">1</span>;</span><br><span class="line">arr[arr.length]=<span class="number">2</span>;</span><br><span class="line">arr[arr.length]=<span class="number">3</span>;</span><br><span class="line">arr[arr.length]=<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>正好执行一个命令长度也会相应变化  </p></li></ul><h2 id="使用字面量创建数组"><a href="#使用字面量创建数组" class="headerlink" title="使用字面量创建数组"></a>使用字面量创建数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br></pre></td></tr></table></figure><p>可以创建的时候初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>也可以使用如下方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>注意如上方式的问题</strong>,如果括号里的元素大于一个，没有问题，会作为数组的元素，如果只写一个元素，会被认为是创建了一个大小为那个元素的<strong>空数组</strong></p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>相当于是<code>,,,,,,,,,</code></p><p>因为是动态语言，所以里面可以放任意类型的元素，包括函数，数组</p><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><ol><li><code>push</code> 向数组后面添加一个或多个元素，返回值是push之后的长度</li><li><code>pop</code> 删除然后返回数组的最后一个元素</li><li><code>unshift</code> 向数组开头添加一个或多个元素，返回数组长度</li><li><code>shift</code> 删除第一个元素，返回第一个元素值</li></ol><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><p>除了使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;s.length;i+=<span class="number">1</span>)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>还可以使用<code>forEach()</code>方法，用法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JS执行的时候会执行<code>arr.length</code>次括号里的函数，程序会依次传递数组中每一个元素的值,下标，完整的数组作为三个参数传过去，程序只要接受他参数，当然，可以不使用匿名函数,可以给一个函数名</p><p><strong>注意，<code>forEach</code>在IE9-不支持</strong></p><h2 id="数组的其他方法"><a href="#数组的其他方法" class="headerlink" title="数组的其他方法"></a>数组的其他方法</h2><p><code>arr.slice(begin,end)</code>获取数组[begin,end)的子数组</p><p>该函数是方法，不修改数组，只返回子数组</p><p>第二个参数接受省略不写，会截取begin到结尾的子数组</p><p>如果索引是负数，就是从后往前走，和python一样</p><p><code>splice()</code>删除指定位置的元素，第一参数是要删除的位置(接受负数),第二个参数是删除的个数(如果是0就不删除)，第三个是要添加的元素(可选)</p><p><code>arr.concat(arr2,arr3,...)</code>链接多个个数组，然后将结果返回，不会修改原来的数组,当然，数组位置直接放元素也是接受的</p><p><code>.join()</code>返回将元素转化为字符串的结果，不影响原数组，同时括号内可以选择拼接元素，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> = <span class="string">[1,2,3]</span></span></span></span><br><span class="line"><span class="xml">&gt;&gt;&gt;(3) [1, 2, 3]</span></span><br><span class="line">&lt;&lt;&lt;a.join()</span><br><span class="line">&gt;&gt;&gt;&quot;1,2,3&quot;</span><br><span class="line">&lt;&lt;&lt;a.join(&quot; and &quot;)</span><br><span class="line">&gt;&gt;&gt;&quot;1 and 2 and 3&quot;</span><br></pre></td></tr></table></figure><p><code>reverse()</code> 反转数组<strong>注意这个方法会直接修改原数组</strong></p><p><code>sort()</code>对数组元素进行排序，<strong>unicode顺序</strong>，即使是对于纯数字也是用unicode排序，例如<code>2 3 11 8</code>会变成<code>11 2 3 8</code>,因为<code>1</code>比<code>2</code>大，支持自定义排序方式，自定义与C++不一样，返回正数表示前面的比后面的大，返回负数表示比后面的小，返回0表示相等，所以如果直接<code>return a&lt;b</code>会导致<code>=</code>与<code>&gt;</code>都认为是<code>=</code>，不交换顺序，于是有一个简单的写法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="函数对象的方法"><a href="#函数对象的方法" class="headerlink" title="函数对象的方法"></a>函数对象的方法</h2><p>函数也是一个对象，所以函数也有方法，注意的是<code>fun()</code>不是函数，是调用函数之后的返回值，如果要进行函数对象操作应该去掉<code>()</code>做为一个对象进行操作</p><p><code>call()</code>和<code>apply()</code>两个方法，当使用<code>fun.call()</code>与<code>fun.apply()</code>都可以实现函数的调用，区别是:<br>在调用<code>call</code>与<code>apply</code>的时候，我们可以即将第一个参数作为调用函数的对象，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">fun();</span><br><span class="line">fun.call(a);</span><br><span class="line">fun.apply(a);</span><br></pre></td></tr></table></figure><p>第一个调用输出的是window对象，第二个和第三个输出的是对象a</p><p>注意，第一个参数是<code>obj</code>必须写上，之后的元素，如果是call直接正常调用即可，如果是apply那么需要将所有实参封装到一个数组中去调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">fun.call(a,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">fun.apply(a,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">fun.call(a,[<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line">fun.apply(a,[<span class="number">1</span>,<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>返回值分别是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window... 1 2</span><br><span class="line">&#123;&#125; 1 2</span><br><span class="line">ERROR</span><br><span class="line">&#123;&#125; [1,2] undefined</span><br><span class="line">&#123;&#125; 1 2</span><br></pre></td></tr></table></figure><h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><p>在js中当我们去调用函数的时候，js解释器会想函数传递两个隐含的参数，(原来说只有以后是this)，其实还有一个叫，<code>arguments</code>，里面的内容就是程序调用的时候的实参列表,注意，你可以这样理解，实参调用的时候会先传递到arguments里面，然后一个一个在赋值给函数定义的形参，所以，理论上我们可以不写形参，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">fun2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>注意，不管你定义不定义形参，获取的arguments长度就是实参的个数</p><p>注意从0开始</p><p>两个调用结果相同(动态语言太香了)，</p><p><code>argument.callee</code>是argument的一个对象，内容是被调用函数的对象(相当于双向可以知道对方全部内容，(不安全？))</p><h2 id="date对象"><a href="#date对象" class="headerlink" title="date对象"></a>date对象</h2><p>在JS中使用date表示时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Data();</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>直接使用构造函数声明会显示当前代码执行的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;12/03/2020 11:12:3&quot;</span>);</span><br></pre></td></tr></table></figure><p>格式是:<code>月/日/年 小时:分:秒</code>,注意，年写YYYY,如果只写YY会被IE识别为19YY</p><ul><li><code>.getDate()</code> 是几号</li><li><code>.getDay()</code> 是一周中年那一天,注意，周日是<code>0</code>,周一是<code>1</code>，以此类推</li><li><code>.getMonth()</code> 当前对象是第几月 1月是0</li><li><code>.getFullYear()</code> 返回YYYY</li><li><code>.getYear()</code> 废除</li><li><code>.getTime()</code> 输出时间戳(从1970.1.1 0:0:0 花费的<strong>ms</strong>数，注意与C++不同，没有系统时钟)，如果你有兴趣输出<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mydate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;1/1/1970 0:0:0&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mydate.getTime());</span><br></pre></td></tr></table></figure>返回的不是0 ，而是<code>-28800000</code>,因为浏览器认为你输入的是中国(东八区)时间</li><li>获取当前时间戳<code>mydate=Date.now();</code></li></ul><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>虽然M是大写的，但是不是构造函数，是一个工具对象，拿开直接用</p><ul><li><code>.PI</code> 表示圆周率，一般全大写的表示常量</li><li><code>.abs(n)</code> n的绝对值</li><li><code>.cos(x)/.tan(x)/.sin(x)</code> 三角运算</li><li><code>.ceil(x)/.floor(x)</code> 向上向下取整</li><li><code>.round()</code> 四舍五入取整</li><li><code>.random()</code> 生成(0,1)的随机数</li><li><code>.max()/.min()</code> 最大最小值，参数数目不限</li><li><code>.pow(x,y)</code> 返回x^y</li><li><code>.sqrt(x)</code> 开方运算</li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>JS中的数据类型有:</p><ul><li>基本数据类型: <code>Number</code> <code>String</code> <code>Boolean</code> <code>Null</code> <code>Undefined</code></li><li>引用数据类型: <code>Object</code></li></ul><p>在JS中提供了三个包装类，我们可以通过这三个包装类将基本数据类型转化为对象，有<code>Number</code>,<code>Boolean</code>,<code>String</code></p><p>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object</span><br><span class="line">number</span><br></pre></td></tr></table></figure><p>使用包装类的优点是: 可以为这个新的包装类<code>a</code>设置很多自定义的方法，但是<code>b</code>不可以</p><p>但是，存在一个问题，两个对象即使内容相同，用来做<code>==</code>还是不同，因为对象的值是对象的<code>地址</code>，不是值，但是，时候解释器又会将Object转化为基本数据类型进行比较，这个时候<code>==</code>为true<code>===</code>为false</p><p>可见，在比较的时候，这个包装类存在诸多问题，不建议使用， 在开发的时候千万不要用</p><p>这个东西的作用是给JS底层用的，我们发现与C++不同，C++的string是一个类，自带了很多方法，但是JS不是，基本数据类型只存储数据，那么需要方法的时候怎么处理呢? JS会自动<strong>临时</strong>将基本数据类型转化为<strong>包装类</strong>，调用，然后在转换回来</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>在底层，字符串是以字符数组的方式保存的，所以可以使用[]访问元素</p><ul><li><code>str.charAt()</code>指定位置的元素，与<code>[]</code>方式获取的结果一样</li><li><code>str.charCodeAt()</code>获取指定位置元素的unicode</li><li><code>String.fromCharCode(X)</code>注意前面两个函数是字符串的函数，这个函数是<strong>字符串构造函数</strong>的，作用是Unicode转文字(支持0x的16进制)</li><li><code>str1.concat(str2,str3...)</code>连接字符串</li><li><code>str1.indexOf(str2)</code>检索字符串str1中是否包含指定内容str2，返回第一次出现的位置，找不到返回<code>-1</code></li><li><code>str1.indexOf(str2,i)</code>从第i位开始检索字符串中是否包含指定内容，返回第一次出现的位置，找不到返回<code>-1</code></li><li><code>str1.lastIndexOf(str2,i)</code>与<code>indexOf</code>相同，是从后往前找，注意同样可选i,表示从正数第几个开始往前找</li><li><code>slice()</code>截取字符串</li><li><code>substring()</code> 截取字符串，与<code>slice</code>不同的是不接受负数，遇到负数自动换成0,遇到前大于后会自动调整参数位置</li><li><code>str1.split(str2)</code>用str2为标记拆分str1,返回字符串数组</li><li><code>str.toUpperCase()</code> 字符串转全大写</li><li><code>str.toLowerCase()</code> 字符串转全小写</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式用来定义字符串的某些规则，计算机可以根据正则表达式判断一个字符串是否符合规则，将合法字符串提取出来</p><p>写法：<code>var reg = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;)</code></p><p>正则有一个方法<code>test(str)</code>判断str是否符合正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str));</span><br></pre></td></tr></table></figure><p>正则表达式:</p><ul><li>“a”： 这个正则表示字符串中是否包含”a”</li><li>“a|b” 使用<code>|</code>表示或者的意思，也就是匹配a或b</li><li>“[ab]” 匹配a或b</li><li>“[a-z]” 匹配a到z，相当于匹配所有小写字母</li><li>“[A-Z]” 匹配A到Z，相当于匹配所有小写字母</li><li>“[A-z]” 匹配A到Z，相当于匹配所有字母</li><li>“a[bde]c” 第一个是a,最后是c,中间bcd随意</li><li>“[^ab]” 匹配除了ab以外的</li><li>“[0-9]” 匹配任意数字 </li><li>“a{3}” 连续出现三次a的字符串</li><li>“(ab){3}” ab连续出现3次</li><li>“(ab){1,3}” ab连续出现1-3次(1或2或3)</li><li>“(ab){3,}” ab连续出现三次以上</li><li>“(ab)+” 至少出现一次，·相当于{1,}</li><li>“(ab)*” 有没有都可以, 相当于{0，}</li><li>“(ab)?” 0或1个,相当于{0,1}</li><li>“^a” 以a开头的，注意于[^a]不同<code>/[(^a)(^b)(^c)]ba&#123;3&#125;/.test(&quot;abaaa&quot;)</code>区分</li><li>“a$” 以a结尾</li><li>“^a$” a即使开头也是结尾，注意相当于只能匹配”a”不能是”aaa”</li><li>“.” 除了”\n”,”\r”的任意字符，如果想表示单纯的<code>.</code>可以使用转移<code>\.</code>，同理\表示\</li><li>“\d” 匹配0-9</li><li>“\D” 匹配非数字</li><li>“\s” 匹配空格</li><li>“\S” 匹配非空格</li><li>“\b” 匹配单词边界，就是这个字符是两个单词的分界点</li><li>“\B” 匹配非单词边界</li><li>“[(^\s)(\s$)]*”开头或者结尾的空格<br>匹配模式：</li><li>“i”: 忽略大小写</li><li>“g”: 将所有符合题意的全找到</li><li>接受连写</li></ul><p>可以使用 <code>var reg = /a/i</code>创建正则表达式，第一个参数是表达式，第二个是匹配模式，注意，这里不能写双引号，这个形式的表达式里面不能写变量</p><p>将正则表达式应用到字符串中</p><ul><li><p><code>str.split()</code>还是原来的正则拆分函数，应用如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;a1b2c3d4e5&quot;</span>.split(<span class="regexp">/[A-z]/</span>);</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(6) [&quot;&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span><br></pre></td></tr></table></figure></li><li><p><code>.search()</code>搜索字符串中是否含有指定内容，搜索到内容返回指定索引与<code>indexOf</code>类似，只找第一个，即使开了全局也不可以 </p></li><li><p><code>.match()</code>从一个字符串中将符合条件的提取出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;a1b2c3d4e5&quot;</span>.match(<span class="regexp">/[A-z]/</span>);</span><br><span class="line"><span class="string">&quot;a1b2c3d4e5&quot;</span>.match(<span class="regexp">/[A-z]/g</span>);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&quot;a&quot;, ...]</span><br><span class="line">(5) [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br></pre></td></tr></table></figure><p>注意这个方法匹配的结果数组</p></li><li><p><code>replace()</code>两个参数，被替换的正则表达式，替换之后的内容，默认只替换第一个，需要开启全局模式，第二个参数不写相当于就是删除</p></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM是文档对象模型的简称，JS中可以通过DOM对HTML文档进行操作</p><ul><li>文档: 指的是整个HTML页面</li><li>对象: 表示将文档的每一个部分都转化为了一个对象</li><li>模型: 表示对象之间的关系，方便我们获取对象</li><li>节点: 是我们网页的基本组成部分，是文档最基本的单元，大致可以分成四种<ul><li>文档节点: 整个HTML文档</li><li>元素节点: HTML中的标签</li><li>属性节点: 元素的属性</li><li>文本节点: HTML标签中的文字内容</li></ul></li><li>节点的属性:</li></ul><table><thead><tr><th></th><th>nodeName</th><th>nodeType</th><th>nodeValue</th></tr></thead><tbody><tr><td>文档节点</td><td>#documrnt</td><td>9</td><td>null</td></tr><tr><td>元素节点</td><td>标签名</td><td>1</td><td>null</td></tr><tr><td>属性节点</td><td>属性名</td><td>2</td><td>属性值</td></tr><tr><td>文本节点</td><td>#text</td><td>3</td><td>文本内容</td></tr></tbody></table><p>上述东西都是用来操作网页的</p><p>例如我们可以使用如下代码操作网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btm&quot;</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 浏览器已经为我们提供了文档节点，代表整个网页</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btm&quot;</span>);  <span class="comment">// 绑定对象</span></span></span><br><span class="line"><span class="javascript">        btn.innerHTML=<span class="string">&quot;123&quot;</span>;   <span class="comment">// 修改文字</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOM中的事件"><a href="#DOM中的事件" class="headerlink" title="DOM中的事件"></a>DOM中的事件</h2><p>事件是浏览器和文档窗口之间发生的交互瞬间,比如鼠标移动，点击按钮，关闭页面…</p><p>我们可以在事件对应的属性中设置一下代码，时间被触发的时候执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btm&quot;</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btm&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为单击时间绑定一个函数</span></span></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;123&quot;</span>);&#125;;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器在家在一个页面的时候是自上向下家在的,读一行运行一行那个,如果script太靠上会导致先加载代码后显示网页</p><p>如果执意想写上面的话,要加入命令告诉浏览器加载完成之后在执行,命令是<code>onload</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想追求性能写下面</p><p>去生产环境其实那里都有</p><h2 id="获取元素节点对象"><a href="#获取元素节点对象" class="headerlink" title="获取元素节点对象"></a>获取元素节点对象</h2><ul><li><code>document.getElementById()</code>通过ID获取一个元素节点的对象,注意是Element不是Elements所以必须是一个元素</li><li><code>document.getElementsByTagName()</code>注意这里是Elements,所以是返回一组对象 通过节点标签获取</li><li><code>document.getElementsByName()</code>注意这里是Elements,所以是返回一组对象 通过Name属性获取</li></ul><p>注意: <code>getElementsByTagName()</code>等elements函数返回的都是一个类数组对象,查询到的元素都会封装到类数组中,即使查询到的元素只有一个也会被封装到一个数组中 </p><p>对于自结束标签,innerHtml无意义</p><p>如果需要读取元素节点的属性直接就是<code>元素.属性名</code>,只有class不可以用这个方式读取, 因为class是js的保留字,相当于HTML用了,但是在JS中不可以使用,JS中HTML被占用了, 方法很简单,换一个元素即可,换成<code>className</code> </p><p>例如如下代码实现了一个轮播图的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        img&#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/imgs1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一张图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;last&quot;</span>&gt;</span>上一张图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pic=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;img&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst=<span class="built_in">document</span>.getElementById(<span class="string">&quot;last&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> nxt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;next&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> idx=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    nxt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        pic.src=<span class="string">&quot;./img/imgs&quot;</span>+(++idx)%<span class="number">4</span>+<span class="string">&quot;.jpg&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    lst.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        pic.src=<span class="string">&quot;./img/imgs&quot;</span>+(idx=(idx-<span class="number">1</span>+<span class="number">4</span>))%<span class="number">4</span>+<span class="string">&quot;.jpg&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取元素的子节点"><a href="#获取元素的子节点" class="headerlink" title="获取元素的子节点"></a>获取元素的子节点</h2><ul><li><code>Elem.getElementsByTagName()</code>在Elem元素的子节点中搜索</li><li><code>Elem.childNodes</code>当前元素的所有子节点</li><li><code>Elem.firstChild</code>当前节点的第一个子节点</li><li><code>Elem.lastChild</code>当前节点的最后一个子节点</li></ul><p>注意,childNodes会获取文本节点在内的所有节点,包括文本,例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果尝试查询ul的childNodes会发现有9个,1个是: <code>ul</code>后面的那个回车与空格,4个是: <code>li</code>后面的那个回车与空格,4个是<code>li</code>标签</p><p>确实不当人,你可以删除空白减少数目</p><p><strong>注意,IE8及一下不会将空格当成子节点</strong></p><p>可以使用children属性,没有兼容性问题</p><p>first,lastChild也获取空白 </p><h2 id="获取父元素与兄弟节点"><a href="#获取父元素与兄弟节点" class="headerlink" title="获取父元素与兄弟节点"></a>获取父元素与兄弟节点</h2><ul><li><p><code>Elem.parentNode</code>获取父元素,是<strong>属性</strong></p></li><li><p><code>Elem.previousElementSibling()</code>获取前一个兄弟元素(IE8- 不支持)</p></li><li><p><code>Elem.NextElementSibling()</code>获取后一个兄弟元素(IE8- 不支持)</p></li><li><p><code>.innerText()</code> 与<code>innerHTML()</code>唯一的不同就是去除了HTML标签</p></li><li><p><code>.previousSibling</code> 获取前一个兄弟<strong>节点</strong>,有可能是文本节点</p></li><li><p><code>.previousElementSibling</code> 获取前一个兄弟<strong>元素</strong>，一定是元素，<strong>IE8不支持</strong></p></li><li><p>获取文本节点的文本内容: 见前表，使用nodeValue</p></li><li><p>为了防止重定义： body使用document.body</p></li><li><p>为了防止重定义： body使用document.documentElement</p></li><li><p><code>document.all</code> 选中所有元素</p></li><li><p><code>getElementsByClassName()</code> 获取指定类的元素序列(IE8及以下不支持)</p></li><li><p><code>querySelect()</code> 可以根据CSS选择器获取节点(IE7及以下不支持)</p></li><li><p><code>querySelectAll()</code> 可以根据CSS选择器获取节点<strong>类数组</strong>(IE7及以下不支持)</p></li></ul><h2 id="a标签点击点击的默认行为"><a href="#a标签点击点击的默认行为" class="headerlink" title="a标签点击点击的默认行为"></a>a标签点击点击的默认行为</h2><p>如果写<code>&lt;a&gt;</code>标签的onclick,在点击结束,执行完JS代码后,会执行a的链接地址,会跳转到位置页面,可以在onclick函数写完返回false禁止这种行为</p><p>例如,删除自己所在的tr:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> allA = doctment.getElementByTagName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;allA.length;i++</span>)</span>&#123;</span><br><span class="line">    allA[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> tr = <span class="built_in">this</span>.parentNode.parentNode;</span><br><span class="line">      <span class="comment">//alert(&quot;确认删除&quot;)</span></span><br><span class="line">      <span class="keyword">var</span> tgname = tr.getElementsByTagName(<span class="string">&quot;tr&quot;</span>)[<span class="number">0</span>].innerHTML;</span><br><span class="line">      <span class="keyword">if</span> confirme(<span class="string">&quot;确认&quot;</span>+tgname+<span class="string">&quot;删除&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span>.parentNode.removeChild(tr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="table使用的注意事项"><a href="#table使用的注意事项" class="headerlink" title="table使用的注意事项"></a>table使用的注意事项</h2><p>即使你在HTML中没有写tbody,浏览器也会自动加上,所以选择元素的时候注意加上<code>tbody</code>等元素 </p><h2 id="js中索索引变化的问题"><a href="#js中索索引变化的问题" class="headerlink" title="js中索索引变化的问题"></a>js中索索引变化的问题</h2><p>有如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload()&#123;</span><br><span class="line">  <span class="keyword">var</span> s = querySelectAll(XXX);</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;s.length;i++</span>)</span>&#123;</span><br><span class="line">    s[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后,我们发现点击s[i]都会输出<code>s.length</code>,这是因为JS虽然语法规则与C++出奇类似,但是是一门<strong>解释型语言</strong>,不妨模拟一下运行流程(假设长度为3)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">JS解释器读取到&#96;window.onload()&#123;&#96;</span><br><span class="line">JS解释器等待到页面加载完成...</span><br><span class="line">JS解释器定义s,获取s&#96;var s &#x3D; querySelectAll(XXX);&#96;</span><br><span class="line">JS解释器执行for</span><br><span class="line">  i&#x3D;0:</span><br><span class="line">    s[0].onclick&#x3D;function()&#123;</span><br><span class="line">      alert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 注意此时内部只是一个字符串,这是一个对象,里面的i替换</span><br><span class="line">  i&#x3D;1:</span><br><span class="line">    s[1].onclick&#x3D;function()&#123;</span><br><span class="line">      alert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 注意此时内部只是一个字符串,这是一个对象,里面的i替换</span><br><span class="line">  i&#x3D;2:</span><br><span class="line">    s[2].onclick&#x3D;function()&#123;</span><br><span class="line">      alert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 注意此时内部只是一个字符串,这是一个对象,里面的i替换</span><br><span class="line">  i&#x3D;3:</span><br><span class="line">    JS解释器退出循环</span><br><span class="line">JS解释器等待其他操作</span><br><span class="line"></span><br><span class="line">JS解释器发现s[1]的按钮被按下</span><br><span class="line">JS执行函数&#96;function()&#123;alert(i);&#125;</span><br><span class="line">JS进入函数,发现i找不到,去更大作用域找,发现在for里面有一个i&#x3D;3</span><br><span class="line">JS输出i&#x3D;3</span><br></pre></td></tr></table></figure><p>如果是编译型语言就会在生成的时候直接 替换内部,没有这个问题,我们可以写下以下代码来验证上述过程的正确性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;123&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;123&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;123&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> allA=<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i;</span></span><br><span class="line">        for(i=0;i&lt;allA.length;i++)</span><br><span class="line"><span class="javascript">            allA[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                alert(i);</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        i+=100;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>任意一个输出103</p><p>在实际使用中注意</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload()&#123;</span><br><span class="line">  <span class="keyword">var</span> s = querySelectAll(XXX);</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;s.length;i++</span>)</span>&#123;</span><br><span class="line">    s[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.XXX=XXX;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没问题,click里面没有用i,用的是this,可以正常调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload()&#123;</span><br><span class="line">  <span class="keyword">var</span> s = querySelectAll(XXX);</span><br><span class="line">  <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;s.length;i++</span>)</span>&#123;</span><br><span class="line">    s[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      s[i].XXX=XXX;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会炸,因为s[i]永远是那个s[s.length]</p><h2 id="操作内联样式"><a href="#操作内联样式" class="headerlink" title="操作内联样式"></a>操作内联样式</h2><p>因为之前的JS都是操作HTML(结构),现在想操作CSS(表现)</p><p>可以使用<code>elem.style.样式名=样式值</code></p><p><strong>注意,样式值必须加引号,如下</strong></p><p>注意,样式名带<code>-</code>的在JS中会认为是减号,不合法,需要去掉<code>-</code>,后一位大写,如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn=<span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">        btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            box.style.backgroundColor=<span class="string">&quot;#000&quot;</span>;</span></span><br><span class="line"><span class="javascript">            box.style.width=<span class="string">&quot;100px&quot;</span>;</span></span><br><span class="line"><span class="javascript">            box.style.height=<span class="string">&quot;100px&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意,如果原来样式加入了<code>!import</code>,JS就废了</p><p>不加=”XXX”的话就可以读取样式了,但是注意,读取的结果都是有单位的字符串,有px,不要随便相加</p><p><strong>通过style属性写入与读取的都是内联样式,样式表设置的读取不了!!!</strong></p><h2 id="获取元素的其他样式"><a href="#获取元素的其他样式" class="headerlink" title="获取元素的其他样式"></a>获取元素的其他样式</h2><p>上述的style仅仅可以获取内联样式的值,可以将style换成<code>currentStyle</code>获取<strong>当前正在生效的值</strong>,不是一定是内联还是样式表,还是JS文件</p><p>但是有的时候我们不需要这样,例如定义了一个div,宽度默认是auto,那么获取的结果也是auto,并不是实际显示的宽度 </p><p><strong>currentStyle只有IE支持</strong></p><p>在其他浏览器中我们可以使用<code>getComputedStyle()</code>这个<strong>window的方法</strong>来获取样式</p><p>字面意可以这个是直接获取了具体的值(浏览器开发者工具那个computed)</p><p>IE8及以下不支持</p><p>用法为:<code>getComputedStyle(元素,伪元素)</code>,没有伪元素的写null,返回值是元素的CSS属性类,例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box=<span class="built_in">document</span>.queryS...;</span><br><span class="line"><span class="keyword">var</span> boxStyle=getComputedStyle(box,<span class="literal">null</span>);</span><br><span class="line">alert(boxStyle.width);</span><br></pre></td></tr></table></figure><p>问题在于我们的项目如果需要兼容IE8应该如何处理呢?</p><ul><li>用<code>currentStyle</code>chrome报错</li><li>用<code>getComputedStyle</code>IE8报错</li><li>可以自己封装一个函数解决问题<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)</span><br><span class="line">    <span class="keyword">return</span> getComputedStyle(elem,<span class="literal">null</span>)[name];</span><br><span class="line">  <span class="keyword">return</span> elem.currentStyle[name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>也可以写作<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem,name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="string">&quot;getComputedStyle&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span><br><span class="line">    <span class="keyword">return</span> getComputedStyle(elem,<span class="literal">null</span>)[name];</span><br><span class="line">  <span class="keyword">return</span> elem.currentStyle[name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>都可以改成三目运算符</li></ul><p>不用<code>if(getComputedStyle in window)</code>是因为<code>in</code>前面应该是变量名,如果不加<code>&quot;&quot;</code>会认为是变量值(也就是getComputedStyle的函数定义语句作为变量名)是不会是一个属性值</p><p>注意:通过<code>getComputedStyle</code>,<code>getCurrentStyle</code>获取的属性全部是只读的,不可修改</p><h2 id="其余的样式方法"><a href="#其余的样式方法" class="headerlink" title="其余的样式方法"></a>其余的样式方法</h2><ul><li><code>elem.clientHeight</code> 获取元素可见高度的属性 无单位 只读</li><li><code>elem.clientWidth</code> 获取元素可见宽度的属性 无单位 只读</li></ul><p>例如一个div是padding:10px,width=100px,heigh=100px;那么这个可见宽度是120,但是上一节的结果查出来是100px</p><ul><li><p><code>elem.offsetHeight</code> 获取元素可见高度(包括边框)的属性 无单位 只读</p></li><li><p><code>elem.offsetWidth</code> 获取元素可见宽度(包括边框)的属性 无单位 只读</p></li><li><p><code>offsetParent</code> 定位父元素:获取最近的包含块</p></li><li><p><code>offsetParent</code> 相对于定位父元素左偏移量:获取最近的包含块左偏移量</p></li><li><p><code>offsetParent</code> 相对于定位父元素右偏移量:获取最近的包含块右偏移量</p></li><li><p><code>scrollWidth</code> 元素在滚动的时候最大宽度</p></li><li><p><code>scrollHeight</code> 元素在滚动的时候最大高度</p></li><li><p><code>scrollLeft</code> 水平滚动条滚动的距离</p></li><li><p><code>scrollTop</code> 垂直滚动条滚动的距离</p></li><li><p><strong>注意一个元素如果有滚动条,那么clientHeight会加上滚动条的宽度</strong></p></li><li><p><code>onscroll</code>当元素滚动条在被调用</p></li><li><p><code>onmousemove</code>当元素<strong>上</strong>有鼠标</p></li><li><p><code>event.clientX</code>鼠标在可视区域的左偏移</p></li><li><p><code>event.clientY</code>鼠标在可视区域的上偏移</p></li><li><p><code>event.pageX</code>鼠标在整个页面的左偏移 IE8及以下不兼容</p></li><li><p><code>event.pageY</code>鼠标在整个页面的上偏移 IE8及以下不兼容</p></li></ul><p>注意,对于全页面的滚动条,chrome认为是body的,但是firefox认为是html的,所以如果想要获取全页面的滚动条可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scr = <span class="built_in">document</span>.body.XXX || <span class="built_in">document</span>.documentElement.XXX</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>希望做一个实时显示鼠标坐标的功能</p><p><strong>事件</strong>应该是<code>onmousemove</code>,在移动的时候被出发</p><ul><li>当事件对象被触发的时候,浏览器会对每一个事件进行实参传入,我们可以定义一个随便起个名字接受他, 这个事件会封装事件相关的细节变量,但是IE8不支持,在IE8中浏览器不会传递实参,而是将事件对象作为window的属性保存的,于是我们写下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">elem.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  event=event||<span class="built_in">window</span>.event;</span><br><span class="line">  <span class="built_in">console</span>.log(event.cilentX);</span><br><span class="line">  <span class="built_in">console</span>.log(event.cilentY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h2><p>冒泡指的是事件的向上传导,当后代元素的某个事件被触发,他的祖先元素如果拥有相同的事件那么也将会被触发,子元素优先执行</p><p>注意,冒泡对于一般的开发是好的,但是如果想要取消冒泡也很简单,如果原函数没有event就添加event,然后写程序结束的时候写下<code>event.cancelBubble=true</code>着冒泡至此停止,全浏览器支持</p><h2 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h2><p>当我们尝试添加一个对象的时候可以直接创建对象,对象的innerHTML设置为HTML代码,这样可以免去创建与连接节点的步骤,但是这样会导致之前的节点失效,解决方法是吧所有对于该节点所有相同的方法全部设置到节点的公共父元素上,这样由于事件的冒泡,后面的子节点事件发生他的公共祖先元素也会被调用,这就叫事件的委派</p><p>值得注意的是,如果我们想对指定的某一部分元素进行委派可以为准备委派的元素设定特定的class等标签实现,这里需要用到<code>event.target</code>属性,他的值是事件叶子节点的元素,我们可以通过<code>event.target.class</code>判断是否之指定的元素,如果元素绑定了多个class则需要使用正则</p><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><ul><li><p>使用<code>对象.事件=function()&#123;&#125;</code>的方法绑定元素之可以绑定一个事件,如果绑定多个会导致后面的函数覆盖前面的的函数</p></li><li><p>使用<code>addEventListener(&quot;事件字符串去掉on&quot;,回调函数,是否在捕获阶段触发事件一般false)</code>通过这个方法也可以为元素绑定响应函数. 注意,如果事件字符串有on一定要删除,例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>本来是要绑定<code>onclick</code>但是现在换成了<code>click</code>,<strong>绑定的事件是先绑定先执行</strong>,函数的this是调用元素</p></li><li><p>IE8及以下不支持,IE5-10提供了:<code>.attachEvent()</code>,用法是<code>.attachEvent(&quot;事件字符串不能删去on&quot;,函数)</code>,不需要第三个参数,有on的事件的on不能删除,<strong>绑定的事件是后绑定先执行</strong>,其中的this是<code>window</code></p></li><li><p>要解决兼容性还想需要我们自己抽象函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,eventstr,callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj.addEventListener)</span><br><span class="line">    obj.addEventListener(eventstr,callback,<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    obj.attachEvent(<span class="string">&quot;on&quot;</span>+eventstr,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 解决IE this为window的问题</span></span><br><span class="line">      callback.call(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h2><p>对于事件的传播网景与微软有着不同的理解,微软认为元素的事件应该是由内而外的传播,应该先触发当前元素上的事件,然后传播到祖先元素</p><ul><li>事件的冒泡: 触发事件的时候应该先触发内部的元素,然后传递到祖先元素</li><li>事件的捕获: 触发时间后先触发事件的祖先元素,之后传递到叶子节点</li><li>W3C综合了两方观点,将事件分成了单个阶段:<ul><li>捕获阶段: 捕获阶段从最外层祖先元素开始,想目标元素进行捕获,凡是此时默认不触发事件</li><li>目标阶段: 捕获的目标元素</li><li>冒泡阶段: 事件从祖先目标元素开始传递,依次触发祖先元素</li><li></li></ul></li></ul><h2 id="全选问题"><a href="#全选问题" class="headerlink" title="全选问题"></a>全选问题</h2><p>有点时候我们想拖动元素,但是如果选中了其他文字会导致文字被移动进入搜索模式,解决方法如下</p><ul><li>非IE: 拖动函数<code>return false;</code>取消默认操作</li><li>IE: 设置全局捕获,此时在任何元素上的对应操作都会被绑定到被设置的元素,甚至在浏览器之外的地方进行操作都会”重定向”到被设置元素,取消捕获可以使用<code>releaseCapture();</code>,chrome不认,写成<code>this.setCapture &amp;&amp; this.setCapture();</code>例子见拖动</li></ul><h2 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h2><p>实现一个鼠标拖动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html &#123;</span><br><span class="line">            height: 2000px2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">            z-index: 9;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;z-index:999;background-color: bisque;left:200px;top:200px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box2 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.box2&quot;</span>);</span></span><br><span class="line"><span class="javascript">        box.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.setCapture &amp;&amp; <span class="built_in">this</span>.setCapture();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> obj = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> boxstyle = getComputedStyle(<span class="built_in">this</span>, <span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> offsetX = event.clientX - <span class="built_in">parseInt</span>(boxstyle.left);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> offsetY = event.clientY - <span class="built_in">parseInt</span>(boxstyle.top);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> zidx = <span class="built_in">parseInt</span>(boxstyle.zIndex);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> X = event.clientX;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> Y = event.clientY;</span></span><br><span class="line"><span class="javascript">                obj.style.left = X - offsetX + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">                obj.style.top = Y - offsetY + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">                obj.style.zIndex = 2147483647;</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line">                obj.releaseCapture &amp;&amp; obj.releaseCapture();</span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line">                obj.style.zIndex = zidx;</span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.onmouseup = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 取消全选</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        box2.onmousedown = box.onmousedown;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="滚轮事件"><a href="#滚轮事件" class="headerlink" title="滚轮事件"></a>滚轮事件</h2><ul><li>chrome,IE的鼠标滚动事件是:<code>onmousewheel</code></li><li>火狐是<code>DOMMouseScroll</code>并且不接受直接定义,必须是<code>addEventListerer</code>绑定</li></ul><p>判断滚动方向需要event</p><ul><li>对于chrome,IE,使用<code>event.wheelDelta</code>正数是向上,向下是负,数值大小没有意义</li><li>对于火狐,使用<code>event.detail</code>负数是向上,正数向下,数值大小没有意义</li></ul><p>取消默认行为</p><p>滚动的时候会冒泡的全局拖动滚动条,所以要关闭</p><ul><li>chrome与IE: <code>return false;</code></li><li>火狐:<code>event.preventDefault()</code></li></ul><p>例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.box1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        box.onmousewheel=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            event=event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> boxstyle = getComputedStyle(<span class="built_in">this</span>, <span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">            box.style.height=(<span class="built_in">Math</span>.max(<span class="number">10</span>,<span class="built_in">parseInt</span>(boxstyle.height)+(event.wheelDelta/<span class="built_in">Math</span>.abs(event.wheelDelta))))+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">            event.preventDefault||event.preventDefault();</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><ul><li><code>onkeydown</code> 按键被按下</li><li><code>onkeyup</code> 键盘被松开</li></ul><p>键盘事件一般被绑定给可以获取焦点的对象(光标可以闪的对象),实际上都可以绑定</p><p>注意,<code>onkeydown</code>如果按下一个按键不松开会连续触发,但是第一次触发后稍微卡一下,这是浏览器设计的时候为了防止误触</p><ul><li><p>可以使用<code>.keyCode</code>获取按下的按键的unicode编码</p></li><li><p>判<code>Ctrl+W</code>是否被按下:ctrl的ASCII为17,W的unicode为87,但是不能写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.keyCode==<span class="number">17</span>&amp;&amp;event.keyCode==<span class="number">87</span></span><br></pre></td></tr></table></figure><p>这明显是假的,我们可以用特殊的键判断:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.ctrlKey&amp;&amp;event.KeyCode==<span class="number">87</span></span><br></pre></td></tr></table></figure><p>类似还有<code>altKey</code>,<code>ctrlKey</code>,<code>shiftKey</code>按下返回<code>true</code></p></li><li><p>在文本框中输入内容属于文本框的默认行为可以使用<code>return false;</code>禁用显示输入</p></li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM 浏览器对象模型</p><p>BOM可以通过JS操作浏览器, JS为我们提供了一族对象实现了对浏览器的操作,有</p><ul><li>window<ul><li>代表整个浏览器的窗口,也是window是全局对象</li></ul></li><li>navigator<ul><li>代表了当前浏览器的信息,通过这个对象可以识别浏览器</li></ul></li><li>location<ul><li>代表当前浏览器的地址栏信息</li></ul></li><li>history<ul><li>代表浏览器的历史记录,可以通过这个对象操作历史记录</li><li>由于隐私的原因,不能获取具体的历史记录,只能向前后翻页</li><li>该操作只能在当次访问有效</li></ul></li><li>screen<ul><li>代表用户的屏幕信息,这个对象可以获取显示器的相关信息   </li></ul></li><li>以上出来window之外的都是window的元素</li></ul><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><ul><li><code>appName</code>返回浏览器名称<ul><li>由于历史原因,Navigator大部分属性都不能帮助我们识别浏览器了</li><li>这个属性出来IE9及以下显示MS IE,其他都是网景,一般用一下方式判断浏览器信息</li></ul></li><li><code>userAgent</code>描述浏览器信息的内容<ul><li><code>chrome</code>:”Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36”</li><li>…</li><li>通过看这个字符串里面有没有firefox,chrome,MSIE(IE10-),什么都没有(IE11)</li><li>IE11啥都没有可以用IE特有的属性确定是否存在例如<code>ActiveXObject</code>,但是这个属性被用的太多了,所以微软吧这个属性的bool转化为了false我们可以改为<code>ActiveXObject in window </code></li></ul></li></ul><p>获取元素到底转化为bool的什么了可以使用<code>!!XXX</code></p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><ul><li><code>length</code> 历史记录长度</li><li><code>back()</code> 回到上一个页面,与浏览器的回退一样</li><li><code>forward()</code> 去下一个页面,与浏览器的前进一样</li><li><code>go()</code> 使用整数作为操作数,正数表示向前,负数向后,绝对值表示跳转页面数</li></ul><h2 id="loacation"><a href="#loacation" class="headerlink" title="loacation"></a>loacation</h2><p>直接打印location就可以获得当前页面的完整路径,如果修改了路径值,浏览器会自动刷新到修改的路径,同时生成历史记录</p><ul><li>window.location.href 返回当前页面的 href (URL)</li><li>window.location.hostname 返回 web 主机的域名</li><li>window.location.pathname 返回当前页面的路径或文件名</li><li>window.location.protocol 返回使用的 web 协议（http: 或 https:）</li><li>window.location.assign 加载新文档和直接修改值一样</li><li>window.location.reload() 重新加载文档(保存表单等缓存)</li><li>window.location.reload(true) 重新加载文档(强制清空缓存)</li><li>window.location.replace() 跳转链接(不保存历史记录)</li></ul><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ul><li>alert 只有确定的警告框</li><li>confirm 有确定和取消的警告框</li><li>prompt 可以输入数据的警告框</li><li>setInterval(回调函数,时间ms);开启定时器，window的方法，将一个函数每隔一段时间执行一次, 返回number类型的数据，作为定时器的id</li><li>clearInterval(n);关闭标识为n的定时器，n为undefined不报错</li><li>注意 setInterval 调用多次会调用多个计时器，在开的时候注意要不要清除以前的</li><li>setTimeout(function(){},时间ms);定时之后执行一次</li></ul><h2 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h2><p>代码与笔记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="css">      <span class="selector-class">.b1</span>&#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="css">      <span class="selector-class">.b2</span>&#123;</span></span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取box</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取btn01</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//为btn01绑定单击响应函数</span></span></span><br><span class="line"><span class="javascript">        btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//修改box的样式</span></span></span><br><span class="line">          /*</span><br><span class="line">           * 通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面</span><br><span class="line">           *  这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便</span><br><span class="line">           */</span><br><span class="line">          /*box.style.width = &quot;200px&quot;;</span><br><span class="line"><span class="javascript">          box.style.height = <span class="string">&quot;200px&quot;</span>;</span></span><br><span class="line"><span class="javascript">          box.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;*/</span></span><br><span class="line">          </span><br><span class="line">          /*</span><br><span class="line">           * 我希望一行代码，可以同时修改多个样式</span><br><span class="line">           */</span><br><span class="line">          </span><br><span class="line"><span class="javascript">          <span class="comment">//修改box的class属性</span></span></span><br><span class="line">          /*</span><br><span class="line"><span class="javascript">           * 我们可以通过修改元素的<span class="class"><span class="keyword">class</span>属性来间接的修改样式</span></span></span><br><span class="line">           * 这样一来，我们只需要修改一次，即可同时修改多个样式，</span><br><span class="line">           *  浏览器只需要重新渲染页面一次，性能比较好，</span><br><span class="line">           *  并且这种方式，可以使表现和行为进一步的分离</span><br><span class="line">           */</span><br><span class="line"><span class="javascript">          <span class="comment">//box.className += &quot; b2&quot;;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//addClass(box,&quot;b2&quot;);</span></span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">          <span class="comment">//alert(hasClass(box,&quot;hello&quot;));</span></span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">          <span class="comment">//removeClass(box,&quot;b2&quot;);</span></span></span><br><span class="line">          </span><br><span class="line"><span class="javascript">          toggleClass(box,<span class="string">&quot;b2&quot;</span>);</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">//定义一个函数，用来向一个元素中添加指定的class属性值</span></span></span><br><span class="line">      /*</span><br><span class="line">       * 参数:</span><br><span class="line"><span class="javascript">       *  obj 要添加<span class="class"><span class="keyword">class</span>属性的元素</span></span></span><br><span class="line"><span class="javascript">       *  cn 要添加的<span class="class"><span class="keyword">class</span>值</span></span></span><br><span class="line">       *  </span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//检查obj中是否含有cn</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">if</span>(<span class="params">!hasClass(obj , cn)</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          obj.className += <span class="string">&quot; &quot;</span>+cn;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">       * 判断一个元素中是否含有指定的<span class="class"><span class="keyword">class</span>属性值</span></span></span><br><span class="line"><span class="javascript">       *  如果有该<span class="class"><span class="keyword">class</span>，则返回<span class="title">true</span>，没有则返回<span class="title">false</span></span></span></span><br><span class="line">       *  </span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//判断obj中有没有cn class</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建一个正则表达式</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//var reg = /\bb2\b/;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\b&quot;</span>+cn+<span class="string">&quot;\\b&quot;</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> reg.test(obj.className);</span></span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">       * 删除一个元素中的指定的<span class="class"><span class="keyword">class</span>属性</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建一个正则表达式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\b&quot;</span>+cn+<span class="string">&quot;\\b&quot;</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//删除class</span></span></span><br><span class="line"><span class="javascript">        obj.className = obj.className.replace(reg , <span class="string">&quot;&quot;</span>);</span></span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      /*</span><br><span class="line">       * toggleClass可以用来切换一个类</span><br><span class="line">       *  如果元素中具有该类，则删除</span><br><span class="line">       *  如果元素中没有该类，则添加</span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">obj , cn</span>)</span>&#123;</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//判断obj中是否含有cn</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">if</span>(<span class="params">hasClass(obj , cn)</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//有，则删除</span></span></span><br><span class="line">          removeClass(obj , cn);</span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//没有，则添加</span></span></span><br><span class="line">          addClass(obj , cn);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>点击按钮以后修改box的样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;b1 b2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">此版为JavaScript基础版，以实际应用为主，来自尚硅谷2019李立超版</summary>
    
    
    
    <category term="前端" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="http://liukairui.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="笔记" scheme="http://liukairui.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript" scheme="http://liukairui.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>C语言switch的范围判断表达法</title>
    <link href="http://liukairui.cc/C%E8%AF%AD%E8%A8%80switch%E7%9A%84%E8%8C%83%E5%9B%B4%E5%88%A4%E6%96%AD%E8%A1%A8%E8%BE%BE%E6%B3%95/"/>
    <id>http://liukairui.cc/C%E8%AF%AD%E8%A8%80switch%E7%9A%84%E8%8C%83%E5%9B%B4%E5%88%A4%E6%96%AD%E8%A1%A8%E8%BE%BE%E6%B3%95/</id>
    <published>2020-10-30T16:00:23.000Z</published>
    <updated>2020-11-15T18:29:57.107Z</updated>
    
    <content type="html"><![CDATA[<p>switch语句可以用…来判断范围，要注意其边界条件(且为包含)，其表达方式如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0.</span>.<span class="number">.99</span>:                      <span class="comment">//等价于    0&lt;=x &amp;&amp; x&lt;=99;</span></span><br><span class="line">xxxxxx;</span><br><span class="line">xxxxxx;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">100.</span>.<span class="number">.199</span>：                 <span class="comment">//等价于    100&lt;=x &amp;&amp; x&lt;=199;</span></span><br><span class="line">     xxxxxx;</span><br><span class="line">xxxxxx;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> xxxxxx;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另一种常用方法是将其“/100取商”常量判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(x/<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">xxxxxx;</span><br><span class="line">xxxxxx;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>：</span><br><span class="line">     xxxxxx;</span><br><span class="line">xxxxxx;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> xxxxxx;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">switch语句可以用…来判断范围，要注意其边界条件(且为包含)</summary>
    
    
    
    <category term="C/C++语言" scheme="http://liukairui.cc/categories/C-C-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="语法" scheme="http://liukairui.cc/categories/C-C-%E8%AF%AD%E8%A8%80/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="C/C++语言" scheme="http://liukairui.cc/tags/C-C-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Html5的音视频标签与新增冷门标签</title>
    <link href="http://liukairui.cc/Html5%E7%9A%84%E9%9F%B3%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE%E4%B8%8E%E6%96%B0%E5%A2%9E%E5%86%B7%E9%97%A8%E6%A0%87%E7%AD%BE/"/>
    <id>http://liukairui.cc/Html5%E7%9A%84%E9%9F%B3%E8%A7%86%E9%A2%91%E6%A0%87%E7%AD%BE%E4%B8%8E%E6%96%B0%E5%A2%9E%E5%86%B7%E9%97%A8%E6%A0%87%E7%AD%BE/</id>
    <published>2020-10-30T16:00:22.000Z</published>
    <updated>2020-11-15T18:54:18.310Z</updated>
    
    <content type="html"><![CDATA[<p>似乎csdn的makedown不支持直接渲染html,如果央视不显示请放在自己的编辑器里面运行</p><h1 id="音视频标签"><a href="#音视频标签" class="headerlink" title="音视频标签"></a>音视频标签</h1><p>最H5之前音视频的实现方式是Flash或者是第三方插件例如QuickTime</p><ol><li><p>音视频的容器<br> 常见的mp4,avi只是容器的存储容器的格式，而不是容器的内容，就类似与压缩文件的zip和7z, 而被压缩的文件就是音轨和视频等等<br> 主流的格式有：</p><pre><code> - 视频: `MPEG-4`-`.mp4`, `flash`-`.flv`, `Ogg格式`-`.ogv`, `WebM格式`-`webm`, `音视频交错`-`avi` - 音频: `MPRG-3`-`.mp3`, `ACC音频`-`.acc`, `Ogg格式`-``</code></pre></li><li><p>编码解码器<br> 音视频的编码解码器是一组算法对文件进行编码解码以便播放, 原始的视频文件是非常大的，如果不进行编码和解码, 在互联网上传播时间是无法忍受的<br> 主流格式有:</p><pre><code> - 视频: `H.264`, `VP8`, `Ogg Theora` - 音频: `AAC`,`MPEG-3`,`Ogg Vorbis`</code></pre><p> 其中: </p><pre><code> - `H.264` 为了兼容所有的设备，提供了三种配置，提供了三种不同的解码算量的配置</code></pre><p> 编码存在无损与有损，项目一般用有损 </p></li></ol><ul><li><code>video</code> 在不指定的情况下大小与原文件长宽一致(替换标签大都这样例如<code>img</code>), 接受指定width与height</li><li><code>audio</code> 不接受宽高的样式</li></ul><p><strong>在本地下，使用Chrome无法拖动进度条</strong></p><h2 id="音视频标签的兼容性写法-type一定要写"><a href="#音视频标签的兼容性写法-type一定要写" class="headerlink" title="音视频标签的兼容性写法(type一定要写)"></a>音视频标签的兼容性写法(<code>type</code>一定要写)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./B.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./B.ogv&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./B.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;type/webm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    当前浏览器不支持video直接播放，点击这里下载视频: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;B.webm&quot;</span>&gt;</span>下载视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    &lt;source src=&quot;./A.mp3&quot; type=&quot;audio/mpeg&quot;&lt;/source&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./A.aac&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>; <span class="attr">codecs</span>=<span class="string">&quot;aac&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./A.oog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>; <span class="attr">codecs</span>=<span class="string">&quot;vorbis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的是<code>type</code>只是让浏览器识别这个格式的文件到底支不支持，如果支持浏览器就下载，但是下载之后浏览器会重新识别文件并播放，也就是说你可以写错<code>type</code>但是不能写错成浏览器不识别的</p><p><code> codecs</code>是编解码器</p><h2 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h2><ul><li><p>video</p><ul><li><code>controls</code> bool型，写上就有</li><li><code>width</code>, <code>height</code> 不加像素</li><li><code>poster</code> 海报,可以理解为视频的封面，给一个图片了路径</li><li><code>autoplay</code> 自动播放</li><li><code>loop</code> 循环播放</li><li><code>muted</code> 静音播放</li><li><code>preload</code> 告诉浏览器最佳播放的用户体验方式是什么<ul><li><code>none</code> 开发者认为用户不会看，所以不必缓存</li><li><code>metadata</code> 认为不会播放，但是应该先获取视频的元数据例如时长</li><li><code>auto</code> 优先加载，允许下载整个视频</li><li>空字符串 等价于<code>auto</code></li></ul></li></ul></li><li><p>audio</p><ul><li><code>controls</code> bool型，写上就有</li><li><code>autoplay</code> 自动播放</li><li><code>muted</code> 静音播放</li><li><code>loop</code> 循环播放</li><li><code>preload</code> 告诉浏览器最佳播放的用户体验方式是什么<ul><li><code>none</code> 开发者认为用户不会看，所以不必缓存</li><li><code>metadata</code> 认为不会播放，但是应该先获取视频的元数据例如时长</li><li><code>auto</code> 优先加载，允许下载整个视频</li><li>空字符串 等价于<code>auto</code> </li></ul></li></ul></li></ul><h2 id="property"><a href="#property" class="headerlink" title="property"></a>property</h2><p>在js中查询音视频的元数据(例如长度)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> vid=<span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> aud=<span class="built_in">document</span>.querySelector(<span class="string">&quot;audio&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(vid.duration);</span><br><span class="line">        <span class="built_in">console</span>.log(aud.duration);</span><br><span class="line">    &#125;,<span class="number">500</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>由于chrome的加载策略必须设置延时，但是firefox不需要，不设置chrome显示<code>NAN</code>，类似的还有</p><ul><li>当前播放时长<code>.currentTime</code>(秒)</li><li>是否静音<code>.muted</code>(true/false)</li><li>获取音量<code>.volume</code>(0-1)</li><li>是否暂停<code>.paused</code>(true/false)</li><li>是否结束<code>.ended</code>(true/false)</li><li>是否出错<code>.error</code>(true/false)</li><li>当前播放文件地址<code>.currentSrc</code>(秒)</li><li>标签的长宽<code>width</code>/<code>height</code></li><li>文件的长宽<code>videoWidth</code>/<code>videoHeight</code></li></ul><p><strong>注意：上面的都不是左值 接受修改，例如<code>vid.volume=0.2;</code></strong><br><strong>注意：<code>muted</code>的优先级<code>volum</code>高，所以设置muted之后volum无效</strong></p><h2 id="音视频的js函数"><a href="#音视频的js函数" class="headerlink" title="音视频的js函数"></a>音视频的js函数</h2><ul><li><code>play()</code>媒体播放</li><li><code>pause()</code>媒体暂停</li><li><code>load()</code>媒体重新加载 </li></ul><h1 id="状态标签"><a href="#状态标签" class="headerlink" title="状态标签"></a>状态标签</h1><ul><li><p><code>meter</code> 用来显示(已知范围的标量值)或(分数值) 注意断句，效果就是现实一个进度条,如图例如<code>&lt;meter value=&quot;0.3&quot;&gt;&lt;/meter&gt;</code>就是这样的<meter value="0.3"></meter>(markdown支持Html是真的方便)参数有：</p><ul><li><code>value</code>当前值</li><li><code>min</code> 下边界，默认0, <code>max</code> 上边界，默认1</li><li><code>low</code>,<code>heigh</code>表示正常值范围，低于<code>low</code>会有特殊样式,高于也会，例如<code>&lt;meter value=&quot;0.3&quot; low=&quot;0.4&quot; high=&quot;0.8&quot;&gt;&lt;/meter&gt;</code><meter value="0.3" low="0.4" high="0.8"></meter>和<code>&lt;meter value=&quot;0.9&quot; low=&quot;0.4&quot; high=&quot;0.8&quot;&gt;&lt;/meter&gt;</code><meter value="0.9" low="0.4" high="0.8"></meter></li><li><code>optimum</code> 最优值<code>&lt;meter value=&quot;0.5&quot; low=&quot;0.4&quot; high=&quot;0.8&quot; optimum=&quot;0.5&quot;&gt;&lt;/meter&gt;</code><meter value="0.5" low="0.4" high="0.8" optimum="0.5"></meter></li><li>值得注意的是<code>min</code>&lt;<code>low</code>&lt;<code>height</code>&lt;<code>max</code>,<code>min</code>&lt;<code>value</code>&lt;<code>heigh</code>,<code>optimum</code>不受限制</li></ul></li><li><p><code>process</code>描述一个工作完成的进度</p><ul><li><code>value</code> 当前值(不写表示当前任务无法估量，是一个正在进行中的条)</li><li><code>max</code> 总任务量</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> <span class="attr">max</span>=<span class="string">100</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">100</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure><p><progress value="20" max=100></progress><br><br><br><progress max=100></progress></p><h1 id="结构化标签"><a href="#结构化标签" class="headerlink" title="结构化标签"></a>结构化标签</h1><ul><li><p><code>datalist</code> 包含一族<code>option</code>元素,这些元素表达表单的可选值元素,内容写在datalist里面，可用于表单选择，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>普通版<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>新版<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;123&quot;</span> <span class="attr">list</span>=<span class="string">&quot;tmp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;tmp&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>好好<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>嘿嘿<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>  <p>普通版</p><input type="text" placeholder="123"></input><p>新版</p><input type="text" placeholder="123" list="tmp"></input>  <datalist id="tmp">      <option value="A">好好</option>      <option value="B">哈哈</option>      <option value="1">嘿嘿</option>      <option value="12">呵呵</option>  </datalist></li><li><p><code>detail</code>&amp;<code>summary</code>标签，组合使用，现实详情，相当于是做了一个js封装，但是交互太差没人用</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">summary</span>&gt;</span>这是第一个summary<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个解释<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个解释<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个解释<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个解释<span class="tag">&lt;/<span class="name">p</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>  <details>      <summary>这是第一个summary</summary>      <p>这是一个解释</p>      <p>这是一个解释</p>      <p>这是一个解释</p>      <p>这是一个解释</p>          </details></li><li><p>注释标签<br>  更像是注音标签，<code>ruby</code>里面写被标注的部分，标注的部分写在被标注的旁边，用<code>rt</code>包起来，例如<code>&lt;p&gt;&lt;ruby&gt;凎&lt;rt&gt;gan&lt;/rt&gt;&lt;/ruby&gt;&lt;/p&gt;</code>会得到</p>  <p><ruby>凎<rt>gan</rt></ruby></p></li></ul><h1 id="语义标签"><a href="#语义标签" class="headerlink" title="语义标签"></a>语义标签</h1><ul><li>mark(语义化标签)，着重<br>  突出某内容的行内元素<code>&lt;mark&gt;这是一个mark&lt;/mark&gt;</code><mark>这是一个mark</mark></li></ul><h1 id="新表单"><a href="#新表单" class="headerlink" title="新表单"></a>新表单</h1><p>仍然使用form标签 </p><p>新增选项</p><ul><li>input:type=”email” 输入会检查邮件格式，有问题会报错</li><li>input:type=”tel” 移动端会自动切换到数字键盘</li><li>input:type=”url” 输入会检查url格式，有问题会报错(必须有http,www)</li><li>input:type=”search” 搜索狂，输入后显示清空的叉</li><li>input:type=”range” 滑块，可以设置<code>min</code>,<code>max</code>,<code>step</code></li><li>input:type=”number” 移动端显示数字键盘</li><li>input:type=”color” 颜色选择器</li><li>input:type=”datetime” 输入有时区的日期时间</li><li>input:type=”datetime-local” 输入没有时区的日期时间</li><li>input:type=”time” 输入时间</li><li>input:type=”date” 输入日期</li><li>input:type=”week” 输入周</li><li>input:type=”month” 输入月份</li></ul><p>新增属性</p><ul><li><p><code>placeholder</code>输入框的默认提示信息</p><p>选中placeholder(搜索框的默认值): <code>::-webkit-input-placeholder</code></p></li><li><p><code>autoforce</code>自动获取焦点，多个元素同时自动获取焦点只有第一个有效</p></li><li><p><code>require</code> 要求必填</p></li><li><p><code>formaction</code> 特殊定义提交的地址</p></li></ul><p>新增js</p><p>表单验证</p><p>validity对象，通过下面的valid可以查看验证是否通过，如果八种验证都通过返回true，一种验证失败返回false<br>node.addEventListener(“invalid”,fn1,false);</p><ul><li>valueMissing       :  输入值为空时返回true</li><li>typeMismatch      :  控件值与预期类型不匹配返回true</li><li>patternMismatch  :  输入值不满足pattern正则返回true</li><li>tooLong           :  超过maxLength最大限制返回true</li><li>rangeUnderflow   :  验证的range最小值返回true</li><li>rangeOverflow    :  验证的range最大值返回true</li><li>stepMismatch     :  验证range 的当前值 是否符合min、max及step的规则返回true</li><li>customError 不符合自定义验证返回true<br>  setCustomValidity</li></ul><p>关闭验证<br>    formnovalidate属性</p><p>​        </p>]]></content>
    
    
    <summary type="html">介绍了HTML5中新增的有趣有没什么用的标签，~~唯一的价值是在面试的时候吹B~~</summary>
    
    
    
    <category term="前端" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML&amp;CSS" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/HTML-CSS/"/>
    
    
    <category term="前端" scheme="http://liukairui.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="http://liukairui.cc/tags/HTML/"/>
    
    <category term="笔记" scheme="http://liukairui.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>尚硅谷Canvas学习笔记</title>
    <link href="http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7Canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7Canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-30T16:00:21.000Z</published>
    <updated>2020-11-15T18:24:54.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML5的优势"><a href="#HTML5的优势" class="headerlink" title="HTML5的优势"></a>HTML5的优势</h2><p>跨平台:唯一一个通吃PC,Mac,Iphone,Android的跨平台语言</p><ul><li>快速迭代</li><li>降低成本</li><li>导流入口多</li><li>分发效率高</li></ul><h2 id="Canvas-基本用法"><a href="#Canvas-基本用法" class="headerlink" title="Canvas 基本用法"></a>Canvas 基本用法</h2><ol><li><p>什么是Canvas(画布)</p><ol><li>canvas是HTML5中的新增元素,可用于使用JavaScript中的脚本来绘制图形,创建动画,注意的是写Canvas的时候要标签要成对出现,这是为了提高兼容性, 另外Canvas的性能是极高的</li><li>Canvas 的默认是透明背景,但是支持设定自己的背景</li><li>Canvas 具有默认的宽高</li></ol></li><li><p>替换内容</p><ol><li><p>Canvas 不兼容IE9- 所以需要定义一个替换内容提示升级浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>您的浏览器不支持画布元素请您换成萌萌哒谷歌浏览器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样支持Canvas 的浏览器会忽略包含的内容,只会正常渲染Canvas</p><p>不支持Canvas 的浏览器会现实代替内容</p></li></ol></li><li><p>Canvas 的两个特殊属性</p><ul><li>width,height 是Canvas的两个特殊属性, 注意的是当使用这两个属性的时候,只能在html标签上不用<code>style</code>写,不能用CSS写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>您的浏览器不支持画布元素请您换成萌萌哒谷歌浏览器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>但是不能写<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#test</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>原因是: 使用HTML的写法是扩大了Canvas的大小实现的设定,而CSS是对其直接进行放缩, 可以理解为HTML的写法是修改了<code>画布大小</code>, 但是CSS是修改了<code>图像大小</code></li></ul></li><li><p>在Canvas中画图</p><ol><li><p>取得画布: 方法是在<code>body</code>后面写<code>script</code>里面写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>取得笔 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>先用if看看能不能取得画笔,如果可以就吧画笔给ctx(一般就这样命名) 然后要传一个值表示是在2D上画图(3D叫WebGL)</li></ol><p>我们也一般称这个画笔为<code>渲染上下文</code></p><p>Canvas上有一给叫<code>getContext()</code>的方法,这个方法可以用来获得渲染上下文和绘画功能,<code>getcontext</code>只有一个参数</p></li></ol></li></ol><h2 id="在Canvas-中绘制矩形"><a href="#在Canvas-中绘制矩形" class="headerlink" title="在Canvas 中绘制矩形"></a>在Canvas 中绘制矩形</h2><p><strong>在HTML的Canvas中原生只支持绘制矩形,其他所有的图形都至少要绘制生成一条路径</strong></p><ol><li><p>绘制基础矩形</p><p> Canvas中有三种绘制方法</p><ul><li><p>绘制一个填充的矩形(默认为黑色)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fillRect(x,y,width,height);</span><br></pre></td></tr></table></figure></li><li><p>绘制一个矩形边框(边默认为1px 黑色)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strokeRect(x,y,width,height);</span><br></pre></td></tr></table></figure></li><li><p>清除制定的矩形区域(清除的地方默认透明)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clearRect(x,y,width,height);</span><br></pre></td></tr></table></figure><p>例如可以使用如下方式画一个矩形, <strong>一定注意,括号里面不能写px,但是默认px</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        ctx.strokeRect(<span class="number">110</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        ctx.strokeRect(<span class="number">110.5</span>,<span class="number">110.5</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        ctx.clearRect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>边框的问题</p><p>  如果在吧上面的代码画出来放在PS中看,会发现其实边框有两个像素,有一个像素与黑块重合, 我们知道110px上是第110个黑块右下角那个分界点</p><p>  想象画笔从哪里落笔,准备画图,一共是1px的边,所以左右都是0.5px, 想的是这么渲染, 但是没有0.5px 于是渲染成了左右1px,最后就是2px</p><p>  如果是是在想画1px可以写成<code>ctx.strokeRect(110.5,110.5,100,100);</code> </p></li><li><p>清除方法</p><p>  实际上相当于覆盖了一个透明矩形,但是不是填充了一个同色的矩形(画个过渡色就看出来了)  </p></li><li><p>存在的问题</p><p>  边框宽度,颜色不能改变,CSS无法直接选择Canvas的元素</p></li></ul></li><li><p>添加颜色和样式</p><p> 填充颜色相当于给画笔上颜料</p><p> 例如</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            ctx.fillStyle=<span class="string">&quot;deeppink&quot;</span>;</span><br><span class="line">            ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            ctx.strokeStyle=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">            ctx.lineWidth=<span class="number">10</span>;</span><br><span class="line">            ctx.strokeRect(<span class="number">110</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            ctx.clearRect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p> <code>.fillstyle</code> 填充的颜色, 和画边框没关系</p></li><li><p> <code>.strokeStyle</code> 轮廓的颜色</p></li><li><p><code>.linerWidth</code> 轮廓的宽度,不能带单位(这里线宽度不接受: 0, 负数, Inf, NaN, 默认1.0)</p><p><code>Canvas</code> 绘制没有延迟加载!</p></li></ul></li><li><p>lineJoin 的轮廓接合处的样式</p><ul><li>round: 圆角</li><li>bevel: 斜角</li><li>mirer: 直角</li></ul></li></ol><h2 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h2><p>Canvas 的基本元素是路径, 路径是通过不同颜色和宽度的线段和曲线连接形成的不同元素的点的集合</p><ol><li><p>步骤</p><ul><li>确定路径的起始点</li><li>使用画图命令画出路径</li><li>把路径封闭</li><li>路径一旦生成,就可以通过描边或填充路径区域来渲染图形</li></ul></li><li><p>绘制路径的基本函数</p><ul><li><p><code>.moveTo(x,y)</code> 先抬笔,然后将笔触移动到制定的坐标上</p></li><li><p><code>.lineTo(x,y)</code> 先落笔,然后将与指定坐标之间连线</p><p>一般情况下,如果只是用以上方法,必须是划线为一个封闭图形,可以通过以下方式简化过程</p></li><li><p><code>.closePath()</code> 与开始点之间自动连接封闭</p></li><li><p><code>.beginPath()</code> 写在路径开始之前 </p><p>还有绘图函数</p></li><li><p><code>.fill()</code> 填充颜色(可以自动闭合路径,也就是自动调用<code>.closePath</code>)</p></li><li><p><code>.stroke()</code> 填充轮廓(不自动调用<code>.closePath</code>)</p><p>部分实现原理: 应该是遇到画路径的命令之后路径命令会压入到一个存储器中,遇到fill之后就会把所以的路径全部取出,绘制,然后<strong>还要放回</strong>,除非遇到<code>.beginPath()</code>会清空</p></li></ul></li><li><p>重新绘制矩形</p><p> 之前绘制矩形的方式是直接渲染,这里我们采用类封装的方式通过路径实现矩形的绘制</p><p> 函数<code>.rect(x,y,width,height)</code></p><p> 例如</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ctx.rect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            ctx.fill()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>其他函数</p></li></ol><ul><li><p><code>lineCap()</code></p><p>lineCap是Canvas 2D API 指定如何绘制每一条直线的末端属性</p><p>可选值有三个:</p><ul><li>butt: 线段末端以方形结尾</li><li>round: 线段末端与圆形结束</li><li>square : 线段末端以方形结束,但是结束之后会增加一个宽度与线段相同,高度是线段宽度一半的矩形区域 </li></ul></li><li><p><code>.save()</code>&amp; <code>restore()</code> </p><p>  <code>save()</code>与<code>restore()</code>相当于是一对<strong>堆栈操作</strong></p><p>  我们可以理解我们一般设置的样式会暂存在样式容器中, 调用<code>save()</code>样式容器的内容会作为一个对象去存储到样式栈(<strong>不</strong>清空样式容器, 但是任何向样式容器写入样式都会完全覆盖), 每次调用<code>restore()</code>会将样式栈弹出, 覆盖掉原有样式容器的内容</p><p>  例如</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>)</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.fillStyle=<span class="string">&quot;pink&quot;</span>;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.fillRect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            ctx.restore();</span><br><span class="line"></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.fillRect(<span class="number">150</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>  在代码中, 我们绘制了两个矩形, 但是左上角的是粉色的, 右下角的是黑色的, 很容易理解的思想是<strong>把<code>.save()</code>与<code>.restore()</code>认为是一个块级作用域, 像一个函数一样, 内部声明不支持外部</strong>, 但是是错的, 应该理解为<strong>第一个 <code>.save()</code>将默认样式入栈, 设置了新的样式, <code>.restore()</code> 把默认样式弹出放回样式容器</strong>, 虽然效果与块级作用域的理解差不多…</p><p>  所以我们推荐这样写Canvas</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>)</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            ctx.save();</span><br><span class="line">            <span class="comment">// 设置样式一</span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            <span class="comment">// 写路径一</span></span><br><span class="line">            ctx.restore();</span><br><span class="line">        </span><br><span class="line">            ctx.save();</span><br><span class="line">            <span class="comment">// 设置样式二</span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            <span class="comment">// 写路径二</span></span><br><span class="line">            ctx.restore();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>  最开始的那个<code>.save()</code>似乎没有用, 实际上是存储了默认样式,防止被覆盖, 栈操作可以嵌套, 就进配对原则(实际上就是栈的FLLF) 切记配对好</p></li></ul><h2 id="制作签名版"><a href="#制作签名版" class="headerlink" title="制作签名版"></a>制作签名版</h2><p>因为旧版课程找不到了, 只能从代码中理解为什么这样写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.setCapture</span>)</span>&#123;</span><br><span class="line">            testnode.setCapture();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        testnode.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.beginPath()</span><br><span class="line">            ctx.moveTo(ev.clientX-testnode.offsetLeft, ev.clientY-testnode.offsetTop);</span><br><span class="line">            <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">                ev=ev||<span class="built_in">window</span>.event;</span><br><span class="line">                ctx.lineTo(ev.clientX-testnode.offsetLeft, ev.clientY-testnode.offsetTop);</span><br><span class="line">                ctx.stroke();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.onmousemove=<span class="built_in">document</span>.onmouseup=<span class="literal">null</span>;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">testnode.releaseCapture</span>)</span>&#123;</span><br><span class="line">                    testnode.releaseCapture();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.restore();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><code>window.onload...</code> 加载窗体</li><li><code>var testnode =...</code> 拿到画布</li><li><code>if(testnode.getContext)&#123;... </code> 拿到笔</li><li><code>if(testnode.setCapture)&#123;... </code> 开启全局捕获(兼容IE)</li><li><code>testnode.onmousedown = function(ev)&#123;...</code> 鼠标点击动作 </li><li><code>ev = ev ||...</code> 兼容考虑, 如果浏览器给了ev 根据<code>||</code>的短路就是ev, 没给就赋值</li><li><code>ctx.moveTo(ev.cli...</code> 一旦点击就移动画笔</li><li><code>document.onmousemove=function(ev)...</code> 移动划线</li><li><code>document.onmouseup=function()&#123;</code> 结束</li><li><code>if(testnode.releaseCapture)&#123;</code> 取消全局捕获</li></ul><p>关于全局捕获: </p><p>当我们给一个元素设置全局捕获以后，那么这个元素就会监听后续发生的所有事件，当有事件发生的时候，就会触发当前设置了全局捕获的元素。其他事件就跳过不执行了</p><ul><li>IE: 有setCapture方法，并且有效果</li><li>火狐: 有setCapture方法，但是没效果</li><li>谷歌: 没有setCapture方法</li></ul><p>请注意, <strong>如果直接在<code>testnode.onmousedown</code>里面设置样式是不起效果的</strong>, 和py一样, 在运行的时候会忽略函数往下走, 直接走到<code>restore</code>就把数据清楚了, 所以我们要写到<code>...move</code>函数里面, 同样设置样式栈, 这样才可以修改笔画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.setCapture</span>)</span>&#123;</span><br><span class="line">            testnode.setCapture();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        testnode.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.beginPath()</span><br><span class="line">            ctx.moveTo(ev.clientX-testnode.offsetLeft, ev.clientY-testnode.offsetTop);</span><br><span class="line">            <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">                ev=ev||<span class="built_in">window</span>.event;</span><br><span class="line">                <span class="comment">// HERE</span></span><br><span class="line">                ctx.save();</span><br><span class="line">                ctx.strokeStyle=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">                ctx.lineTo(ev.clientX-testnode.offsetLeft, ev.clientY-testnode.offsetTop);</span><br><span class="line">                ctx.stroke();</span><br><span class="line">                ctx.restore();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.onmousemove=<span class="built_in">document</span>.onmouseup=<span class="literal">null</span>;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">testnode.releaseCapture</span>)</span>&#123;</span><br><span class="line">                    testnode.releaseCapture();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.restore();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>值得注意的是<code>...move</code>内部是不能写<code>beganPath</code>的, 这样会清除<code>moveTo</code>的样式</p><p>有了这个我们可以轻松改样式, 例如修改笔触粗细</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.setCapture</span>)</span>&#123;</span><br><span class="line">            testnode.setCapture();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        testnode.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.beginPath()</span><br><span class="line">            ctx.moveTo(ev.clientX-testnode.offsetLeft, ev.clientY-testnode.offsetTop);</span><br><span class="line">            <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">                ev=ev||<span class="built_in">window</span>.event;</span><br><span class="line">                <span class="comment">// HERE</span></span><br><span class="line">                ctx.save();</span><br><span class="line">                ctx.strokeStyle=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">                ctx.moveTo(ev.clientX-testnode.offsetLeft, ev.clientY-testnode.offsetTop);</span><br><span class="line">                ctx.lineTo(ev.clientX-testnode.offsetLeft+<span class="number">10</span>, ev.clientY-testnode.offsetTop+<span class="number">10</span>);</span><br><span class="line">                ctx.stroke();</span><br><span class="line">                ctx.restore();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.onmousemove=<span class="built_in">document</span>.onmouseup=<span class="literal">null</span>;</span><br><span class="line">                <span class="function"><span class="title">if</span>(<span class="params">testnode.releaseCapture</span>)</span>&#123;</span><br><span class="line">                    testnode.releaseCapture();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.restore();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="使用Canvas绘制曲线"><a href="#使用Canvas绘制曲线" class="headerlink" title="使用Canvas绘制曲线"></a>使用Canvas绘制曲线</h2><ol><li><code>.arc(Ox,Oy,r,deg_st,deg_ed)</code>, 参数分别是 原点的X坐标, 原点的y坐标, 圆的半径, 圆弧的起始角度, 圆弧的终止角度, 角度计算方法是: 0弧度在OX正方向, 然后顺时针增加, 单位为<strong>弧度</strong>, 转换角度可以用以下写法(270度为例) *<em>270</em>Math.PI/180**, 实例:(绘制一个3/4扇形)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        ctx.arc(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">270</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>.arcTo(x1,y1,x2,y2.r)</code> 是一种”奇怪”的方式, 他一共有<strong>三个</strong>定位点, <strong>第一个是当前画笔所在的位置</strong>, 第二三的是函数里面的<code>x1,y1,x2,y2</code>, 构造方法是连线第一二个点, 连线第二三个点, 之后我们构造一个半径为<code>r</code>的, 与两条<strong>线段</strong>相<strong>切</strong>的圆, 得到内部的圆弧,(或者想成圆压到那个角里), 可以构造一样辅助的角与这个圆弧方便理解</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 辅助角</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">300</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 圆弧</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.strokeStyle=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        ctx.arcTo(<span class="number">300</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>二次贝塞尔函数绘图 <code>.quadraticCurveTo(midx,midy,edx,edy)</code>, 首先有三个控制点: 第一个是当前位置, 中间点,结束点是里面写的两个, 例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 辅助边</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">0</span>,<span class="number">200</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">200</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">400</span>,<span class="number">200</span>)</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制曲线</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.strokeStyle=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">0</span>,<span class="number">200</span>);</span><br><span class="line">        ctx.quadraticCurveTo(<span class="number">200</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">200</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>三次贝塞尔函数绘图 <code>.bezierCurveTo(mid1x,mid1y,mid2x,mid2y,edx,edy)</code>, 首先有四个控制点: 第一个是当前位置, 中间点1, 中间点1, 结束点是里面写的三个, 例如</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 辅助直线</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">0</span>,<span class="number">400</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">200</span>,<span class="number">600</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制曲线</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.strokeStyle=<span class="string">&quot;blue&quot;</span>;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">0</span>,<span class="number">400</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">200</span>,<span class="number">600</span>,<span class="number">400</span>,<span class="number">400</span>,<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>全部代码, 跑起来效果可能好点:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        canvas&#123;</span><br><span class="line">            background-color: white;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.moveTo(50,50);</span><br><span class="line">        ctx.lineTo(100,50);</span><br><span class="line"><span class="javascript">        ctx.arc(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">270</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span></span><br><span class="line">        ctx.lineTo(50,50);</span><br><span class="line">        ctx.stroke();</span><br><span class="line"></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(100,100);</span><br><span class="line">        ctx.lineTo(300,0);</span><br><span class="line">        ctx.lineTo(200,200);</span><br><span class="line">        ctx.stroke();</span><br><span class="line"></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line"><span class="javascript">        ctx.strokeStyle=<span class="string">&quot;green&quot;</span>;</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(100,100);</span><br><span class="line">        ctx.arcTo(300,0,200,200,50);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line"></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(0,200);</span><br><span class="line">        ctx.lineTo(200,0);</span><br><span class="line">        ctx.lineTo(400,200)</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line"></span><br><span class="line">        ctx.save();</span><br><span class="line"><span class="javascript">        ctx.strokeStyle=<span class="string">&quot;red&quot;</span>;</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(0,200);</span><br><span class="line">        ctx.quadraticCurveTo(200,0,400,200);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line"></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(0,400);</span><br><span class="line">        ctx.lineTo(200,600);</span><br><span class="line">        ctx.lineTo(400,400);</span><br><span class="line">        ctx.lineTo(600,600);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line"></span><br><span class="line">        ctx.save();</span><br><span class="line"><span class="javascript">        ctx.strokeStyle=<span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(0,400);</span><br><span class="line">        ctx.bezierCurveTo(200,600,400,400,600,600);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Canvas的变换"><a href="#Canvas的变换" class="headerlink" title="Canvas的变换"></a>Canvas的变换</h2><p>CSS中已经有一套变换了, 可以直接使用吗? 不可以, 因为CSS选择器只能选中<code>Canvas画布</code>作为整体进行变化, 但是无法对元素进行操作, 所以还是需要Canvas自己的一套API对元素操作</p><ol><li><p><code>translate(x,y)</code>: 用来移动<code>Canvas</code><strong>原点</strong>位置的方法,分别是目标原点的x,y<strong>增量</strong>, 注意<code>translate(x,y)</code>的效果是叠加的,例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.translate(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">ctx.translate(<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.translate(<span class="number">100</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>是等价的.</p></li><li><p><code>rotate(angle)</code>: 以<strong>Canvas的原点</strong>为中心进行顺时针旋转, 单位为弧度, 所以经常搭配<code>translate(x,y)</code>使用, <strong>注意rotate的效果是叠加的</strong></p></li><li><p><code>scale(x,y)</code>: 以原点为中心分别向<code>ox</code>,<code>oy</code>方向放缩<code>x</code>,<code>y</code>倍, 注意scale的效果仍然是累加的. 值得注意的是<code>scale</code>的原理是放缩了css像素与实际像素的比例</p></li></ol><p>之后可以很容易的得到一个旋转放缩正方形, 如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            background-color: #bfa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        canvas&#123;</span><br><span class="line">            background-color: white;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: <span class="number">0</span>;</span><br><span class="line">            left: <span class="number">0</span>;</span><br><span class="line">            right: <span class="number">0</span>;</span><br><span class="line">            bottom: <span class="number">0</span>;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;canvas id=<span class="string">&quot;test&quot;</span> width=<span class="string">&quot;400&quot;</span> height=<span class="string">&quot;400&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> scstep = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> scval=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">var</span> rotval = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ctx.save();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,testnode.width,testnode.height);</span><br><span class="line">            ctx.translate(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">scval&gt;=<span class="number">100</span></span>)</span>&#123;</span><br><span class="line">                scstep=-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">scval&lt;=<span class="number">20</span></span>)</span>&#123;</span><br><span class="line">                scstep=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            scval += scstep;</span><br><span class="line">            rotval++;</span><br><span class="line">            ctx.scale(scval/<span class="number">100</span>,scval/<span class="number">100</span>);</span><br><span class="line">            ctx.rotate(rotval*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.fillRect(-<span class="number">100</span>,-<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">            ctx.restore();</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="number">1000</span>/<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="使用Canvas绘制表"><a href="#使用Canvas绘制表" class="headerlink" title="使用Canvas绘制表"></a>使用Canvas绘制表</h2><p>我们的思想: 由于<code>Canvas</code>的效率极高, 并且没有CSS中的动画效果, 所以我们的思路是构建关键帧, 也就是一秒种刷新一下整个<code>Canvas</code>画面, 对于三种表针, 我们使用叠加的思想绘制到一个关键帧上, 而叠加的重点在于绘制好每一个表针, 并且让他们的样式互相分离.</p><p>将表分成4块</p><ol><li>基本框架: 就是一个普通的canvas框架</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        canvas&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;clock&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>绘制表面</p><ul><li>获取画笔之后先压入canvas的默认样式, 设置我们的Canvas默认样式, 然后进入计时器函数</li><li>由于每秒钟都要刷新页面, 所以要在函数进入的时候加入清空页面的函数</li><li>设置表的默认样式</li><li>将表的坐标原点居中, 旋转坐标轴方便计算</li><li>画圆</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clock = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#clock&quot;</span>);</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">clock.getContext</span>)</span>&#123;</span><br><span class="line">        ctx = clock.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// defit</span></span><br><span class="line">    ctx.save();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1000</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// bgi</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.lineWidth=<span class="number">10</span>;</span><br><span class="line">        ctx.strokeStyle=<span class="string">&quot;blue&quot;</span>;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.translate(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        ctx.rotate(-<span class="number">90</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">        ctx.arc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">0</span>,<span class="number">360</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line"></span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>绘制表的刻度</p><ul><li>进去一个循环绘制每一个刻度</li><li>先设置刻度的默认样式</li><li>提前做好刻度画出来之后旋转的操作(后面写也可以)</li><li>分开判断刻度样式, 设置对应样式, 画线</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">60</span>;i++</span>)</span>&#123;</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.strokeStyle=<span class="string">&quot;black&quot;</span>;</span><br><span class="line">    ctx.lineWidth=<span class="number">3</span>;</span><br><span class="line">    ctx.rotate(i*<span class="number">6</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">i%<span class="number">5</span>==<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.lineWidth=<span class="number">5</span>;</span><br><span class="line">        ctx.strokeStyle=<span class="string">&quot;green&quot;</span>;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">110</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">140</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">120</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">140</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="4"><li><p>绘制表针</p><ul><li>选使用js获取时间, 然后分配给小时,分,秒, 最好除以前一项算出精确值</li><li>画针之前先把样式压栈</li><li>旋转对应角度</li><li>画线 </li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cur_date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> s = cur_date.getSeconds();</span><br><span class="line"><span class="keyword">var</span> m = cur_date.getMinutes()+s/<span class="number">60</span>;</span><br><span class="line"><span class="keyword">var</span> h = cur_date.getHours()%<span class="number">12</span>+m/<span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span>(h&gt;<span class="number">12</span>)h=h-<span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">ctx.save();</span><br><span class="line">ctx.strokeStyle=<span class="string">&quot;black&quot;</span>;</span><br><span class="line">ctx.rotate(h/<span class="number">12</span>*<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(-<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">60</span>,<span class="number">0</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.restore();</span><br><span class="line"></span><br><span class="line">ctx.save();</span><br><span class="line">ctx.strokeStyle=<span class="string">&quot;black&quot;</span>;</span><br><span class="line">ctx.rotate(m/<span class="number">60</span>*<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.lineWidth=<span class="number">7</span>;</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(-<span class="number">15</span>,<span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">85</span>,<span class="number">0</span>);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.restore();</span><br><span class="line"></span><br><span class="line">ctx.save();</span><br><span class="line">ctx.strokeStyle=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.rotate(s/<span class="number">60</span>*<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.lineWidth=<span class="number">5</span>;</span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(-<span class="number">20</span>,<span class="number">0</span>);</span><br><span class="line">ctx.lineTo(<span class="number">105</span>,<span class="number">0</span>);</span><br><span class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">ctx.arc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI)</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.restore();</span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        canvas&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;clock&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> clock = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#clock&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">if</span>(<span class="params">clock.getContext</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            ctx = clock.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// defit</span></span></span><br><span class="line">        ctx.save();</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            ctx.clearRect(0,0,1000,1000);</span><br><span class="line"><span class="javascript">            <span class="comment">// bgi</span></span></span><br><span class="line">            ctx.save();</span><br><span class="line">            ctx.lineWidth=10;</span><br><span class="line"><span class="javascript">            ctx.strokeStyle=<span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.translate(200,200);</span><br><span class="line"><span class="javascript">            ctx.rotate(-<span class="number">90</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span></span><br><span class="line"><span class="javascript">            ctx.arc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">0</span>,<span class="number">360</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span></span><br><span class="line">            ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">60</span>;i++</span>)</span>&#123;</span></span><br><span class="line">                ctx.save();</span><br><span class="line"><span class="javascript">                ctx.strokeStyle=<span class="string">&quot;black&quot;</span>;</span></span><br><span class="line">                ctx.lineWidth=3;</span><br><span class="line"><span class="javascript">                ctx.rotate(i*<span class="number">6</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</span></span><br><span class="line">                ctx.beginPath();</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">if</span>(<span class="params">i%<span class="number">5</span>==<span class="number">0</span></span>)</span>&#123;</span></span><br><span class="line">                    ctx.save();</span><br><span class="line">                    ctx.lineWidth=5;</span><br><span class="line"><span class="javascript">                    ctx.strokeStyle=<span class="string">&quot;green&quot;</span>;</span></span><br><span class="line">                    ctx.beginPath();</span><br><span class="line">                    ctx.moveTo(110,0);</span><br><span class="line">                    ctx.lineTo(140,0);</span><br><span class="line">                    ctx.stroke();</span><br><span class="line">                    ctx.restore();</span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">                    ctx.save();</span><br><span class="line">                    ctx.beginPath();</span><br><span class="line">                    ctx.moveTo(120,0);</span><br><span class="line">                    ctx.lineTo(140,0);</span><br><span class="line">                    ctx.stroke();</span><br><span class="line">                    ctx.restore();</span><br><span class="line">                &#125;</span><br><span class="line">                ctx.restore();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cur_date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s = cur_date.getSeconds();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> m = cur_date.getMinutes()+s/<span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> h = cur_date.getHours()%<span class="number">12</span>+m/<span class="number">60</span>;</span></span><br><span class="line">            if(h&gt;12)h=h-12;</span><br><span class="line"></span><br><span class="line">            ctx.save();</span><br><span class="line"><span class="javascript">            ctx.strokeStyle=<span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.rotate(h/<span class="number">12</span>*<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.moveTo(-10,0);</span><br><span class="line">            ctx.lineTo(60,0);</span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.restore();</span><br><span class="line"></span><br><span class="line">            ctx.save();</span><br><span class="line"><span class="javascript">            ctx.strokeStyle=<span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.rotate(m/<span class="number">60</span>*<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span></span><br><span class="line">            ctx.lineWidth=7;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.moveTo(-15,0);</span><br><span class="line">            ctx.lineTo(85,0);</span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.restore();</span><br><span class="line"></span><br><span class="line">            ctx.save();</span><br><span class="line"><span class="javascript">            ctx.strokeStyle=<span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.rotate(s/<span class="number">60</span>*<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span></span><br><span class="line">            ctx.lineWidth=5;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.moveTo(-20,0);</span><br><span class="line">            ctx.lineTo(105,0);</span><br><span class="line">            ctx.moveTo(0,0);</span><br><span class="line"><span class="javascript">            ctx.arc(<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI)</span></span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.restore();</span><br><span class="line"></span><br><span class="line">            ctx.restore();</span><br><span class="line">        &#125;,1000);</span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用图片"><a href="#使用图片" class="headerlink" title="使用图片"></a>使用图片</h2><ol><li><code>Canvas</code>操作图像的时候需要图片加载全部完成之后才能才可以操作</li><li>方法: <code>drawImage(img,x,y,width,height)</code> 参数应该分别是Canvas或图片对象, 起始点X, 起始点Y, 插入图像的宽度和高度</li></ol><p>使用实例</p><ul><li>首先给了一个Image对象, 然后指定路径拿到图片</li><li>进入背景调用的函数, 选择绘制图像, 给出图像与大小</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.src=<span class="string">&quot;blue.png&quot;</span>;</span><br><span class="line">        img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>,img.width,img.height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="使用图片作为背景"><a href="#使用图片作为背景" class="headerlink" title="使用图片作为背景"></a>使用图片作为背景</h2><p>思想是绘制一个足够大的矩形作为背景, 其中最重要的就是将原来的图片对象转化为背景样式的对象, 方法是, <code>ctx.createPattern(img,&quot;repeat&quot;)</code>, 后一个选项是重复方式, 有:</p><ul><li><code>repeat</code>(平铺)</li><li><code>repeat-x</code>(x平铺)</li><li><code>repeat-y</code>(y平铺)</li><li><code>no-repeat</code></li></ul><p>使用实例: </p><ul><li>同样的取得图片</li><li>转化为背景图片类(使用<code>.createPattern</code>)</li><li>填充到矩形</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testnode = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">testnode.getContext</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ctx = testnode.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.src=<span class="string">&quot;blue.png&quot;</span>;</span><br><span class="line">        img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pattern = ctx.createPattern(img,<span class="string">&quot;repeat&quot;</span>);</span><br><span class="line">            ctx.fillStyle = pattern;</span><br><span class="line">            ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="使用渐变"><a href="#使用渐变" class="headerlink" title="使用渐变"></a>使用渐变</h2><p>从CSS中类比我们可以知道渐变起始是一种背景图片</p><p>所以实现上就是将原来的pattern换成渐变, 线性渐变是<code>createLinearGradient(x1,y1,x2,y2)</code>指的是渐变开始与结束的左上角与右下角, 放射性渐变是<code>createRadialGradient(x1,y1,r1,z2,y2,r2)</code>分别是渐变开始的圆的圆心, 半径, 渐变结束的圆心与半径</p><p>但是一张只是指定了放射的<code>画布</code>, 还要指定渐变的颜色,需要使用<code>addColorStop(k,color)</code>, 指的是在渐变开始的那一段设置什么颜色, 例如 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gradient = ctx.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">    gradient.addColorStop(<span class="number">0</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    gradient.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">    gradient.addColorStop(<span class="number">1</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    ctx.fillStyle=gradient;</span><br><span class="line">    ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gradient = ctx.createRadialGradient(<span class="number">200</span>,<span class="number">200</span>,<span class="number">20</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">150</span>);</span><br><span class="line">    gradient.addColorStop(<span class="number">0</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    gradient.addColorStop(<span class="number">0.5</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">    gradient.addColorStop(<span class="number">1</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    ctx.fillStyle=gradient;</span><br><span class="line">    ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><p><code>Canvas</code> 提供了两种绘制文本的方法:</p><ul><li><code>fillText(text,x,y)</code> 在指定位置填充文本内容</li><li><code>strokeText(text,x,y)</code> 在指定位置绘制文本边框</li></ul><p><code>Canvas</code> 提供了修改文字样式的方法</p><ul><li><code>font=&quot;20px sans-serif&quot;</code> 是设置字体的方法,因为Canvas只支持非称线字体,所以后一个属性可以随便写,但是都是默认<code>sans-serif</code>, 但是还不能少, 前面是设置字号的</li><li><code>ctx.textAlign=&quot;left/right/center&quot;</code> 首先描点到文字预设的<code>x,y</code>,默认将此点作为文字输出的左下角,可以设置这个角为文字的中间下角,或者右下角</li><li><code>ctx.textBaseline = &quot;top/middle/buttom&quot;</code> 同<code>textAlign</code> 不过这个是垂直方向的</li></ul><h2 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h2><ul><li><p><code>getImageData(x,y,w,h)</code>可以将指定区域的像素的颜色RGBA值写入数组, 参数分别为左上角坐标 宽度 高度</p></li><li><p>值得注意的是这里的<code>A</code>lpha 最大为255而不是CSS中的1.</p></li><li><p><code>putImageData(imgdata,x,y)</code>可以将元素放到xy处</p></li><li><p><code>createImageData(width,height)</code>创建一个长宽的元素默认rgba(0,0,0,0)</p></li></ul><h2 id="制作马赛克"><a href="#制作马赛克" class="headerlink" title="制作马赛克"></a>制作马赛克</h2><ul><li><code>getPxInfo(img,x,y)</code>获取Image的(x,y)的颜色信息</li></ul><p>不用这个的代码, 原理是算均值(加了个动画)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        canvas&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        oc=<span class="built_in">document</span>.querySelector(<span class="string">&quot;#test&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">if</span>(<span class="params">oc.getContext</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ctx=oc.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img1=<span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">            img1.src=<span class="string">&quot;./blue.jpeg&quot;</span>;</span></span><br><span class="line"><span class="javascript">            img1.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> msksize=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                    msksize+=4;</span><br><span class="line">                    oc.width=img1.width*2;</span><br><span class="line">                    oc.height=img1.height</span><br><span class="line">                    ctx.drawImage(img1,0,0);</span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> img2=ctx.createImageData(img1.width,img1.height);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> img3=ctx.getImageData(<span class="number">0</span>,<span class="number">0</span>,img1.width,img1.height);</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;img1.height;i+=msksize</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j=<span class="number">0</span>;j&lt;img1.height;j+=msksize</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> r=<span class="number">0</span>,g=<span class="number">0</span>,b=<span class="number">0</span>,oi,oj;</span></span><br><span class="line">                            for(oi=0;(oi&lt;msksize)&amp;&amp;(oi+i&lt;img1.height);oi++)&#123;</span><br><span class="line">                                for(oj=0;(oj&lt;msksize)&amp;&amp;(j+oj&lt;img1.width);oj++)&#123;</span><br><span class="line">                                    r+=img3.data[((i+oi)*img1.width+(j+oj))*4];</span><br><span class="line">                                    g+=img3.data[((i+oi)*img1.width+(j+oj))*4+1];</span><br><span class="line">                                    b+=img3.data[((i+oi)*img1.width+(j+oj))*4+2];</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            r/=oi*oj;</span><br><span class="line">                            g/=oi*oj;</span><br><span class="line">                            b/=oi*oj;</span><br><span class="line"><span class="javascript">                            <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> pi=<span class="number">0</span>;pi&lt;oi;pi++</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                                <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> pj=<span class="number">0</span>;pj&lt;oj;pj++</span>)</span>&#123;</span></span><br><span class="line">                                    img2.data[((i+pi)*img1.width+(j+pj))*4]=r;</span><br><span class="line">                                    img2.data[((i+pi)*img1.width+(j+pj))*4+1]=g;</span><br><span class="line">                                    img2.data[((i+pi)*img1.width+(j+pj))*4+2]=b;</span><br><span class="line">                                    img2.data[((i+pi)*img1.width+(j+pj))*4+3]=255;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    img2.height=img1.height;</span><br><span class="line">                    img2.width=img1.width;</span><br><span class="line">                    ctx.putImageData(img2,img1.width,0);</span><br><span class="line">                &#125;,10);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局透明度的设置"><a href="#全局透明度的设置" class="headerlink" title="全局透明度的设置"></a>全局透明度的设置</h2><ul><li><code>globalAlpha = value</code> 对这个命令之后的元素设置透明度</li></ul><h2 id="覆盖合成"><a href="#覆盖合成" class="headerlink" title="覆盖合成"></a>覆盖合成</h2><ul><li>source:新的图像(源)</li><li>destination:已经绘制过的图形(目标)<ul><li>globalCompositeOperation<ul><li>source-over(默认值):源在上面,新的图像层级比较高</li><li>source-in  :只留下源与目标的重叠部分(源的那一部分)</li><li>source-out :只留下源超过目标的部分</li><li>source-atop:砍掉源溢出的部分</li><li></li><li>destination-over:目标在上面,旧的图像层级比较高</li><li>destination-in:只留下源与目标的重叠部分(目标的那一部分)</li><li>destination-out:只留下目标超过源的部分</li><li>destination-atop:砍掉目标溢出的部分</li></ul></li></ul></li></ul><h2 id="将画布导出为图像"><a href="#将画布导出为图像" class="headerlink" title="将画布导出为图像"></a>将画布导出为图像</h2><ul><li>toDataURL(注意是canvas元素接口上的方法),只导出画布</li></ul><h2 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h2><ul><li>ctx.isPointInPath(x, y)判断在当前最新beginPath之后的路径中是否包含检测点<pre><code> - x:检测点的X坐标 - y:检测点的Y坐标</code></pre> <strong>注意，此方法只作用于最新画出的canvas图像</strong></li></ul>]]></content>
    
    
    <summary type="html">讲了HTML中的Canvas，这个虽然建议在HTML&amp;CSS学完马上学，但是用了JS的很多内容，还是JS基础学完在看吧。</summary>
    
    
    
    <category term="前端" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/HTML/"/>
    
    <category term="Canvas" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/HTML/Canvas/"/>
    
    
    <category term="前端" scheme="http://liukairui.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="http://liukairui.cc/tags/HTML/"/>
    
    <category term="笔记" scheme="http://liukairui.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Canvas" scheme="http://liukairui.cc/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>尚硅谷 BootStrap 笔记</title>
    <link href="http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7BootStrap%E7%AC%94%E8%AE%B0/"/>
    <id>http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7BootStrap%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-30T16:00:20.000Z</published>
    <updated>2020-11-15T18:52:04.873Z</updated>
    
    <content type="html"><![CDATA[<p>BootStrapt是一套UI库，学习的时候应该注意重点在实践而不是理解原理，学习的时候需要常常访问其<a href="https://v3.bootcss.com/">官网参考文档</a></p><h2 id="BootStrap的引入"><a href="#BootStrap的引入" class="headerlink" title="BootStrap的引入"></a>BootStrap的引入</h2><p>BootStrapt是使用Less/Sass写的UI库，可以在官网下载的到其调用库，Less源码，Sass源码，其中压缩包带Dist的是编译后文件，无源码，编译后的文件结构较为简单</p><ul><li>CSS文件夹： 放置样式文件</li><li>fonts文件及：图标字体库</li><li>js文件夹：里面有BootStrap的JS文件，那个npm.js为编译时使用的没用</li></ul><p>使用的时候在HTML代码中引入BootStrap文件，包括</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../bootstrap/js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于Bootstrap的所有组件都依赖于jQuary所以还需要去jQuary下载一份jQuary的JS文件,顺便就放JS文件夹了。还需要注意的是因为是BootStrap依赖于jQuary所以应该是jQuray在前，BootStrap在后，Js永远在<code>\body</code>后<code>/html</code>前</p><p>引入之后我们发现：虽然我们什么都没有写，但是已经有了很多样式了，这些是BootStrap的<strong>自带Normalize.css</strong>,其中值得注意的是所有的元素<code>box-sizing:border-box</code></p><h2 id="流体容器"><a href="#流体容器" class="headerlink" title="流体容器"></a>流体容器</h2><p>在<code>body</code>中写下如下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    test</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们会看到<code>.container-fluid</code>在审查元素中存在如下样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container-fluid</span> &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左右内边距<code>15px</code>,左右外边距<code>auto</code>，相当于是做了一个居中<br>为<code>.container-fluid</code>加入背景色，修改视口的大小，我们会发现div的大小会随之变化，盒子宽度可以认为是100%</p><h2 id="固定容器"><a href="#固定容器" class="headerlink" title="固定容器"></a>固定容器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    test</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类名就是流体容器去掉<code>-fluid</code><br>可以看到，在全屏下(1080p)盒子并没有撑满整个页面，审查元素看到了很长的媒体查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1200px</span>)</span><br><span class="line">.container &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 1170<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">992px</span>)</span><br><span class="line">.container &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 970<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>)</span><br><span class="line">.container &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 750<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面看到三个阈值</p><table><thead><tr><th>意义</th><th>代号</th><th>屏幕宽度</th><th>div宽度</th></tr></thead><tbody><tr><td>大屏PC</td><td>lg</td><td>&gt;=1200</td><td>1170</td></tr><tr><td>中屏PC</td><td>md</td><td>&gt;=992 &lt;1200</td><td>970</td></tr><tr><td>平板</td><td>sm</td><td>&gt;=768 &lt;992</td><td>750</td></tr><tr><td>移动手机</td><td>xs</td><td>&lt;768</td><td>auto</td></tr><tr><td><strong>注意</strong>：width的默认值为auto而不是100%，区别是，<code>width:100%</code>时候padding是向外扩，auto是时候是向内扣</td><td></td><td></td><td></td></tr></tbody></table><h2 id="珊格布局（珊格系统）"><a href="#珊格布局（珊格系统）" class="headerlink" title="珊格布局（珊格系统）"></a>珊格布局（珊格系统）</h2><p>在使用珊格系统的时候我们一般使用固定容器作为他的父元素，使用<code>.row</code>类定义一个行，使用<code>col-XX-YY</code>定义一个列，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-10&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别着色之后我们可以看到两个div占据了一个固定容器</p><p><strong>BootStrap默认分一行为12列，列名上的YY就是占据多少列</strong></p><p>但是如果我们将视口宽度调整小一点效果消失了，具体见读源码部分</p><h2 id="BootStrap-读源码"><a href="#BootStrap-读源码" class="headerlink" title="BootStrap 读源码"></a>BootStrap 读源码</h2><p>源码是Less文件，所以在less文件夹里面，再看到里面有一个mixin文件夹放所有的混合，外面的文件可以视为一些入口 </p><p>我们需要的文件有 </p><ul><li>less/mixin/<code>clearfix.less</code>,<code>grid-framework.less</code>,<code>gird.less</code></li><li>less/<code>gird.less</code> 珊格系统的总入口</li><li>less/<code>variables.less</code> 定义了所有需要的变量</li></ul><p>我们只看less/<code>gird.less</code>需要引入的时候从别的地方摘</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="selector-class">.container-fixed</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-sm-min</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@container-sm</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-md-min</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@container-md</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-lg-min</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@container-lg</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-fluid</span> &#123;</span><br><span class="line">  <span class="selector-class">.container-fixed</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="selector-class">.make-row</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.make-grid-columns</span>();</span><br><span class="line"><span class="selector-class">.make-grid</span>(xs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-sm-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(sm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-md-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(md);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-lg-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(lg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先比较困惑的是最后几行，也没有写属于那个类，直接就是个引用和媒体查询(感觉是会作为一个包被其他文件引用)</p><p><strong>第一部分 固定容器</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;                                <span class="comment">// 固定容器</span></span><br><span class="line">  <span class="selector-class">.container-fixed</span>();                       <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-sm-min</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@container-sm</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-md-min</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@container-md</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-lg-min</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@container-lg</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个固定容器的<strong>类</strong>，先调用了一个混合，混合去mixin里面找<code>gird.less</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 固定容器和流体容器的公共样式</span></span><br><span class="line"><span class="selector-class">.container-fixed</span>(<span class="variable">@gutter</span>: <span class="variable">@grid-gutter-width</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">padding-left</span>:  floor((<span class="variable">@gutter</span> / <span class="number">2</span>));</span><br><span class="line">  <span class="attribute">padding-right</span>: ceil((<span class="variable">@gutter</span> / <span class="number">2</span>));</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.clearfix</span> <span class="keyword">all</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到有个参数<code>@gutter</code>，同时他还有一个默认参数<code>@grid-gutter-width</code>,对于不知道的变量要去<code>\less\variables.less</code>找，得到<code>@grid-gutter-width:30px</code></p><p>这个变量我们称之为<strong>槽宽</strong>，其实就是固定容器默认的内边距</p><p>在混合中，我们将设置左右内边距为槽宽的一半向上向下取整，设置左右margin为auto相当于居中，最后混合继承了一个<code>.cldearfix()</code>的所有属性</p><p>在固定容器的样式中，之后是三个媒体查询，我们要看一下<code>@screen-XX-min</code>的值，具体要去<code>\less\variables.less</code>，可以看到如下代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@screen-xs:</span>                  <span class="number">480px</span>;</span><br><span class="line"><span class="variable">@screen-xs-min:</span>              <span class="variable">@screen-xs</span>;</span><br><span class="line"><span class="variable">@screen-sm:</span>                  <span class="number">768px</span>;</span><br><span class="line"><span class="variable">@screen-sm-min:</span>              <span class="variable">@screen-sm</span>;</span><br><span class="line"><span class="variable">@screen-md:</span>                  <span class="number">992px</span>;</span><br><span class="line"><span class="variable">@screen-md-min:</span>              <span class="variable">@screen-md</span>;</span><br><span class="line"><span class="variable">@screen-lg:</span>                  <span class="number">1200px</span>;</span><br><span class="line"><span class="variable">@screen-lg-min:</span>              <span class="variable">@screen-lg</span>;</span><br></pre></td></tr></table></figure><p>我们可以看到<code>xs/sm/md/lg</code>分别为<code>480px,768px,992px,1200px</code><br>继续去找<code>container-xx</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@container-tablet:</span>             (<span class="number">720px</span> + <span class="variable">@grid-gutter-width</span>);</span><br><span class="line"><span class="variable">@container-sm:</span>                 <span class="variable">@container-tablet</span>;</span><br><span class="line"><span class="variable">@container-desktop:</span>            (<span class="number">940px</span> + <span class="variable">@grid-gutter-width</span>);</span><br><span class="line"><span class="variable">@container-md:</span>                 <span class="variable">@container-desktop</span>;</span><br><span class="line"><span class="variable">@container-large-desktop:</span>      (<span class="number">1140px</span> + <span class="variable">@grid-gutter-width</span>);</span><br><span class="line"><span class="variable">@container-lg:</span>                 <span class="variable">@container-large-desktop</span>;</span><br></pre></td></tr></table></figure><p>三者就是三个屏的固定容器宽度+槽宽</p><p>根据移动优先的原则我们把默认给了xs(是auto所以没写)</p><p>注意这边的顺序，先小后大，这样巨大平会依次被拦，但是后生效者优先</p><p><strong>第二部分 流体容器</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container-fluid</span> &#123;</span><br><span class="line">  <span class="selector-class">.container-fixed</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是固定容器的公共样式</p><p><strong>第三部分 行</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="selector-class">.make-row</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是个混合，当然是从mixin\ <code>gird.less</code>里面找</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.make-row</span>(<span class="variable">@gutter</span>: <span class="variable">@grid-gutter-width</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:  ceil((<span class="variable">@gutter</span> / -<span class="number">2</span>));</span><br><span class="line">  <span class="attribute">margin-right</span>: floor((<span class="variable">@gutter</span> / -<span class="number">2</span>));</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.clearfix</span> <span class="keyword">all</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左右加了个外边距为<strong>负的</strong>半个槽宽，</p><p><strong>第四部分 列</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.make-grid-columns</span>();</span><br><span class="line"><span class="selector-class">.make-grid</span>(xs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-sm-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(sm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-md-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(md);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-lg-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(lg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先调用了一个混合<code>make-grid-columns()</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.make-grid-columns</span>() &#123;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>) &#123;</span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~&quot;.col-xs-@&#123;index&#125;, .col-sm-@&#123;index&#125;, .col-md-@&#123;index&#125;, .col-lg-@&#123;index&#125;&quot;</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="variable">@item</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> =&lt; <span class="variable">@grid-columns</span>) &#123; </span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~&quot;.col-xs-@&#123;index&#125;, .col-sm-@&#123;index&#125;, .col-md-@&#123;index&#125;, .col-lg-@&#123;index&#125;&quot;</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="string">~&quot;@&#123;list&#125;, @&#123;item&#125;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="variable">@grid-columns</span>) &#123;</span><br><span class="line">    <span class="variable">@&#123;list&#125;</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">min-height</span>: <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">padding-left</span>:  ceil((<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>));</span><br><span class="line">      <span class="attribute">padding-right</span>: floor((<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个混合，先进去，看到是三个混合，先不管，直接看到唯一一个可以运行的<code>.col(1)</code>，一个变量，进入第一个混合</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col</span>(<span class="variable">@index</span>) &#123;</span><br><span class="line">  <span class="variable">@item:</span> <span class="string">~&quot;.col-xs-@&#123;index&#125;, .col-sm-@&#123;index&#125;, .col-md-@&#123;index&#125;, .col-lg-@&#123;index&#125;&quot;</span>;</span><br><span class="line">  <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="variable">@item</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试跑一下，进入直接就是一个避免编译，然后去调用了一个二元的<code>.col</code>,第一句item得到的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.col-xs-1,.col-sm-1,.col-md-1,.col-lg-1</span><br></pre></td></tr></table></figure><p>然后看第二句，成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.col(2,.col-xs-1,.col-sm-1,.col-md-1,.col-lg-1);</span><br></pre></td></tr></table></figure><p>第一个混合结束了，因为是<strong>避免编译</strong>所以我们的item是一个变量以字符串的形式传递出去，两个变量，进入第二个混合</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> =&lt; <span class="variable">@grid-columns</span>) &#123; </span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~&quot;.col-xs-@&#123;index&#125;, .col-sm-@&#123;index&#125;, .col-md-@&#123;index&#125;, .col-lg-@&#123;index&#125;&quot;</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="string">~&quot;@&#123;list&#125;, @&#123;item&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询到<code>@grid-columns:12;</code>实际上就是默认12列</p><p>index=2,进入之后我们又得到一个item</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.col-xs-2,.col-sm-2,.col-md-2,.col-lg-2</span><br></pre></td></tr></table></figure><p>这里发生了一个递归，index=3的时候第二句话变成了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col</span>(<span class="number">3</span>,.col-xs-<span class="number">1</span>,.col-sm-<span class="number">1</span>,.col-md-<span class="number">1</span>,.col-lg-<span class="number">1</span>,.col-xs-<span class="number">2</span>,.col-sm-<span class="number">2</span>,.col-md-<span class="number">2</span>,.col-lg-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>由于是避免编译，所以后面仍然是一个变量，我们可以看到index是会比后面的<code>col-xx-y</code>的<code>y</code>大1</p><p>我们找到这个递归的边界<code>index=12</code>,也就是<code>index=13</code>的时候不会进入下一次递归，这时候的调用命令应该是</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col</span>(<span class="number">13</span>,</span><br><span class="line">.col-xs-<span class="number">1</span>,.col-sm-<span class="number">1</span>,.col-md-<span class="number">1</span>,.col-lg-<span class="number">1</span>,</span><br><span class="line">.col-xs-<span class="number">2</span>,.col-sm-<span class="number">2</span>,.col-md-<span class="number">2</span>,.col-lg-<span class="number">2</span>,</span><br><span class="line">.col-xs-<span class="number">3</span>,.col-sm-<span class="number">3</span>,.col-md-<span class="number">3</span>,.col-lg-<span class="number">3</span>,</span><br><span class="line">.col-xs-<span class="number">4</span>,.col-sm-<span class="number">4</span>,.col-md-<span class="number">4</span>,.col-lg-<span class="number">4</span>,</span><br><span class="line">.col-xs-<span class="number">5</span>,.col-sm-<span class="number">5</span>,.col-md-<span class="number">5</span>,.col-lg-<span class="number">5</span>,</span><br><span class="line">.col-xs-<span class="number">6</span>,.col-sm-<span class="number">6</span>,.col-md-<span class="number">6</span>,.col-lg-<span class="number">6</span>,</span><br><span class="line">.col-xs-<span class="number">7</span>,.col-sm-<span class="number">7</span>,.col-md-<span class="number">7</span>,.col-lg-<span class="number">7</span>,</span><br><span class="line">.col-xs-<span class="number">8</span>,.col-sm-<span class="number">8</span>,.col-md-<span class="number">8</span>,.col-lg-<span class="number">8</span>,</span><br><span class="line">.col-xs-<span class="number">9</span>,.col-sm-<span class="number">9</span>,.col-md-<span class="number">9</span>,.col-lg-<span class="number">9</span>,</span><br><span class="line">.col-xs-<span class="number">10</span>,.col-sm-<span class="number">10</span>,.col-md-<span class="number">10</span>,.col-lg-<span class="number">10</span>,</span><br><span class="line">.col-xs-<span class="number">11</span>,.col-sm-<span class="number">11</span>,.col-md-<span class="number">11</span>,.col-lg-<span class="number">11</span>,</span><br><span class="line">.col-xs-<span class="number">12</span>,.col-sm-<span class="number">12</span>,.col-md-<span class="number">12</span>,.col-lg-<span class="number">12</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>值得注意的是后面之一个整体字符串，因为避免编译了<code>13&gt;12</code>所以进入第三个混合</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="variable">@grid-columns</span>) &#123;</span><br><span class="line">    <span class="variable">@&#123;list&#125;</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">min-height</span>: <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">padding-left</span>:  ceil((<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>));</span><br><span class="line">      <span class="attribute">padding-right</span>: floor((<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里要用变量作为选择器所以要写<code>@&#123;&#125;</code>,这里相当于写了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col-xs-1</span>,<span class="selector-class">.col-sm-1</span>,<span class="selector-class">.col-md-1</span>,<span class="selector-class">.col-lg-1</span>,</span><br><span class="line"><span class="selector-class">.col-xs-2</span>,<span class="selector-class">.col-sm-2</span>,<span class="selector-class">.col-md-2</span>,<span class="selector-class">.col-lg-2</span>,</span><br><span class="line"><span class="selector-class">.col-xs-3</span>,<span class="selector-class">.col-sm-3</span>,<span class="selector-class">.col-md-3</span>,<span class="selector-class">.col-lg-3</span>,</span><br><span class="line"><span class="selector-class">.col-xs-4</span>,<span class="selector-class">.col-sm-4</span>,<span class="selector-class">.col-md-4</span>,<span class="selector-class">.col-lg-4</span>,</span><br><span class="line"><span class="selector-class">.col-xs-5</span>,<span class="selector-class">.col-sm-5</span>,<span class="selector-class">.col-md-5</span>,<span class="selector-class">.col-lg-5</span>,</span><br><span class="line"><span class="selector-class">.col-xs-6</span>,<span class="selector-class">.col-sm-6</span>,<span class="selector-class">.col-md-6</span>,<span class="selector-class">.col-lg-6</span>,</span><br><span class="line"><span class="selector-class">.col-xs-7</span>,<span class="selector-class">.col-sm-7</span>,<span class="selector-class">.col-md-7</span>,<span class="selector-class">.col-lg-7</span>,</span><br><span class="line"><span class="selector-class">.col-xs-8</span>,<span class="selector-class">.col-sm-8</span>,<span class="selector-class">.col-md-8</span>,<span class="selector-class">.col-lg-8</span>,</span><br><span class="line"><span class="selector-class">.col-xs-9</span>,<span class="selector-class">.col-sm-9</span>,<span class="selector-class">.col-md-9</span>,<span class="selector-class">.col-lg-9</span>,</span><br><span class="line"><span class="selector-class">.col-xs-10</span>,<span class="selector-class">.col-sm-10</span>,<span class="selector-class">.col-md-10</span>,<span class="selector-class">.col-lg-10</span>,</span><br><span class="line"><span class="selector-class">.col-xs-11</span>,<span class="selector-class">.col-sm-11</span>,<span class="selector-class">.col-md-11</span>,<span class="selector-class">.col-lg-11</span>,</span><br><span class="line"><span class="selector-class">.col-xs-12</span>,<span class="selector-class">.col-sm-12</span>,<span class="selector-class">.col-md-12</span>,<span class="selector-class">.col-lg-12</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>:  ceil((<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>));</span><br><span class="line">    <span class="attribute">padding-right</span>: floor((<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对位置(BFC)，最小高度，设置左右槽宽</p><p>这样设计的原因是：less没有循环，所以用递归的形式构造了一个大的字符串作为选择器，第一部分是递归开始，中间是递归构造部分，最后递归边界设定样式，这种构造选择器的方法值得注意！</p><p>然后就是三个媒体查询</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.make-grid</span>(xs);         <span class="comment">// 手机屏，下面都拦不住，先设置为默认移动端，移动端优先</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-sm-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(sm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-md-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(md);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-lg-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(lg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后他们都是调用了一个混合</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.make-grid</span>(<span class="variable">@class</span>) &#123;</span><br><span class="line">  <span class="selector-class">.float-grid-columns</span>(<span class="variable">@class</span>);</span><br><span class="line">  <span class="selector-class">.loop-grid-columns</span>(<span class="variable">@grid-columns</span>, <span class="variable">@class</span>, width);</span><br><span class="line">  <span class="selector-class">.loop-grid-columns</span>(<span class="variable">@grid-columns</span>, <span class="variable">@class</span>, pull);</span><br><span class="line">  <span class="selector-class">.loop-grid-columns</span>(<span class="variable">@grid-columns</span>, <span class="variable">@class</span>, push);</span><br><span class="line">  <span class="selector-class">.loop-grid-columns</span>(<span class="variable">@grid-columns</span>, <span class="variable">@class</span>, offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他又调用了两个混合</p><p>第一个</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float-grid-columns</span>(<span class="variable">@class</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>) &#123;</span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~&quot;.col-@&#123;class&#125;-@&#123;index&#125;&quot;</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="variable">@item</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> =&lt; <span class="variable">@grid-columns</span>) &#123;</span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~&quot;.col-@&#123;class&#125;-@&#123;index&#125;&quot;</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="string">~&quot;@&#123;list&#125;, @&#123;item&#125;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="variable">@grid-columns</span>) &#123;</span><br><span class="line">    <span class="variable">@&#123;list&#125;</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前那个<code>.make-grid-columns()</code>一样，只不过这次指定了类型，最后相当于设置了一个左浮动</p><p>第二个，默认<code>@grid-columns：12</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loop-grid-columns</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.calc-grid-column</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>);</span><br><span class="line">  <span class="selector-class">.loop-grid-columns</span>((<span class="variable">@index</span> - <span class="number">1</span>), <span class="variable">@class</span>, <span class="variable">@type</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于给<strong>0</strong>-12(注意不是<strong>1</strong>-12)设置<code>.calc-grid-column(@index, @class, @type)</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.calc-grid-column</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>) <span class="keyword">when</span> (<span class="variable">@type</span> = width) <span class="keyword">and</span> (<span class="variable">@index</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col-</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.calc-grid-column</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>) <span class="keyword">when</span> (<span class="variable">@type</span> = push) <span class="keyword">and</span> (<span class="variable">@index</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col-</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-push-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.calc-grid-column</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>) <span class="keyword">when</span> (<span class="variable">@type</span> = push) <span class="keyword">and</span> (<span class="variable">@index</span> = <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col-</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-push-0</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.calc-grid-column</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>) <span class="keyword">when</span> (<span class="variable">@type</span> = pull) <span class="keyword">and</span> (<span class="variable">@index</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col-</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-pull-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.calc-grid-column</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>) <span class="keyword">when</span> (<span class="variable">@type</span> = pull) <span class="keyword">and</span> (<span class="variable">@index</span> = <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col-</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-pull-0</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.calc-grid-column</span>(<span class="variable">@index</span>, <span class="variable">@class</span>, <span class="variable">@type</span>) <span class="keyword">when</span> (<span class="variable">@type</span> = offset) &#123;</span><br><span class="line">  <span class="selector-class">.col-</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-offset-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别是：</p><p>设置宽度，左列排序，左特判，右列排序，右特判，列偏移</p><p>切记这里排序的时候0的时候是auto不是0</p><p>排序和偏移的区别就是排序是按正常顺序排序，偏移之对特殊元素处理</p><h2 id="Bootstrap-实例"><a href="#Bootstrap-实例" class="headerlink" title="Bootstrap 实例"></a>Bootstrap 实例</h2><p>尝试制作BootStrap中文站首页四个图片可以上下的特效</p><p>我们知道这种样式bootstrap官网一定会提供组件的，<a href="https://v3.bootcss.com/components/#thumbnails-custom-content">链接</a></p><p>直接套用略作样式修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.caption</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.caption</span> <span class="selector-tag">h3</span>&#123;<span class="attribute">color</span>:<span class="number">#337ab7</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.caption</span> <span class="selector-tag">h4</span>&#123;<span class="attribute">font-size</span>:<span class="number">15.6px</span>;<span class="attribute">color</span>:<span class="number">#777</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.caption</span>&#123;<span class="attribute">color</span>: <span class="number">#555</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.thumbnail</span>&#123;<span class="attribute">height</span>: <span class="number">326px</span>;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/expo.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>优站精选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap 网站实例<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap 优站精选频道收集了众多基于 Bootstrap 构建、设计精美的、有创意的网站。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/webpack.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Webpack<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>是前端资源模块化管理和打包工具<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/react.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>React<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用于构建用户界面的 JavaScript 框架<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>React 起源于 Facebook 的内部项目，是一个用于构建用户界面的 JavaScript 库。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/typescript.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>TypeScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>中文手册<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>TypeScript 是由微软开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../bootstrap/js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../bootstrap/js/bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一定要注意的是</strong>：因为我们是一级一级的往下掉，所以必须把lg,md,sm全写一边，任何一个都不能少</p><p><strong>还要注意</strong>：BootStrap是三端同步，所以一定要加上视口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BootStrap-的列排序和列偏移"><a href="#BootStrap-的列排序和列偏移" class="headerlink" title="BootStrap 的列排序和列偏移"></a>BootStrap 的列排序和列偏移</h2><p>在上一节的基础上，我们希望可以实现当网页宽度变小的时候原本是尾部先下去改头先下去(明显修改float即可)我们尝试使用列排序和偏移实现</p><p>我们的思路是，不管怎么修改，最开始掉下来的肯定是html代码中在最后的元素，所以我们要把所有元素都反着写,所以，结构方面的位置就已经卡死了，我们希望修改css的样式从而敢于网页的表现形式</p><p>我们考虑css端的表达，我们知道刚刚源码的列排序都是正数没有负数，所以只能是右面往左推，于是给最右面那个元素写下<code>class=&quot;col-lg-pull-9&quot;</code> 相当于是从右往左偏移了9/12，于是最后一个位置上的元素就到了首位，并且重合，于是同理修改其他元素</p><p>剩下的2种情况也要考虑</p><p>于是得到代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-push-9 col-md-push-8 col-sm-push-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/typescript.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>TypeScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>中文手册<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>TypeScript 是由微软开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-push-3 col-sm-pull-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/react.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>React<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用于构建用户界面的 JavaScript 框架<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>React 起源于 Facebook 的内部项目，是一个用于构建用户界面的 JavaScript 库。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-pull-3 col-md-pull-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/webpack.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Webpack<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>是前端资源模块化管理和打包工具<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-pull-9&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/expo.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>优站精选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap 网站实例<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap 优站精选频道收集了众多基于 Bootstrap 构建、设计精美的、有创意的网站。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在写完之后发现出锅了,在md的情况下原来正常但是写完sm之后就不正常了</p><p>发现出锅的是React部分,这是因为我们的宽度没有达到lg,所以根据移动端优先的原则,媒体查询被sm截掉了,于是就出现了列排序,所以我们要显式指定md状态下的列偏移为0,这就是为什么当时源码是<code>&gt;=0&#39;而不是</code>&gt;0`</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-push-9 col-md-push-8 col-sm-push-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/typescript.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>TypeScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>中文手册<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>TypeScript 是由微软开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-push-3 col-md-pull-0 col-sm-pull-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/react.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>React<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用于构建用户界面的 JavaScript 框架<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>React 起源于 Facebook 的内部项目，是一个用于构建用户界面的 JavaScript 库。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-pull-3 col-md-pull-8 col-sm-pull-0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/webpack.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Webpack<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>是前端资源模块化管理和打包工具<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-4 col-lg-3 col-lg-pull-9 col-md-pull-0 col-sm-pull-0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/expo.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;caption&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>优站精选<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap 网站实例<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap 优站精选频道收集了众多基于 Bootstrap 构建、设计精美的、有创意的网站。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>换而言之就是: 可以有偏移,但是同种偏移必须<strong>不能跳着写</strong></p><h2 id="BootStrap-的响应式工具-读源码学工具"><a href="#BootStrap-的响应式工具-读源码学工具" class="headerlink" title="BootStrap 的响应式工具[读源码学工具]"></a>BootStrap 的响应式工具[读源码学工具]</h2><p>BootStrap 的响应是工具是以珊格布局为基础的,所以要加在珊格布局的里面,还需新增文件<code>responsive-utilities.less</code>与<code>/mixin/grid-framework.less</code>,前者是主文件</p><p>最开始的模块是</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.visible-xs</span>,</span><br><span class="line"><span class="selector-class">.visible-sm</span>,</span><br><span class="line"><span class="selector-class">.visible-md</span>,</span><br><span class="line"><span class="selector-class">.visible-lg</span> &#123;</span><br><span class="line">  <span class="selector-class">.responsive-invisibility</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去找<code>responsive-invisibility()</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.responsive-invisibility</span>() &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制所有的元素全部隐藏</p><p>所以我们可以尝试使用 <code>visiable-xs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container visible-md&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Learn more<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现只有在md状态下可见</p><p>与之相反的是<code>hidden-xx</code>,意思相反不解释</p><h2 id="珊格模型设计的精妙之处"><a href="#珊格模型设计的精妙之处" class="headerlink" title="珊格模型设计的精妙之处"></a>珊格模型设计的精妙之处</h2><p>写一个珊格系统,F12查属性,外层容器有一个</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-right</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding-left</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">margin-right</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><p>最后两行就是一个居中,然后就是<strong>容器的两边给了一个padding15</strong></p><p>看到<code>.row</code>属性,看到如下命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin-right</span>: <span class="selector-tag">-15px</span>;</span><br><span class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">-15px</span>;</span><br></pre></td></tr></table></figure><p>看任意一个列,可以看到有</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-right</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding-left</span>: 15<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>是做槽宽的</p><p>得到</p><ul><li>固定容器两边有15px的padding</li><li>row    两边有-15px的margin</li><li>col    两边有15px的padding</li></ul><p>原理</p><ul><li>为了维护槽宽的规则,列两边必须要有15px的padding</li><li>正常情况下这是可以的,但是考虑一种情况,在列里面我想加一个行</li><li>由于列自带槽宽,行没有办法占据整个列,这样,在行里面再加入列,边缘相当于有45px的槽宽</li><li>我们如果给行加入-15px就可以抵消45px的异常槽宽</li><li>但是产生了的问题是最外层的那个固定容器套的行也有一个负槽宽</li><li>解决方案是给固定容器加入槽宽15</li></ul><p><strong>思想</strong>: 为了解决问题我们修改了行列的边距,但是会影响到最外层,因为最外层的固定容器不是行列容器,<strong>是一个特殊化的元素</strong>,我们的思想是把他<strong>一般化</strong>,也就是在当前问题上具有与col,row一样的属性,也就是槽宽15</p><h2 id="BootStrap-定制化"><a href="#BootStrap-定制化" class="headerlink" title="BootStrap 定制化"></a>BootStrap 定制化</h2><ul><li>To C 面向客户的(eg 电商),这类项目要自己写</li><li>To B 面向公司内网的(eg OA),直接从网上下载类似的UI库直接用</li></ul><p>有的需求要求有自己的风格,直接修改bootstrap源码是可以的,但是不利于维护,所以我们可以再写一个less,然后import源码的bootstrap.less 然后在后面修改变量值,编译自己写的less</p><p>p.s. 在H5中<code>dara-</code>开头的大多数JS,</p>]]></content>
    
    
    <summary type="html">BootStrapt是一套UI库，学习的时候应该注意重点在实践而不是理解原理，学习的时候需要常常访问其官网参考文档</summary>
    
    
    
    <category term="前端" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS框架" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/CSS%E6%A1%86%E6%9E%B6/"/>
    
    <category term="BootStrap" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/CSS%E6%A1%86%E6%9E%B6/BootStrap/"/>
    
    
    <category term="前端" scheme="http://liukairui.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="笔记" scheme="http://liukairui.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://liukairui.cc/tags/CSS/"/>
    
    <category term="CSS框架" scheme="http://liukairui.cc/tags/CSS%E6%A1%86%E6%9E%B6/"/>
    
    <category term="BootStrap" scheme="http://liukairui.cc/tags/BootStrap/"/>
    
  </entry>
  
  <entry>
    <title>尚硅谷HTML&amp;CSS学习笔记</title>
    <link href="http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7HTML&amp;CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7HTML&amp;CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-30T16:00:19.000Z</published>
    <updated>2020-11-15T18:19:52.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-HTML基础"><a href="#1-HTML基础" class="headerlink" title="1. HTML基础"></a>1. HTML基础</h2><h3 id="1-1-网页的结构"><a href="#1-1-网页的结构" class="headerlink" title="1.1 网页的结构"></a>1.1 网页的结构</h3><p><strong>前端的三种语言</strong>：HTML(结构)，CSS(表现)，JavaScript(行为)</p><p><strong>标准</strong>：W3C</p><p><strong>基本结构</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    元数据，给浏览器搜索引擎看的</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">想要被看到的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签一般成对出现但是存在自结束标签，例如<code>&lt;input&gt;</code>,<code>&lt;img&gt;</code>,H5不推荐写自结束的<code>/</code></p><p><strong>注释的写法</strong><code>&lt;!-- 这是一个注释 --&gt;</code>，<strong>注释不能嵌套</strong></p><p><strong>标签的属性：</strong>在标签的开始/自结束标签前面写，是一个名值对结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是我的<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;Red&quot;</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">font</span>&gt;</span>网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性之间空格隔开</p><p><strong>网页的基本结构：</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span>   html5声明</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        字符集应该与编辑器的一致</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>迭代：<br>HTML4、XHTML2.0、HTML5…</li><li>文档声明(doctype)：文档声明告诉浏览器网页的版本<code>&lt;doctype html&gt;</code></li><li>计算机的最小操作单位是 <em>1byte=8bit</em></li><li>乱码问题：如果编码解码字符集不同就会有乱码问题</li><li>设置charset应该与编辑器的编码一致</li></ul><p><strong><code>&lt;html lang=&quot;en&quot;&gt;</code></strong> 告诉浏览器你写的是英文网站，到时候会弹出是否翻译，中文则为<code>&lt;html lang=&quot;zh&quot;&gt;</code></p><h3 id="1-2-HTML中的”实体”"><a href="#1-2-HTML中的”实体”" class="headerlink" title="1.2 HTML中的”实体”"></a>1.2 HTML中的”实体”</h3><p>在网页中，编写的多个空格会自动被浏览器解析为一个空格，目的是方便格式化代码<br>但是在html中有时候不能书写一些特殊符号，比如字母两侧的 ‘&lt;’ ‘&gt;’ 号 那么我们就需要实体(转义字符)语法是”&amp;”开头”;”结尾，例如</p><ul><li><code>&amp;nbsp;</code> 是空格</li><li> <code>&amp;gt;</code> 是大于</li><li> <code>&amp;lt;</code> 是小于</li><li> <code>&amp;copy;</code>是版权号</li></ul><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a <span class="tag">&lt; <span class="attr">b</span> &gt;</span> c</span><br><span class="line">a<span class="symbol">&amp;lt;</span>b<span class="symbol">&amp;gt;</span>c</span><br><span class="line">a<span class="tag">&lt;<span class="name">b</span>&gt;</span>c</span><br></pre></td></tr></table></figure><h3 id="1-3-meta-标签"><a href="#1-3-meta-标签" class="headerlink" title="1.3  meta 标签"></a>1.3  meta 标签</h3><p> meta主要用于设置网页的元数据，元数据是并不是给用户看的，其组成有两个</p><ul><li>name 指定数据名称</li><li>content 指定数据内容</li></ul><p>值得注意的是meta并不是键，name才是，例如<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>中charset是键，UTF-8是值。常见的键值对包括                </p><ul><li>charset: 网页采用的字符集，他的写法是另一种键值对的，见下</li><li>keywords: 搜索引擎用的关键词，用逗号隔开</li><li>description: 搜索引擎蓝字下面的那个</li><li>auther: 作者</li><li>title: 标题，会作为搜索引擎的结果标题表示</li><li>http-equiv 协议，其中http-equiv=”refresh” 几秒后跳转网页到</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5,前端，CSS&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;LaLaLaLaLaLaLaLa&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url=http://www.swu.edu.cn&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="1-4-语义化标签"><a href="#1-4-语义化标签" class="headerlink" title="1.4 语义化标签"></a>1.4 语义化标签</h2><p>语义化标签在HTML中表示特定的结构，但是会在显示的时候存在样式的变化。但是注意HTML是专门负责网页结构的，所以在使用html标签时应该关注的是标签的语义而不是标签的样式</p><ul><li><p>标题标签</p><ul><li><p><code>h1</code>~<code>h6</code>一共有6级标题，重要性递减</p></li><li><p><code>h1</code>是最重要的仅次于<code>title</code>，一般只有一个<code>h1</code></p></li><li><p>一般只用到<code>h1</code>到<code>h3</code></p></li></ul></li><li><p><code>p</code>标签，表示一个段落，也是一个块元素</p></li><li><p><code>hgroup</code>标签：将h标题分组</p></li><li><p><code>em</code>是语音语调的加重，是一个行内元素</p></li><li><p><code>strong</code>表示强调</p></li><li><p><code>blockqueue</code> 表示一个长引用</p></li><li><p><code>q</code> 表示一个短引用</p></li><li><p><code>br</code> 换行</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>回乡偶书<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>其一<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>今天天气<span class="tag">&lt;<span class="name">em</span>&gt;</span>真<span class="tag">&lt;/<span class="name">em</span>&gt;</span>不错<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你今天必须要<span class="tag">&lt;<span class="name">strong</span>&gt;</span>完成作业<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">鲁迅说：</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>我是从来没有说过的<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line">子曰<span class="tag">&lt;<span class="name">q</span>&gt;</span>学而时习之<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">今天天气真不错</span><br></pre></td></tr></table></figure><ul><li><p>块元素：主要对元素进行布局</p></li><li><p>行内元素：用来包裹文字，一般是块内放行内</p></li></ul><p><code>p</code>元素里不能放任何块元素,浏览器会对网页自动修正，例如在html外的元素，把<code>h1</code>放在<code>p</code>里面，浏览器不会再源码里纠正，但是会在加载的内存中纠正，在检查元素中显示纠正结果</p><p>结构化语义标签(用的不多)</p><ul><li>header: 网页头部</li><li>main: 网页的主体部分(只有一个)</li><li>footer: 网页底部</li><li>nav: 网页的导航</li><li>aside: 侧注释，与主体相关的其他内容</li><li>article 独立的文章</li><li>section: 其他的独立区块</li></ul><p>结构化无意义标签</p><ul><li>div: 没有语义，表示一个独立区块</li><li>span: 行内元素，没有语义，用来选中文字</li></ul><h2 id="1-7-列表"><a href="#1-7-列表" class="headerlink" title="1.7 列表"></a>1.7 列表</h2><ul><li>无序列表 ul</li><li>有序列表 ol</li><li>定义列表 dl<ul><li>dt 定义的内容</li><li>dd 对定义进行解释说明</li></ul></li><li>内容用 li</li></ul><p>列表间可以互相嵌套</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释解释解释解释<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释解释解释解释<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释解释解释解释4<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-8-超链接"><a href="#1-8-超链接" class="headerlink" title="1.8 超链接"></a>1.8 超链接</h2><p>超链接让页面跳转到另一个位置或者其他页面</p><p>用a定义超链接<br>a是一个行内元素可以嵌套除他自身以外块的元素</p><p>a的属性： </p><ul><li><p>href:目标跳转路径</p><ul><li>值可以是外部网站地址，也可以是内部页面地址</li><li>#是回到顶部</li><li>#ID跳转到页面指定位置</li><li>在开发中可以用javascript:;这样什么也不发生</li></ul></li><li><p>target属性，可选值</p><ul><li>_self 默认值，在当前页面打开</li><li>_blank 在新的页面打开</li></ul></li></ul><p><strong>注意</strong>：ID是唯一属性，不能一样，字母开头，区分大小写，靠前的元素优先生效</p><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;07.列表.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#but&quot;</span>&gt;</span>去底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>什么也不发生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-9-图"><a href="#1-9-图" class="headerlink" title="1.9 图"></a>1.9 图</h2><p>img标签用于引入图片</p><p>使用img标签引入外部标签，img是一个自结束标签</p><p>img 属于替换元素，属于行内元素和替换元素之间的一种元素，即img这段代码被具体的东西给替换了</p><p>属性：</p><ul><li>src 属性指定的外部路劲</li><li>alt 对于图片的描述，描述默认情况下是不会显示的，会在图片显示不出来的时候显示，搜索引擎会通过alt来搜索图片</li><li>width 指定图片的宽度(单位是像素)</li><li>height 指定图片的高度(单位是像素)</li></ul><p><strong>注意</strong>：如果只修改了一个，图片会被等比例缩放，如果指定了两个图片就不会等比例变化</p><p><strong>注意</strong>：一般在PC端不建议修改图片的大小，为了节省网络资源，最好直接在做图的时候改好,但是在移动端经常会把图片缩小</p><p>图片的格式：</p><ul><li>jpg(jpeg)<ul><li>颜色多，不支持透明，不支持动图</li><li>一般用于显示照片</li></ul></li><li>gif<ul><li>支持的颜色少，支持简单透明，支持动图</li><li>颜色单一的动图</li></ul></li><li>png<ul><li>颜色丰富，支持透明，不支持动图</li><li>颜色丰富，复杂透明(转为网页而生)</li></ul></li><li>webp<ul><li>谷歌新推出的，专业用于网络的格式</li><li>具有其他图片格式的优点，文件特别小</li><li>兼容性不好(例如IE)</li></ul></li><li>base64<ul><li>使用base64进行编码，这样可以直接把图片转化为字符，通过字符格式引入</li><li>一般都是需要与网页一起加载的图片</li></ul></li></ul><p><strong>原则</strong>：效果一样用小的(快)，效果不一样用效果好的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/img/1.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">100px</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/img/5.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;松鼠&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1763336060,2397496866&amp;fm=26&amp;gp=0.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;data:image/jpeg;base64...code...&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="1-10-内联框架"><a href="#1-10-内联框架" class="headerlink" title="1.10 内联框架"></a>1.10 内联框架</h2><p>内联框架，用于向当前页面中引入其他页面</p><ul><li><p>src 指定要引入的网页路径</p></li><li><p>frameborder 只有0/1 就是显示与不显示边框</p></li></ul><p>内联框架是把一个网页做为窗口引入现在的网页，注意的是<strong>内联框架的内容不会被搜索框架所索引</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.qq.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">800</span> <span class="attr">height</span>=<span class="string">400</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-11-音视频"><a href="#1-11-音视频" class="headerlink" title="1.11 音视频"></a>1.11 音视频</h2><p>audio 向网页引入音频文件，音视频文件引入的时候默认情况下是不允许用户操作的</p><p>属性:</p><ul><li>controls 只有键没有值 是否允许用户控制播放</li><li>autoplay 音频是否自动播放(兼容性差，例如火狐不自动播放)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了通过src实现之外，还可以通过source实现,这样可以实现对于不同浏览器提供最佳匹配文件,IE8不支持，所以要输出提示，原理是：进入<code>audio</code>标签，如果匹配到source,那么浏览器会自动忽略内部其他代码，实现选择，IE8不认识source所以会自动忽略所有<code>source</code>标签，于是只找到提示信息，自动不全<code>p</code>标签，输出提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    对不起你的浏览器不支持播放音频，请升级浏览器</span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>视频标签是<code>video</code>，同理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.webm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;./source/flower.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-CSS基础"><a href="#2-CSS基础" class="headerlink" title="2. CSS基础"></a>2. CSS基础</h1><h2 id="2-1-CSS简介"><a href="#2-1-CSS简介" class="headerlink" title="2.1 CSS简介"></a>2.1 CSS简介</h2><p>网页的三个部分</p><ul><li>结构HTML</li><li>表现CSS</li><li>行为JS</li></ul><p>CSS</p><ul><li>层叠样式表</li><li>网页实际上是一个多层的结构，通过css样式可以对网页的每一个层设置样式，最后可以看到的只有最上层的</li></ul><p>CSS的定义方式</p><ul><li>第一种方式： <ul><li>在标签内部通过style设置元素的样式</li><li>问题：<br>  如果希望影响到多个元素，必须在多个元素复制一遍，当样式发送变化时要一个一个修改，非常不方便</li><li>注意：开发时候绝对不要使用</li></ul></li><li>第二种方式：<ul><li>将样式编写到style标签里</li><li>通过css选择器为多个标签设置样式，并且只修改一次</li><li>更方便对样式进行复用</li><li>问题：<ul><li>只对一个网页起作用</li><li>里面的样式不能跨网页复用</li></ul></li></ul></li><li>第三种方式 <ul><li>将css样式写到一个css文件里<br>通过link链接外部css文件</li><li>写到外面可以触发浏览器的缓存机制，从而加快网页的加载速度，提高用户的体验</li></ul></li></ul><h2 id="2-2-CSS基本语法"><a href="#2-2-CSS基本语法" class="headerlink" title="2.2 CSS基本语法"></a>2.2 CSS基本语法</h2><ul><li><p>注释是<code>/*...*/</code>，会被浏览器自动忽略</p></li><li><p>选择器&amp;申明块 </p><p>  通过选择器选定指定页面,比如p的作用就是选中所有的p元素,申明块，通过声明块来为指定的元素设置演样式声明块是一个名值对的一个样式，名值对之间以:链接，以;结尾</p></li></ul><h2 id="2-3-CSS-选择器基础"><a href="#2-3-CSS-选择器基础" class="headerlink" title="2.3 CSS 选择器基础"></a>2.3 CSS 选择器基础</h2><p>class是标签属性，和id类似，不同的是class可以重复使用</p><ul><li><p>元素选择器</p><ul><li>作用，根据标签名确定指定元素</li><li>语法：标签名{}</li></ul></li><li><p>ID选择器</p><ul><li>作用，根据元素的ID属性选中一个元素</li><li>语法，#ID属性值</li><li>例子，#box{},#red{}</li></ul></li><li><p>class</p><ul><li>多个元素可以绑定一个class</li><li>一个元素可以绑定多个class(用空格隔开)</li><li>语法 .class 属性值</li></ul></li><li><p>统配选择器：</p><ul><li>*{}</li></ul></li></ul><h2 id="2-4-CSS的复合选择器"><a href="#2-4-CSS的复合选择器" class="headerlink" title="2.4 CSS的复合选择器"></a>2.4 CSS的复合选择器</h2><ul><li><p>交集选择器，同时选择有几个类的元素，两个选择器直接写在一起<br>  <strong>注意</strong>：交集选择器中如果有元素选择器，必须以元素选择器开头</p></li><li><p>并集选择器，同时选择多个选择器对应的元素，用<code>,</code>分割开</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#b1</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h1</span><span class="selector-class">.red</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-5-关系选择器"><a href="#2-5-关系选择器" class="headerlink" title="2.5 关系选择器"></a>2.5 关系选择器</h2><ul><li>父元素<ul><li>直接包含子元素的元素就是父元素</li></ul></li><li>子元素<ul><li>直接被父元素包含的元素</li></ul></li><li>祖先元素<ul><li>直接或间接包含后代的元素就是祖先元素</li><li>一个元素是父元素也是他的祖先元素</li></ul></li><li>后代元素<ul><li>直接或间接被祖先包含的元素叫后代元素</li></ul></li><li>兄弟元素<ul><li>拥有相同父元素的元素就是兄弟元素</li></ul></li></ul><p>选择器</p><ul><li><p>子元素选择器：</p><ul><li>作用：指定父元素的子元素</li><li>语法 父元素&gt;子元素</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.box</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下一个兄弟选择器<ul><li>选择具有相同父亲的兄弟元素</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>+<span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下边所有的兄弟兄弟选择器<ul><li>选择具有相同父亲的兄弟元素</li><li>语法:~</li></ul></li></ul><h2 id="2-6-属性选择器"><a href="#2-6-属性选择器" class="headerlink" title="2.6 属性选择器"></a>2.6 属性选择器</h2><ul><li><code>[属性名]</code> 选择含有指定属性的元素</li><li><code>[属性名=属性值]</code> 选择含有指定属性和属性值的元素</li><li><code>[属性名^=属性值]</code> 以属性值开头的元素</li><li><code>[属性名$=属性值]</code> 以属性值结尾的元素</li><li><code>[属性名*=属性值]</code> 以属性值含有某值的元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title=abc]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title^=abc]</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-伪类选择器"><a href="#2-7-伪类选择器" class="headerlink" title="2.7 伪类选择器"></a>2.7 伪类选择器</h2><p>伪类：不存在的元素，特殊的类</p><ul><li><p>伪类用来描述一个元素的特殊形态，比如第一个子元素，被点击的元素，鼠标移入的元素</p></li><li><p>伪类一般情况下是使用:开头 </p><ul><li>:first-child 第一个元素(不是说同类的第一个子元素，是所有子元素的子元素)</li><li>:last-child 最后一个子元素</li><li>:nth-child() 选中第n个子元素<ul><li>如果直接写n，相当于是0-INF</li><li>如果直接写2n，相当于是所有偶数元素</li><li>如果直接写2n+1，相当于是所有奇数元素(有3)</li><li>odd/even</li></ul></li></ul></li><li><p>加type的child</p><ul><li>:first-of-type</li><li>:last-of-type</li><li>:nth-of-type</li></ul></li><li><p>not是否定伪类</p><ul><li>将符合条件的元素从选择器去除</li></ul></li></ul><h2 id="2-8-a元素的伪类选择器"><a href="#2-8-a元素的伪类选择器" class="headerlink" title="2.8 a元素的伪类选择器"></a>2.8 <code>a</code>元素的伪类选择器</h2><ul><li><code>a:link&#123;...&#125;</code>:正常的链接</li><li><code>a:visited&#123;...&#125;</code>:访问过的链接，<strong>出于用户隐私考虑，visited只能改颜色</strong></li><li><code>a:active&#123;...&#125;</code>:鼠标点击</li><li><code>a:hover&#123;...&#125;</code>: 鼠标移入</li></ul><p>注意的是伪类一定要按照以上顺序写:<code>link</code>,<code>visited</code>,<code>active</code>,<code>hover</code>(LoVe A Ha)</p><h2 id="2-9-伪元素选择器"><a href="#2-9-伪元素选择器" class="headerlink" title="2.9 伪元素选择器"></a>2.9 伪元素选择器</h2><p>伪元素表示页面中并不真实存在的一些元素(特殊的位置)，使用<code>::</code>开头</p><ul><li>::first-letter</li><li>::first-line</li><li>::selection 选中的内容</li><li>::before</li><li>::after,<strong>注意</strong>:必须结合content结合使用</li></ul><h2 id="2-10-样式的继承"><a href="#2-10-样式的继承" class="headerlink" title="2.10 样式的继承"></a>2.10 样式的继承</h2><p>我们为一个元素设置的样式也会应用到他的后代元素</p><p>继承是发生在祖先与后代之间的</p><p>继承的设计师为了开发，利用继承只需写一次就可以让所有的元素都具有该样式</p><p><strong>注意</strong>：并不是所有的样式都可以被继承，比如背景相关的，布局相关的样式都不会被继承</p><h2 id="2-11-样式的冲突与优先级问题"><a href="#2-11-样式的冲突与优先级问题" class="headerlink" title="2.11 样式的冲突与优先级问题"></a>2.11 样式的冲突与优先级问题</h2><p>当我们用不同的选择器选择相同的元素，并且为相同的样式设置不同的值，此时发生了样式的冲突</p><p>发生样式冲突的时候，显示的效果是由显示的优先级决定的</p><table><thead><tr><th>选择器的权重</th><th>优先级</th></tr></thead><tbody><tr><td>内联样式</td><td>1,0,0,0</td></tr><tr><td>ID选择器</td><td>0,1,0,0</td></tr><tr><td>类和伪类选择器</td><td>0,0,1,0</td></tr><tr><td>元素选择器</td><td>0,0,0,1</td></tr><tr><td>通配选择器</td><td>0,0,0,0</td></tr><tr><td>继承的样式</td><td>没有优先级</td></tr></tbody></table><ul><li><p>比较优先级的时候要把所有的<strong>求和</strong>计算，最后优先级高的优先显示，分组选择器单独计算</p></li><li><p>选择器累加不会超过下一级的，也就是不进位，如果优先级计算后相同优先使用考下的样式</p></li><li><p>在属性结束后加上 !important; 会获取最高优先级，慎用！！</p></li></ul><h2 id="2-12-长度单位"><a href="#2-12-长度单位" class="headerlink" title="2.12 长度单位"></a>2.12 长度单位</h2><ul><li>像素<ul><li>显示器实际上是由一个一个发光的小点构成的</li><li>不同屏幕像素大小不同</li><li>所以同样的200像素在不同的设备下显示效果不一样</li></ul></li><li>百分比<ul><li>相对于父元素的百分比</li><li>使得子元素随着父元素改变而改变</li></ul></li><li>em<ul><li>随着字体大小的改变而改变</li><li>1个em是一个字的大小，字的大小可以在div内部修改，即字体大小是自身的字体大小</li></ul></li><li>rem<ul><li>1个rem是相对根元素的字体大小而变化</li><li>经常用于移动端开发</li></ul></li></ul><h2 id="2-13-颜色单位"><a href="#2-13-颜色单位" class="headerlink" title="2.13 颜色单位"></a>2.13 颜色单位</h2><p>在css中可以直接使用颜色名来配置各种颜色，但是直接使用颜色名来命名是非常不方便的</p><ul><li><p>RGB值</p><ul><li>RGB是通过不同的颜色浓度调配处不同的颜色</li><li>每一种颜色是在0-255或者0-100%</li><li>语法: RGB(xx,xx,xx)</li></ul></li><li><p>RGBA值</p><ul><li>在RGB基础上多了个透明度值A</li><li>范围0-1,1是完全不透明</li><li>语法: RGBA(xx,xx,xx,xx)</li></ul></li><li><p>16进制的RGB</p><ul><li>语法#RGB</li><li>颜色浓度00-ff</li><li>如果两位两位重复，例如#AABBCC可以写成#ABC</li></ul></li><li><p>HSL和HSLA值</p><ul><li>在工业设计使用多</li><li>H色相(0-360)</li><li>S饱和度(浓度0-100)</li><li>L亮度(亮度0-100)</li></ul></li></ul><h1 id="3-文档流与盒子模型"><a href="#3-文档流与盒子模型" class="headerlink" title="3. 文档流与盒子模型"></a>3. 文档流与盒子模型</h1><h2 id="3-1-文档流"><a href="#3-1-文档流" class="headerlink" title="3.1 文档流"></a>3.1 文档流</h2><ul><li>我们认为网页是一个多层结构，是一层一层的</li><li>可以通过css为每一次设置样式</li><li>用户只能看到最上面的一层</li><li>我们称最下面的一层叫文档流，文档流是网页的基础<br>  我们创建的元素默认是在文档流中进行排列</li><li>对于我们来说元素主要有两种状态<ul><li>在文档流中</li><li>不在文档流中</li></ul></li><li>元素在文档流中的特点：<ul><li>块元素<br>  -在页面中会独占一行<ul><li>默认宽度是占满父元素</li><li>默认高度是被子元素撑开</li></ul></li><li>行内元素<ul><li>不会独占页面的一行，值占自身大小</li><li>自左向右排列</li><li>和书写习惯一致</li><li>行内元素默认的高度和宽度都是被内容撑开</li></ul></li></ul></li></ul><h2 id="3-2-盒子模型基础"><a href="#3-2-盒子模型基础" class="headerlink" title="3.2 盒子模型基础"></a>3.2 盒子模型基础</h2><ul><li>CSS将页面全部元素设置为了一个矩形的盒子</li><li>将元素设置为矩形的盒子之后，对网页的布局就变成了对不同盒子放在不同的位置</li><li>每一个盒子都有以下几个部分<ul><li>内容区(content)</li><li>内边距(padding)</li><li>边框(border)</li><li>外边距(margin)</li></ul></li></ul><p>内容区的设置，大小和高度默认设置的是内容区属性<br>边框属于盒子的边缘，我们需要设置至少三个样式</p><ul><li><p>border-width</p></li><li><p>border-color</p></li><li><p>border-style<br>边框的大小会影响到盒子的大小</p></li><li><p>border-width: 10px;</p></li><li><p>border-color: red;</p></li><li><p>border-style: solid;</p></li></ul><h2 id="3-3-盒子的边框"><a href="#3-3-盒子的边框" class="headerlink" title="3.3 盒子的边框"></a>3.3 盒子的边框</h2><p>指定四个方向边框粗细，不写默认是3px，写四个值就是上右下左三个值的时候，默认第四个值同第二个，两个的时候上下同，左右同</p><p>写下如下在吗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-color: red yellow green aliceblue; </span><br></pre></td></tr></table></figure><p>可以看到边界是梯形而不是矩形，这是因为如果某部分被两个边框重合，那么中间切开，但是如果你只写了<code>border-left-style</code>就不会出现这个情况</p><ul><li>border-style属性:<ul><li>solid 实线</li><li>dashed 虚线</li><li>double 双线</li><li>默认值是none</li></ul></li></ul><p>还有一个属性是border-XXX-YYY其中XXX取top,left…YYY取color,width…</p><p>border的简写属性，没有相对顺序,不能设置多项</p><h2 id="3-4-盒子的内边距"><a href="#3-4-盒子的内边距" class="headerlink" title="3.4 盒子的内边距"></a>3.4 盒子的内边距</h2><ul><li>内容区的边框时间的距离</li><li>一共有四个内边距</li><li>内边距设置会影响盒子的大小</li><li>背景颜色会延伸到内边距上</li><li>盒子大小由内容区，边框，内边距共同决定</li></ul><h2 id="3-5-外边距"><a href="#3-5-外边距" class="headerlink" title="3.5 外边距"></a>3.5 外边距</h2><ul><li>外边距不影响可见框的大小</li><li>外边距会影响盒子的位置</li><li>一共有四个外边距</li><li>元素会尽量的自左向右顺序排列，在默认情况下如果我们设置左上的边距会影响自己，右下会影响别人</li><li>也可以设置负值，但是元素会向左上移动</li><li>mergin不会影响元素的可见框的大小，但是会影响盒子的实际大小</li></ul><h2 id="3-6-盒子的水平布局-重要"><a href="#3-6-盒子的水平布局-重要" class="headerlink" title="3.6 盒子的水平布局(重要)"></a>3.6 盒子的水平布局(重要)</h2><p>元素在父元素的位置由以下属性决定</p><ul><li>margin-left</li><li>border-left</li><li>padding-left</li><li>width</li><li>padding-right</li><li>border-right</li><li>margin-right</li></ul><p>一个元素在他的父元素中<br>子<strong>元素的margin-left+border-left+padding-left+width+padding-right+border-right=父元素宽度(必须满足)</strong></p><p>等式不成立的时候，我们称他为<strong>过度约束</strong>，这个时候我们会<strong>自动调整</strong></p><ul><li>如果7个值中没有auto会先调整margin-right</li><li>这7个值中有三个可以设置为auto<ul><li>width (默认是auto)</li><li>margin-left</li><li>margin-right</li></ul></li><li>如果某一个值为auto就会先自动调整那个值</li><li>如果一个宽度和一个外边距是auto，那么宽度会调整到最大</li><li>如果三个都是auto，那么宽度会是最大</li><li>如果外边距都是auto，那么两个auto会赋相同的值(常用这个特点实现水平居中)</li></ul><h2 id="3-7-盒子模型垂直方向布局"><a href="#3-7-盒子模型垂直方向布局" class="headerlink" title="3.7 盒子模型垂直方向布局"></a>3.7 盒子模型垂直方向布局</h2><p><strong>盒子的高度默认的父元素高度被子元素撑开</strong></p><p>子元素在内容区中排列</p><ul><li>如果子元素的大小超过父元素则子元素会从父元素中溢出</li><li>使用overflow属性来设置父元素如何处理溢出的子元素</li></ul><p>可选值：</p><ul><li>visible：(默认值)子元素从父元素中溢出，在父元素的外部显示</li><li>hidden:溢出的元素将会被裁减而不显示</li><li>scroll:生成两个滚动条，通过两个滚动条实现浏览</li><li>auto：根据需要生成两个滚动条</li></ul><h2 id="3-8-外边距折叠问题"><a href="#3-8-外边距折叠问题" class="headerlink" title="3.8 外边距折叠问题"></a>3.8 外边距折叠问题</h2><p>相邻的垂直方向的外边距会发生折叠现象</p><ul><li><p>相邻元素垂直外边距之间会发生重叠</p></li><li><p>兄弟元素</p><ul><li>兄弟元素之间相邻垂直外边距会取较大值</li><li>特殊情况<ul><li>如果两个一正一负取和</li><li>如果两个都是负数取绝对值较大的</li></ul></li></ul></li><li><p>父子元素</p><ul><li>父子元素之间的外边距子元素会传递给父元素</li><li>父子外边距折叠会对页面造成影响</li></ul></li></ul><h2 id="3-9-行内元素的盒子模型"><a href="#3-9-行内元素的盒子模型" class="headerlink" title="3.9 行内元素的盒子模型"></a>3.9 行内元素的盒子模型</h2><ul><li>width,height不支持设置宽度和高度</li><li>行内元素可以padding但是垂直方向不会影响布局</li><li>行内元素可以boarder但是垂直方向不会影响布局</li><li>行内元素不折叠，只相加</li><li>display 用来设置元素显示的类型，其可选值有<ul><li>inline 设置为行内元素</li><li>blockn 行内转换块元素</li><li>inline-block 既可以设置宽度又不会独占一行,类似于替换元素</li><li>table 表格</li><li>none 隐藏，啥都没了</li><li>visibility: hidden; 隐藏了，但是占据位置</li></ul></li></ul><h2 id="3-10-默认样式-重置样式表"><a href="#3-10-默认样式-重置样式表" class="headerlink" title="3.10 默认样式(重置样式表)"></a>3.10 默认样式(重置样式表)</h2><p>重置样式表有两个</p><ul><li><code>reset.css</code> 去除了所有的css样式</li><li><code>normalize.css</code> 是将css样式进行了统一但不去除</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/normalize.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-11-盒子尺寸的计算方式"><a href="#3-11-盒子尺寸的计算方式" class="headerlink" title="3.11 盒子尺寸的计算方式"></a>3.11 盒子尺寸的计算方式</h2><p>默认情况下盒子的可见框大小是由内容区，内边距，边框共同确定的</p><p>box-size 可以设置盒子的计算方式，设置width，height的作用域，可选值：</p><ul><li>content-box 默认值，使用宽度高度设置内容区的大小</li><li>border-box 宽和高用来设定整个盒子可见区的大小</li></ul><h2 id="3-12-盒子的轮廓和圆角"><a href="#3-12-盒子的轮廓和圆角" class="headerlink" title="3.12 盒子的轮廓和圆角"></a>3.12 盒子的轮廓和圆角</h2><p>outline 用来设置元素的轮廓线，用法和boarder一样，但是轮廓不影响可见框的大小</p><p>boxs-shadow用来设置元素的阴影效果，不影响页面布局<br>    - 两个参数是阴影的右偏移量 影印的下偏移量<br>    - 第三个是影印的模糊半径<br>    - 第四个是影印的颜色</p><h1 id="4-浮动布局"><a href="#4-浮动布局" class="headerlink" title="4. 浮动布局"></a>4. 浮动布局</h1><h2 id="4-1-浮动简介"><a href="#4-1-浮动简介" class="headerlink" title="4.1 浮动简介"></a>4.1 浮动简介</h2><p>通过浮动可以使一个元素向其父元素的左侧或者右侧移动，使用float属性设置元素的浮动</p><p>可选值：</p><ul><li>none 默认值元素不浮动</li><li>left 向左浮动</li><li>right 向右浮动</li></ul><p>元素设置浮动之后元素的水平布局等式<strong>不需要强制成立</strong></p><ul><li>元素设置浮动以后会完全从文档流脱离</li><li>元素下面还在文档流中的元素会向上一定</li></ul><p>浮动可以让元素横向排列 </p><ol><li>浮动元素会完全脱离文档流不占位置</li><li>设置浮动以后元素会向父元素的左侧或者右侧移动</li><li>浮动元素不会从父元素中移出</li><li>浮动元素向左右移动不会超过前面的元素</li><li>如果浮动元素上面是没有浮动的块元素则浮动无法上移</li><li>浮动元素不会超过他上面的兄弟元素最多最多一样高</li></ol><p>浮动的主要作用是让元素水平排列，通过浮动可以制作水平方向上的布局</p><h2 id="4-2-浮动的特点"><a href="#4-2-浮动的特点" class="headerlink" title="4.2 浮动的特点"></a>4.2 浮动的特点</h2><p>浮动不会盖住文字，文字会自动环绕在浮动元素周围</p><p>元素从文档流脱离之后会发生变换</p><ul><li>块元素<ol><li>块元素不在独占一行</li><li>脱离文档流以后宽度和高度被内容撑开</li></ol></li><li>行内元素<ol><li>行内元素脱离文档流之后会变成块元素，长宽默认被内容撑开，但是可以设置<br> 也就是不区分行内和块了</li></ol></li></ul><h2 id="4-3-高度塌陷问题"><a href="#4-3-高度塌陷问题" class="headerlink" title="4.3 高度塌陷问题"></a>4.3 高度塌陷问题</h2><p><strong>BFC块级格式化环境</strong></p><ul><li><p>BFC是CSS中的一个隐藏的属性，可以为一个元素开启BFC，开启BFC元素会变成一个独立的布局区域</p></li><li><p>元素开启BFC之后的特点：</p><ol><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC元素子元素和父元素的外边距不会重叠</li><li>开启BFC可以包含浮动的子元素</li></ol></li><li><p>可以通过特殊方式开启BFC</p><ol><li>设置元素浮动(不推荐)</li><li>将元素设置为行内块元素(不推荐)</li><li>overflow 这只非visible一般设置auto或者hidden</li></ol></li></ul><p><strong>高度塌陷问题</strong>：</p><p>在浮动布局中，父元素的高度默认被子元素撑开的子元素浮动以后会完全脱离文档流，子元素从文档流脱离将无法撑起父元素的高度，导致父元素高度丢失</p><p>父元素丢失以后，其下的元素会自动上移，导致页面布局混乱所以高度塌陷是浮动布局较常见的一个问题我们必须处理</p><h2 id="4-4-BFC最优解决方案"><a href="#4-4-BFC最优解决方案" class="headerlink" title="4.4 BFC最优解决方案"></a>4.4 BFC最优解决方案</h2><p>直接引入clearfix类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原理比较简单，首先设置一个前后属性，里面填充一个空内容，但是如果是内联的话就不会显示，我们必须设置为非内联，为了解决外边距重叠问题，设置为<code>table</code>,最后为了解决BFC所以设置<code>clear:both</code></p><h1 id="5-定位"><a href="#5-定位" class="headerlink" title="5 定位"></a>5 定位</h1><h2 id="5-1-定位的简介"><a href="#5-1-定位的简介" class="headerlink" title="5.1 定位的简介"></a>5.1 定位的简介</h2><ul><li><p>定位是一种更加高级的布局手段</p></li><li><p>通过定位我们可以将元素摆放到页面的任何地方</p></li><li><p>使用position设置定位<br>可选值</p><ul><li>static 静止的，默认值，不开启定位</li><li>relatove 开启元素相对定位</li><li>absolute 开启元素绝对定位</li><li>fixed 开启 元素的固定定位</li><li>sticky 开启 元素的粘滞定位</li></ul></li><li><p>相对定位：</p><ul><li>当元素的position时则开启了元素的相对定位</li><li>相对定位的特点<ol><li>元素开启相对定位以后如果不设置偏移量不会发生任何变化</li></ol></li></ul></li><li><p>偏移量(off-set)</p><ul><li>当元素开启了定位之后可以通过偏移量设置元素的位置<br>  top<br>  bottum<br>  left<br>  right<br>  通常情况下我们四选二即可实现定位</li></ul></li></ul><h2 id="5-2-绝对定位"><a href="#5-2-绝对定位" class="headerlink" title="5.2 绝对定位"></a>5.2 绝对定位</h2><ul><li>当元素的position设置为abslute的时候开启了绝对定位</li><li>开启绝对定位之后不设置偏移量位置不会发生变化</li><li>开启绝对定位之后会从文档流脱离</li><li>绝对定位会改变元素的性质-&gt; 行内变快，块的大小被内容撑开</li><li>绝对定位会提升元素层级\</li><li>绝对定位元素是相对于包含块进行定位的</li></ul><p>包含块：</p><ul><li><p>正常情况下：<br>  包含块是当前元素最近的祖先元素<strong>块元素</strong></p>  <div><div></div></div></li><li><p>绝对定位的包含块<br>  绝对定位的包含块就是离他最近的祖先元素<br>  所有的祖先元素都没有开启定位就相对于根元素</p></li></ul><p><code>html</code>是根元素，也是初始包含块</p><p>于是有了一种对于确定大小的盒子的居中方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 0;</span><br><span class="line"><span class="selector-tag">left</span>: 0;</span><br><span class="line"><span class="selector-tag">right</span>: 0;</span><br><span class="line"><span class="selector-tag">bottom</span>: 0;</span><br><span class="line"><span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><h2 id="5-3-固定定位"><a href="#5-3-固定定位" class="headerlink" title="5.3 固定定位"></a>5.3 固定定位</h2><p>将元素的posituin设置为fixed</p><ul><li>固定定位可以认为是一种特别的绝对定位</li><li>文档流脱离</li><li>改位置不动</li><li>内联变快，快内容撑开</li><li>唯一不同的是他们的参考系一定是视口</li></ul><h2 id="5-4-粘滞定位"><a href="#5-4-粘滞定位" class="headerlink" title="5.4 粘滞定位"></a>5.4 粘滞定位</h2><ul><li>当元素的position属性设置为sticky则开启了元素的粘滞定位</li><li>粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素达到某个位置时将其固定</li></ul><h2 id="5-5-水平垂直布局"><a href="#5-5-水平垂直布局" class="headerlink" title="5.5 水平垂直布局"></a>5.5 水平垂直布局</h2><p>包含块的宽度=$\Sigma$ 7+绝对定位的left right</p><p>当发生过度约束的时候</p><ul><li>如果9个值没有auto就调整right</li><li>如果有auto就调整auto</li><li>left right的默认值是auto，所以如果不知道left right 而且等式不成立，那么自动调整这两个值</li></ul><p>垂直布局</p><ul><li><strong>top+margin<em>2+padding</em>2+height+buttom=h</strong></li></ul><h2 id="5-6-元素的垂直层级"><a href="#5-6-元素的垂直层级" class="headerlink" title="5.6 元素的垂直层级"></a>5.6 元素的垂直层级</h2><p>对于开启了定位的元素，可以使用z-index指定元素的层级</p><ul><li>z-index需要一个整数作为参数,越大越优先显示</li><li>元素层级如果一样优先显示后面的</li><li>层级可以设置负数，但是别用</li><li>祖先元素的层级再高也不会盖住后代元素</li></ul><h1 id="6-表格与表单"><a href="#6-表格与表单" class="headerlink" title="6 表格与表单"></a>6 表格与表单</h1><h2 id="6-1-表格"><a href="#6-1-表格" class="headerlink" title="6.1 表格"></a>6.1 表格</h2><p>在现实生活中，我们经常需要使用表格表示格式化数据，课程表，名单，成绩单，在网页中我们也需要设置表格，通过使用table创建表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在table中使用tr表示一行,有几个tr就表示几行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在tr中使用td表示一个单元格,有几个td就是有几个单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 他会只占自己大小不合并单元格，除非指定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-长表格"><a href="#6-2-长表格" class="headerlink" title="6.2 长表格"></a>6.2 长表格</h2><p>可以将一个表格分为三部分</p><ul><li>表头 thead</li><li>主体 tbody</li><li>底部 tfoot</li><li>th 表格头部单元格</li></ul><h2 id="6-3-表格的样式"><a href="#6-3-表格的样式" class="headerlink" title="6.3 表格的样式"></a>6.3 表格的样式</h2><ul><li>边框之间的间距<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-spacing</span>: 0<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li>边框合并<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>如果不使用tbody直接使用tr，浏览器会自动创建一个tbody然后把所有tr放到里面，所以tr不是table子元素，这就导致子元素选择器无法选择</strong></p><ul><li><p>将元素设置为单元格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-cell</span>;</span><br><span class="line"><span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;</span><br></pre></td></tr></table></figure><h2 id="6-4-表单"><a href="#6-4-表单" class="headerlink" title="6.4 表单"></a>6.4 表单</h2></li><li><p>现实生活中用于提交数据</p></li><li><p>网页中的表单用于将本地数据提交远程的服务器</p></li><li><p>使用form标签创建表单</p></li></ul><p>实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./target.html&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加表单项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本框</span></span><br><span class="line"><span class="comment">        注意</span></span><br><span class="line"><span class="comment">            数据要提交的服务器中必须要指定一个name</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    文本框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pw&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    单选按钮</span><br><span class="line">    <span class="comment">&lt;!--必须有一个相同的name属性，否则不知道哪两个选项是一组的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hrll&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hrll&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    下拉列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;i&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">&quot;ii&quot;</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;iii&quot;</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-5-表单的属性"><a href="#6-5-表单的属性" class="headerlink" title="6.5 表单的属性"></a>6.5 表单的属性</h2><ul><li>action 表单提交的地址<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关闭自动填充 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./target.html&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动获取焦点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将表单设置为只读 数据提交 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fasd&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将表单设置为禁用 数据不提交 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fasd&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="7-动画与过渡"><a href="#7-动画与过渡" class="headerlink" title="7 动画与过渡"></a>7 动画与过渡</h1><h2 id="7-1过渡"><a href="#7-1过渡" class="headerlink" title="7.1过渡"></a>7.1过渡</h2><ul><li>通过过渡指定一个属性发生变化时候的切换方式</li><li>通过过渡效果可以创建一些非常好的效果提升用户体验</li></ul><p>过渡的简写属性是transition，还有很多属性</p><ol><li>transition-property 指定要执行要被过渡的属性,多个属性之间’,‘隔开，所有属性都要过渡写all大部分属性都支持过渡效果，只要他的值是数值，可以计算的可以过渡注意过渡时必须是一个有效数值向另外一个过渡，例如auto就不是<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition-property</span>: <span class="selector-tag">width</span>;</span><br></pre></td></tr></table></figure></li><li>transition-duration 指定过渡效果的持续时间，时间可以分别指定<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition-duration</span>: 1<span class="selector-tag">s</span></span><br></pre></td></tr></table></figure></li><li>transition-timing-function 过渡的时序函数，即过渡的执行方式，可选值：<ul><li>ease 默认值 开始慢先加速后减速</li><li>linear 匀速直线</li><li>ease-in 加速运动</li><li>ease-out 减速运动</li><li>ease-in-out 先加速后减速</li></ul></li></ol><p>速度实际上都是通过贝塞尔曲线指定的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(0,0,1,1);</span><br></pre></td></tr></table></figure><p>四个值分别是贝塞尔曲线两个点的坐标</p><ul><li>还可使用step 分步实现，transition-timing-function: steps(3);，后面加end/start 表示是在这一阶段的开始还是结束执行</li></ul><ol start="4"><li>transition-delay 等待一定的时间之后开始</li></ol><p>以上可以直接用transition，唯一的顺序要求是需要同时写持续和延迟，先持续后延迟</p><h2 id="7-2-动画"><a href="#7-2-动画" class="headerlink" title="7.2 动画"></a>7.2 动画</h2><p>动画与过渡类似都可以实现动态的效果，不同的是过渡需要在某个属性发生变化的时候才会触发，<strong>动画是可以自动触发的效果</strong></p><p>设置动画效果必须先设置一个<strong>关键帧</strong>，关键帧设置了一个动画执行的每一个步骤</p><p>动画的属性设置全部是<strong>animation</strong>开头的:</p><ul><li>animation-name: 要对当前元素生效的关键帧的名字</li><li>animation-duration: 动画的持续时间</li><li>animation-timing-function :动画显示形式</li><li>animation-delay :动画的延时</li><li>animation-iteration-count: 动画迭代次数可以指定次数””无限执行infinite”</li><li>animation-direction: 动画执行的方向<ul><li>normal 默认值 from到to运行每次都是这样</li><li>reverse 反向</li><li>alternate 当运行重复执行动画的时候偶数次反向执行</li></ul></li><li>animation-fill-mode: 动画执行结束的位置<br>  正常情况下动画执行完毕之后并不会回到from的位置而是回到非动画的css样式<ul><li>none 默认值 动画执行完毕之后回到原来的位置</li><li>forwards 动画执行完毕弧就地停下</li><li>backwords 在动画开始的等待期间元素就处于from关键帧状态否则不提前进入关键帧</li><li>both：结合了forwards和backwords</li></ul></li><li>animation-play-state: 动画的执行状态<ul><li>running 默认值 运行</li><li>paused 动画暂停</li></ul></li></ul><p>以上全部使用animation一个实现，所以直接用且无顺序只要保证延时在后面写</p><p>实例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 动画的调用 */</span></span><br><span class="line"><span class="selector-class">.box1</span> <span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line">    <span class="attribute">animation</span>: test <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 动画的实现 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">    <span class="comment">/* 指定动画的开始位置 from也可以写作0%*/</span></span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    33<span class="selector-class">.5</span>%&#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指定动画的结束位置 to也可以写作100%*/</span></span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">7000px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-变形"><a href="#7-3-变形" class="headerlink" title="7.3 变形"></a>7.3 变形</h2><p>变形就是指通过CSS来改变元素的形状或者位置</p><ul><li><p>变形不会影响到元素的页面布局</p></li><li><p>transform 用来设置元素的变形效果</p><ul><li><p>平移</p><ul><li>translateX() 沿着X轴平移</li><li>translateY() 沿着Y轴平移</li><li>translateZ() 沿着Z轴平移</li><li><strong>平移元素的百分比是相对于自身运算的</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-100px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(50%);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>旋转：通过旋转可以是元素围绕xyz旋转指定角度</p><ul><li>transform: rotateX();</li><li>transform: rotateY();</li><li>transform: rotateZ();</li><li>backface-visibility: hidden; 是否显示元素的背面<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateZ</span>(720<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateX</span>(<span class="selector-class">.5turn</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateY</span>(<span class="selector-class">.5turn</span>);</span><br><span class="line">transform: rotateX(.5turn) rotateY(.5turn) rotateZ(.5turn); */</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateY</span>(45<span class="selector-tag">deg</span>) <span class="selector-tag">rotateZ</span>(50<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="comment">/* 要把transform写在一起，但是有先后优先级 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateY</span>(180<span class="selector-tag">deg</span>) <span class="selector-tag">translateZ</span>(400<span class="selector-tag">px</span>);   <span class="comment">/*Y轴是位置不变的*/</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateZ</span>(400<span class="selector-tag">px</span>) <span class="selector-tag">rotateY</span>(180<span class="selector-tag">deg</span>);   <span class="comment">/*Y轴是变化位置的*/</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>缩放</p><ul><li>scaleX()</li><li>scaleY()</li><li>还有z轴缩放，但是没有用，原因是scale的原理是将坐标轴拉长，不是直接放大图片</li><li>scale()同时缩放</li></ul></li><li><p>特殊的Z轴平移</p><p>Z轴平移就是在调整元素在Z轴的位置，正常情况下是调整元素和人眼之间的距离，距离越大元素离人越近</p><p>Z轴的平移属于立体效果(近大远小)默认情况下我们的网页时不支持透视的如果需要看到效果，必须设置网页的视距，设置方法为在html下写下(一般800-1200均可)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">perspective</span>: 800<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="8-弹性容器与移动端"><a href="#8-弹性容器与移动端" class="headerlink" title="8 弹性容器与移动端"></a>8 弹性容器与移动端</h1><h2 id="8-1-弹性盒-伸缩盒子"><a href="#8-1-弹性盒-伸缩盒子" class="headerlink" title="8.1 弹性盒/伸缩盒子"></a>8.1 弹性盒/伸缩盒子</h2><ul><li><p>是css的另一种布局手段，主要用来代替浮动完成页面的布局</p></li><li><p>如果你不需要兼容老浏览器就用flex要是需要兼容PC就用float</p></li><li><p>伸缩盒可以使元素更有弹性，让元素可以跟随页面的大小而改变</p></li><li><p>弹性容器</p><ul><li>要使用弹性盒子必须先将元素设置为弹性容器</li><li>通过display设置弹性容器<br>  display:flex            设置为块级元素的弹性盒子<br>  display:inline-flex     设置为行内块元素的弹性盒子</li></ul></li><li><p>弹性元素</p><ul><li>弹性容器的子元素是弹性元素(弹性项目)</li><li>只有弹性容器的直接子元素蚕食元素，后代元素不是</li><li>一个元素既可以是弹性容器也可以弹性元素</li></ul></li><li><p>弹性容器的属性</p><ul><li><p>flex-direction 用于指定弹性元素的排列方式，可选值有</p><ul><li>row (默认值),弹性元素在容器中水平排列，这个row是按书写顺序排列，中国是左到右他就是左到右</li><li>row-reversw 反向水平排列</li><li>column 弹性元素纵向排列 (自上向下)</li></ul></li><li><p>主轴</p><ul><li>弹性元素的排列方向称为主轴,例如row的时候主轴值自左向右…</li></ul></li><li><p>侧轴</p><ul><li>与主轴垂直方向的称为侧轴 一般不说具体的方向只说水平还是垂直</li></ul></li></ul></li><li><p>弹性元素的属性 </p><ul><li><p>flex-grow 指定元素伸展的系数</p><ul><li>当父元素有多余的空间的时候子元素如何伸展</li><li>父元素的剩余空间按比例分配</li></ul></li><li><p>flex-shrink 指定元素的收缩系数</p><ul><li>当父元素中的空间不足以容纳所有的子元素时如何对子元素进行收缩</li><li>默认值是1 等比例收缩</li><li>0是不收缩</li><li>值越大收缩越多</li></ul></li></ul></li></ul><h2 id="8-2-弹性容器的使用"><a href="#8-2-弹性容器的使用" class="headerlink" title="8.2 弹性容器的使用"></a>8.2 弹性容器的使用</h2><p>设置弹性元素是否在弹性容器中自动换行 </p><ul><li>nowrap 元素不自动换行</li><li>wrap 元素自动换行</li><li>wrap-reverse 元素沿着辅轴反方向换行</li></ul><p>flex-flow wrap和direction 的简写属性</p><p>justify-content 如何分配主轴上的空白空间 主轴上的元素如何排列，可选值</p><ul><li>flex-start 沿着主轴起边排列 主轴较大值处空白</li><li>flex-end 元素沿着主轴终边排列</li><li>center 元素居中排列 空白分布到两边</li><li>space-around 空白分布到每一个元素的两侧 但是起始两个的左右是小一半</li><li>space-evenly 空白分布到元素单侧 所有的空隙全相等 (唯独这一个兼容性的不好)</li><li>space-between 空白分布元素之间，起始终止的左右没有</li></ul><p>**align 开头的是设置辅轴上的样式 **</p><p>alihn-items 是设置元素在辅轴上如何对齐</p><ul><li>他设置的是<strong>元素间</strong>的关系</li><li>stretch (默认值)将元素之间长度设置为相同值 这个行指的是与本行元素高度均相同，其他行不管</li><li>flex-start 元素不会拉伸沿着辅轴起边对齐</li><li>flex-end 辅轴终边对齐</li><li>center 居中对齐</li><li>baseline 基线对齐</li></ul><p>align-content 辅轴上的空白空间对齐方式，同justify-content</p><p>align-self 用来覆盖覆盖元素的align-items，相当于单独修改</p><h2 id="8-3-弹性元素的样式"><a href="#8-3-弹性元素的样式" class="headerlink" title="8.3 弹性元素的样式"></a>8.3 弹性元素的样式</h2><p>弹性元素的增长系数<code>flex-grow</code>是分配是在宽度的基础上加上按比例分配的空白的空间</p><p>弹性元素的缩减系数<code>flex-shrink</code><br>    - 缩减系数的计算方式比较复杂<br>    - 缩减多少是根据缩减系数和元素的大小来计算的</p><p>计算元素<code>flex-basis</code>在主轴上的基础长度的时候就忽略了width，</p><ul><li>默认值是auto即参考元素自身的width</li><li>如果传递了一个具体的数字即以该值为准</li></ul><p><strong>可以理解为弹簧的三种状态</strong>  </p><ul><li>flex-basic就是弹簧自然状态</li><li>flex-grow 弹簧拉伸</li><li>flex-shrink 弹簧压缩</li><li>他们有一个通用属性 flex: grow shrink basic<ul><li>flex有一个默认值 initial 相当于 flex:0 1 auto</li><li>flex有一个 auto 相当于 flex:1 1 auto</li><li>flex有一个 none 相当于 flex:0 0 auto  相当于弹性元素没有弹性</li></ul></li></ul><p>order 决定弹性元素的排列顺序</p><h2 id="8-4-像素与视口"><a href="#8-4-像素与视口" class="headerlink" title="8.4 像素与视口"></a>8.4 像素与视口</h2><p>像素</p><ul><li>屏幕是由一个一个发光的小点构成的，这一个一个发光的小点就是一个一个像素</li><li>分辨率：1920*1080 说的就是屏幕中小点的数量</li><li>像素在前端开发中分成两种情况：CSS像素和物理像素</li><li>物理像素：上述所说的小点点就是物理像素</li><li>CSS像素：在编写网页的时候我们所用的像素就是css像素<ul><li>浏览器在现实网页的时候需要把css像素转化为物理像素，然后再呈现</li><li>一个css像素最终由几个物理像素现实由浏览器决定，默认情况下PC端1个css像素就是1个物理像素</li></ul></li></ul><p>视口(viewport)</p><ul><li>视口就是屏幕中用来显示网页的区域</li><li>可以通过查看视口的大小来观察css像素和物理像素的比值</li><li>默认情况下视口的宽度就是html标签的宽度</li><li>浏览器放大两倍之后<ul><li>视口宽度 960px<br>物理像素   1920px</li></ul></li><li>我们可以通过改变视口的大小改变比值</li></ul><h2 id="8-5-移动端介绍"><a href="#8-5-移动端介绍" class="headerlink" title="8.5 移动端介绍"></a>8.5 移动端介绍</h2><p>在不同屏幕，单位像素的大小是不同的，像素越小，屏幕会越清晰</p><pre><code>https://material.io/resources/devices/</code></pre><p>智能手机的像素要远远小于计算机显示器的像素点，默认情况下移动端的网页都会被设置为980px(CSS像素)以确保PC端网页可以在移动端正常访问，但是如果网页的宽度超过980，移动端浏览器会自动对网页缩放以完整显示网页</p><p>所以基本上大部分PC端网站可以在移动端正常浏览器，但往往没有好的体验，为了解决这个问题大部分网站会专门为移动端设计网页</p><p>移动端默认的视口大小是980px(css像素)，默认情况下移动端的像素比是 980/移动端像素宽度，如果我们直接在网页端编写移动端代码，这样在980视口下我们的像素比是非常不友好的，导致网页中的内容非常非常小，编写移动端页面的时候必须要确保一个比较合理的像素比<br>        $$1CSS=2物理px$$</p><ul><li><p>我们可以改变视口的大小实现适配</p></li><li><p>可以通过meta设置视口的大小</p></li><li><p>每一款移动设备都会有最佳的像素比</p><ul><li>一般我们只要将像素比设置为该值就可以得到最佳像素比</li><li>视口将像素比设置为最佳像素比的视口大小成为完美视口</li></ul></li></ul><p>记住：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-6-视口"><a href="#8-6-视口" class="headerlink" title="8.6 视口"></a>8.6 视口</h2><p>不同的设备完美视口的大小是不一样的 </p><ul><li>iPhone6 – 375</li><li>iPhone6Plus –414</li></ul><p>由于不同设备的视口和像素比不同，所以同样的375px在不同设备意义下是不一样的，例如在iPhone6中375是全屏的，但是在plus中375就会缺一个角，所以在移动端开发的时候就不能使用px来布局了，当然转而使用%就可以了，但是不能这样，应为网页复杂之后没法写了 </p><h2 id="8-7-vm适配"><a href="#8-7-vm适配" class="headerlink" title="8.7 vm适配"></a>8.7 vm适配</h2><p>vw是一个css的新单位，表示视口单位(viewport width)</p><ul><li><p>100vw就是一个视口的宽度</p></li><li><p>1vw就是1%视口宽度</p><p>vw这个单位永远是相对于视口宽度进行计算，但是他在PC端适配并不好(移动端可以的)</p></li></ul><p>当设计图的宽度为750px创建一个 48*35 的元素</p><ul><li>100vw   = 750px</li><li>6.4vw   = 48px</li><li>4.667vw = 35px</li></ul><p>但是这样实现涉及到计算，十分麻烦，可以使用rm进行适配</p><h2 id="8-8-响应式布局"><a href="#8-8-响应式布局" class="headerlink" title="8.8 响应式布局"></a>8.8 响应式布局</h2><ul><li>网页课可以根据不同的设备窗口大小呈现不同的效果</li><li>使用响应式布局可以使一个网页适用于所有设备</li><li>响应式布局的关键是媒体查询</li><li>通过媒体查询可以为不同的设备或者不同的状态分别设置样式(屏幕 打印 屏幕阅读器)<br>例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> all &#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> print&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 可以使用,表示并*/</span></span><br><span class="line"><span class="keyword">@media</span> speech,media &#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在媒体类型前添加only 表示只有,only的使用时为了兼容老浏览器</p><h2 id="8-9-媒体特性"><a href="#8-9-媒体特性" class="headerlink" title="8.9 媒体特性"></a>8.9 媒体特性</h2><p>width 视口的宽度</p><p>height 视口的高度</p><p>min-width 视口的最小宽度 只要大于500就生效</p><p>max-width 视口的最大宽度</p><p>样式切换的分界点我们也称为断点，也就是网页在这个时候发生变化</p><ul><li>小于 768 超小屏幕 max-width:768</li><li>大于 768 小屏幕 min-width:768</li><li>大于 992 中屏幕 min-width: 992</li><li>大于 1200 大屏幕 min-width: 1200</li></ul><h1 id="9-字体-图标字体与渐变"><a href="#9-字体-图标字体与渐变" class="headerlink" title="9 字体,图标字体与渐变"></a>9 字体,图标字体与渐变</h1><h2 id="9-1-字体"><a href="#9-1-字体" class="headerlink" title="9.1 字体"></a>9.1 字体</h2><p>字体相关的样式</p><ul><li>color 用来设置字体颜色的</li><li>font-size 字体的大小，和font相关的单位  <ul><li>em 相当于当前元素的一个font-size</li><li>rem 相当于根元素的一个font-size</li></ul></li><li>font-family 字体族(字体)<ul><li>可选值1：字体</li><li>可选值2：<ul><li>serif 衬线字体</li><li>sans-serif 非衬线字体</li><li>monospace 等宽字体</li><li>注意：以上并不是字体，而是字体的分类，如果写了这三个只是告诉浏览器要用这类字体，具体用哪个浏览器自行决定</li></ul></li><li>我们往往可以指定很多值，用,隔开，字体名称有空格分号的要用’’包起来</li></ul></li></ul><p><code>@font-face</code> 可以将服务器中的字体直接提供给用户去使用，但是存在问题问题：</p><ol><li>加载速度</li><li>版权</li></ol><h2 id="8-2-图标字体"><a href="#8-2-图标字体" class="headerlink" title="8.2 图标字体"></a>8.2 图标字体</h2><p>在网页中经常使用到一些图标可以通过图片引入图标但是图片本身比较大，但是非常不灵活</p><ul><li>所以还可以将图标直接设定字体，然后通过fontface引入</li><li>这样就可以通过使用字体图标的形式来使用图标</li></ul><p>fontawsome 使用规范</p><ol><li>官网下载</li><li>解压</li><li>将css和webfonts移到目录</li><li>将all.css引入网页</li><li>使用图标字体</li><li>直接通过类名来使用图标字体</li></ol><p>使用示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. --&gt;</span></span><br><span class="line">li::before&#123;</span><br><span class="line">    content: &quot;\f1b0&quot;;</span><br><span class="line">    font-family: &#x27;Font Awesome 5 Free&#x27;;</span><br><span class="line">    font-weight: 900;           /*fab需要单独设置*/</span><br><span class="line">    color: blue;</span><br><span class="line">    margin-right: 10px;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fas&quot;</span>&gt;</span><span class="symbol">&amp;#xf0f3;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-cat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-3-字体的属性"><a href="#8-3-字体的属性" class="headerlink" title="8.3 字体的属性"></a>8.3 字体的属性</h2><p>font: 可以设置字体相关的所有属性<br>写法一：先写字号在写字体</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: 50px Cambria, Cochin, Georgia, Times, &#x27;Times New Roman&#x27;, serif;</span><br></pre></td></tr></table></figure><p>写法二：字号/行高在写字体</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: 50px/5 Cambria, Cochin, Georgia, Times, &#x27;Times New Roman&#x27;, serif;</span><br></pre></td></tr></table></figure><p>省略不是不写是用了默认值</p><p>font-weight: 字重</p><ul><li>normal 不加粗</li><li>bold 加测</li><li>100-900 表示9个加粗的级别,虽然提供了9个级别，但是没什么用,因为电脑上不可能安装这么多字重字体</li></ul><h2 id="8-4-文本样式"><a href="#8-4-文本样式" class="headerlink" title="8.4 文本样式"></a>8.4 文本样式</h2><p>text-align 文本水平对齐</p><ul><li>left默认值</li><li>right 右对齐</li><li>center 居中对齐</li><li>justify 两端对齐</li></ul><p>vertical-align 垂直 对齐 </p><ul><li>baseline 基线对齐 默认</li><li>top 顶部对齐，父子顶部对齐</li><li>bottom 底部对齐</li><li>middle 居中对齐 一般不用</li><li>指定数值调整位置</li></ul><p>text-decoration 设置文本修饰</p><ul><li>none 默认值 什么也没有</li><li>underline 下划线</li><li>overline 上划线 </li><li>linethrough 穿过的线<br>后面还可以加颜色，给线改色 但是IE不支持</li></ul><h2 id="8-5-背景"><a href="#8-5-背景" class="headerlink" title="8.5 背景"></a>8.5 背景</h2><p>background-color 设置背景颜色</p><p>background-image 设置背景图片</p><ul><li>可以同时设置背景图片的颜色，这样背景颜色将会成为图片的背景</li><li>如果背景图片小于元素，则背景图片会在元素中平铺将元素铺满</li><li>如果背景图片大于元素 将会有一部分图片无法显示</li><li>如果两者一样大则会正常显示</li></ul><p>background-repeat</p><ul><li>repeat 默认值，背景会沿着xy轴双方向重复</li><li>repeat-x 沿着x轴方向重复</li><li>repeat-y 沿着y轴方向重复</li><li>no-repeat 不重复</li></ul><p>background-position 用来这只背景图片的位置</p><ul><li>通过left…设置图片的位置 例如background-position: left center,使用方位词的时要写两个，如果写一个的话，默认第二个是center</li><li>通过偏移量指定图片的位置 水平和垂直</li></ul><p>background-clip </p><ul><li>border-box 默认值 背景会出现边框下面</li><li>padding-box 背景不会出现在边框只出现在内容区和内边距</li><li>content-box 背景只出现在内容区</li></ul><p>background-origin 背景图片偏移量计算原点</p><ul><li>padding-box 默认值 background-position 从内边距开始计算</li><li>content-box background-position 从内容区开始计算</li><li>border-box  background-position 从边框开始计算</li></ul><p>background-size 设置背景图片的大小</p><ul><li>第一个值表示宽度</li><li>第二个值表示高度</li><li>如果指定一个值，另一个值就是auto，等比例缩放</li><li>cover 比例不变，将元素铺满</li><li>content 比例不变 图片完整显示</li></ul><p>background-attachment 背景图片是否跟随元素滚动</p><ul><li>scroll 背景图片跟随元素移动</li><li>fixed 背景图片会固定在页面中</li></ul><p>background 所有上述相关属性都可以设置 没顺序 但是origin在clip前面,background-size和background-positiom顺序为size/position 没有size不能写position</p><h2 id="8-6-渐变"><a href="#8-6-渐变" class="headerlink" title="8.6 渐变"></a>8.6 渐变</h2><p>通过设置渐变可以实现很多复杂的背景颜色可以从一个颜色向另一个颜色变化</p><p><strong>渐变是图片，通过background-image设置</strong></p><p><strong>线性渐变</strong>，颜色沿着直线变化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span>,<span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure><p>红色在开头，黄色在结尾</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>,<span class="selector-tag">red</span>,<span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure><p>前面加to指定渐变的方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>,<span class="selector-tag">red</span>,<span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure><p>直接指定旋转度数 例如 25deg 0.2turn(0.25圈)</p><p>渐变可以指定多种颜色，每种颜色默认情况下平均分配</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>,<span class="selector-tag">red</span> 50<span class="selector-tag">px</span>,<span class="selector-tag">yellow</span>,<span class="selector-id">#bfa</span>,<span class="selector-tag">orange</span>);</span><br></pre></td></tr></table></figure><p>表示红色是c从50px开始，之前的就是纯红色</p><p><strong>径向渐变</strong>: radial-gradient<br>    默认情况下径向渐变的形状是根据元素形状变化的</p><ul><li>正方形-&gt;圆</li><li>长方形-&gt;椭圆形</li><li>可以手动指定圆心的大小与位置<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(100<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>,<span class="selector-tag">red</span>,<span class="selector-tag">yellow</span>);</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(100<span class="selector-tag">px</span> 100<span class="selector-tag">px</span> <span class="selector-tag">at</span> 0 0,<span class="selector-tag">red</span>,<span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure></li><li>可以这只重复<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-radial-gradient</span>(100<span class="selector-tag">px</span> 100<span class="selector-tag">px</span>,<span class="selector-tag">red</span>,<span class="selector-tag">yellow</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">此版为纯知识点无练习笔记版本，来自尚硅谷2019李立超版</summary>
    
    
    
    <category term="前端" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML&amp;CSS" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/HTML-CSS/"/>
    
    
    <category term="前端" scheme="http://liukairui.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="http://liukairui.cc/tags/HTML/"/>
    
    <category term="笔记" scheme="http://liukairui.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://liukairui.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>尚硅谷Less学习笔记</title>
    <link href="http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7Less%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liukairui.cc/%E5%B0%9A%E7%A1%85%E8%B0%B7Less%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-30T16:00:18.000Z</published>
    <updated>2020-11-15T18:17:06.503Z</updated>
    
    <content type="html"><![CDATA[<p>Less是一种动态样式语言，属于css预处理器的范畴，他扩展了CSS语言，增加了变量、mixin、函数的等特性，使css更易于维护和扩展<br>Less既可以在客户端运行，也可以借助Node.js在服务端运行</p><h2 id="1-Less的引入"><a href="#1-Less的引入" class="headerlink" title="1. Less的引入"></a>1. Less的引入</h2><p>Less官网提供了服务器端的部署方法，我们不需要，因为 1. 这相当于是再服务器端编译，影响运行 2. 我们用本地环境所以只需要一个编译工具把less编译成css</p><p>可以去less官网下载less.js，这相当于是用js文件对代码进行编译，所以，js的link要写在less代码后面，但是很明显这样的编译是再运行时编译，影响时间。实际上可以使用IDE插件实时编译，这相当于是开发的时候编译，不影响时间</p><h2 id="2-Less基础"><a href="#2-Less基础" class="headerlink" title="2. Less基础"></a>2. Less基础</h2><h3 id="Less中的注释"><a href="#Less中的注释" class="headerlink" title="Less中的注释"></a>Less中的注释</h3><p>以<code>//</code>开头的是单行注释,这种注释在css中没有，所以不会被编译到CSS中</p><p>以<code>/**/</code>包围的是多行注释，和CSS语法一样，会被编译到CSS中</p><h3 id="Less中的变量"><a href="#Less中的变量" class="headerlink" title="Less中的变量"></a>Less中的变量</h3><p>定义变量用<code>@</code>开头，例如</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Col:</span>pink;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是将<strong>属性值作为变量</strong>，还可以将<strong>选择器，属性、字符串的一部分作为变量</strong> 但是使用的时候要这么写<code>@&#123;XXX&#125;</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Col:</span>pink;</span><br><span class="line"><span class="variable">@bgc:</span>background-color;</span><br><span class="line"><span class="variable">@sel:</span>div;</span><br><span class="line"><span class="variable">@&#123;sel&#125;</span>&#123;</span><br><span class="line">    <span class="attribute">@&#123;bgc&#125;</span>:<span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改属性值和声明一样</p><p>Less中的变量都是延迟加载的，Less中的变量都是块级作用域</p><p>例如</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span><span class="number">0</span>;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="variable">@var:</span><span class="number">1</span>;</span><br><span class="line">    <span class="selector-tag">table</span>&#123;</span><br><span class="line">        <span class="variable">@var:</span><span class="number">2</span>;</span><br><span class="line">        <span class="attribute">left</span>:<span class="variable">@var</span>;</span><br><span class="line">        <span class="variable">@var:</span><span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">right</span>:<span class="variable">@var</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先变量是<strong>块级作用域</strong>，所以<code>right</code>的值是不受<code>table</code>内部的修改而影响，为1</p><p>然后变量是<strong>延迟加载</strong>的，所以编译器在看到<code>left:@var;</code>直接计算替换，而是把一个块跑完得到<code>@var:3</code>然后载进行替换的，所以left为3</p><h3 id="Less中的嵌套规则"><a href="#Less中的嵌套规则" class="headerlink" title="Less中的嵌套规则"></a>Less中的嵌套规则</h3><p>我们有时需要对变量的某些状态进行设置例如<code>div:hover</code> 这个时候根据嵌套的思想，应该写成</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是编译不出来，编译器会认为这里的<code>:hover</code>是一个选择器，所以css会显示为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多了一个空格导致了编译失败，我们不希望有这个空格，我们不希望他是层级关系，要加上一个<code>&amp;</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样空格就会消失，这里的<code>&amp;</code>代表平级</p><h2 id="3-Less中的混合"><a href="#3-Less中的混合" class="headerlink" title="3. Less中的混合"></a>3. Less中的混合</h2><p>当我想为同级元素设置相同的样式的时候我们可以用<code>,</code>并集选择器直接选择，但是对于不同级的，我们希望可以像引入代码块一样直接插入相关代码从而减少冗余代码，这时就用到了混合。</p><h3 id="普通混合"><a href="#普通混合" class="headerlink" title="普通混合"></a>普通混合</h3><p>Less中定义混合以点开头，和CSS写类一样，调用直接写上去</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cent</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="selector-class">.inner1</span>&#123;</span><br><span class="line">        <span class="selector-class">.cent</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.inner2</span>&#123;</span><br><span class="line">        <span class="selector-class">.cent</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的原理<strong>相当于编译器进行了字符串替换</strong>，并且上文中<code>.cent</code>的内容也被原样编译到了CSS中，这时我们不想看到的</p><p>解决方法就是把<code>.cent</code>改为<code>.cent()</code>，这样CSS就不会编译.cent</p><ul><li>我们称<code>.cent</code>的写法为<strong>普通混合</strong>，混合也会被编译到css文件中</li></ul><h3 id="不带参数混合"><a href="#不带参数混合" class="headerlink" title="不带参数混合"></a>不带参数混合</h3><ul><li>我们称<code>.cent()</code>的写法为<strong>不带参数混合</strong>，混合不会被编译到css文件中</li></ul><h3 id="带参数的混合"><a href="#带参数的混合" class="headerlink" title="带参数的混合"></a>带参数的混合</h3><p>我们希望我们的混合可以提供一个API,例如我们像做一个居中后偏左x个px的一个混合，我们可以这样定义这个混合</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cont-left</span>(<span class="variable">@off-set</span>)&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">transform</span>: translateX(-<span class="variable">@off-set</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="selector-class">.cont-left</span>(<span class="number">10px</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们调用混合的时候输入10px就会居中，左移10px,看起来有点像函数，但是就是叫做混合</p><ul><li>我们称<code>.cont-left(@off-set)</code>的写法为<strong>带参数的混合</strong>，混合不会被编译</li></ul><h3 id="带默认参数的混合"><a href="#带默认参数的混合" class="headerlink" title="带默认参数的混合"></a>带默认参数的混合</h3><p>带参数的混合接受默认参数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_mixin1</span>(<span class="variable">@a</span>,<span class="variable">@b</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="selector-tag">my_mixin1</span>();</span><br><span class="line">    <span class="selector-tag">my_mixin1</span>(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，两种调用都是非法的，必须是形残和实参数目相同，当然可以设置默认值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_mixin1</span>(<span class="variable">@a</span>,<span class="variable">@b</span>:<span class="number">1px</span>,<span class="variable">@c</span>:<span class="number">2px</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="selector-tag">my_mixin1</span>();</span><br><span class="line">    <span class="selector-tag">my_mixin1</span>(<span class="number">5px</span>);</span><br><span class="line">    <span class="selector-tag">my_mixin1</span>(<span class="number">5px</span>,<span class="number">6px</span>);</span><br><span class="line">    <span class="selector-tag">my_mixin1</span>(<span class="number">5px</span>,<span class="number">6px</span>,<span class="number">7px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们给<code>@b</code>与<code>@c</code>默认值为1和2,<code>@a</code>没给，所以第一个调用非法，第二个把5给了<code>@a</code>,第三个<code>a=5,b=6,c=2</code>，第四个直接分配，其冲突处理规则与C语言的默认参数处理规则相同,也可以在调用的时候制定赋值给的参数，与C语言相同</p><ul><li>以上我们称之为<strong>带默认参数的混合</strong></li></ul><h3 id="命名参数匹配"><a href="#命名参数匹配" class="headerlink" title="命名参数匹配"></a>命名参数匹配</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_mixin1</span>(<span class="variable">@a</span>,<span class="variable">@b</span>:<span class="number">1px</span>,<span class="variable">@c</span>:<span class="number">2px</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="selector-tag">my_mixin1</span>(<span class="variable">@a</span>:<span class="number">5px</span>,<span class="variable">@c</span>:<span class="number">6px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到<code>a=5,b=1,c=2</code></p><ul><li>以上我们称之为<strong>命名参数匹配</strong></li></ul><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>我们希望实现同一个功能，但是有略有差别，我们希望传的参数尽可能少。类似于C++中的多态</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mixin_com</span>()&#123;</span><br><span class="line">    ...<span class="comment">// sth common</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">mixin</span>(L,<span class="variable">@a</span>,<span class="variable">@b</span>)&#123;</span><br><span class="line">    <span class="selector-class">.mixin_com</span>();</span><br><span class="line">    ...<span class="comment">// sth special</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">mixin</span>(R,<span class="variable">@a</span>,<span class="variable">@b</span>)&#123;</span><br><span class="line">    <span class="selector-class">.mixin_com</span>();</span><br><span class="line">    ...<span class="comment">// sth special</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="selector-tag">mixin</span>(L,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="selector-tag">mixin</span>(R,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以继续优化我们的写法，使用同名无匹配模式开头为<code>@_</code>可以实现在调用任何一个多态的时候顺便调用他</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mixin</span>(<span class="variable">@_</span>)&#123;</span><br><span class="line">    ...<span class="comment">// sth common</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">mixin</span>(L,<span class="variable">@a</span>,<span class="variable">@b</span>)&#123;</span><br><span class="line">    ...<span class="comment">// sth special</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">mixin</span>(R,<span class="variable">@a</span>,<span class="variable">@b</span>)&#123;</span><br><span class="line">    ...<span class="comment">// sth special</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="selector-tag">mixin</span>(L,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="selector-tag">mixin</span>(R,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，<code>@_</code>后面可以加参数，如下代码，我们可以把<code>@_</code>理解为占位符</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(S,<span class="variable">@h</span>,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">border</span>:solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span>(D,<span class="variable">@h</span>,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">border</span>:double;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@_</span>,<span class="variable">@h</span>,<span class="variable">@w</span>,<span class="variable">@c</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@c</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="selector-class">.mixin</span>(D,<span class="number">100px</span>,<span class="number">100px</span>,<span class="number">#bfa</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arguments变量"><a href="#Arguments变量" class="headerlink" title="Arguments变量"></a>Arguments变量</h3><p>类似于Python的列表传参,带白哦全体实参列表</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myb</span>(<span class="variable">@1</span>,<span class="variable">@2</span>,<span class="variable">@3</span>)&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="selector-class">.myb</span>(<span class="number">1px</span>,solid,red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Less的计算"><a href="#4-Less的计算" class="headerlink" title="4. Less的计算"></a>4. Less的计算</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:(<span class="number">100px</span>+<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上计算是可以的，只需要计算双方一方有单位即可</p><h2 id="5-Less的继承"><a href="#5-Less的继承" class="headerlink" title="5. Less的继承"></a>5. Less的继承</h2><p>在写less过程中，如果写成</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div1</span>&#123;</span><br><span class="line">    <span class="selector-class">.mixin</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div2</span>&#123;</span><br><span class="line">    <span class="selector-class">.mixin</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的结果将会是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div1</span>&#123;</span><br><span class="line">    ... // .mixin()的全文复制下来</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div2</span>&#123;</span><br><span class="line">    ... // .mixin()的全文复制下来</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样<code>.mixin</code>内容被复制了两次，是一种低效的写法，如果编译为如下就更好了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div1</span>,<span class="selector-tag">div2</span>&#123;</span><br><span class="line">    ... // .mixin()的全文复制下来</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div1</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div2</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要实现如上的效果需要将less写成<strong>继承</strong>的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.mixin()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div1:extend(.mixin)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div2:extend(.mixin)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明显可以看出<strong>继承</strong>的效率比混合高，但是灵活性差，不能传递参数</p><p>在编译过程中，内部处理很简单</p><ul><li>找到相同<code>extend</code>的选择器</li><li>用<code>,</code>隔开，写在一起</li><li>应用extend的样式</li></ul><p>更优秀的代码风格应该是</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div1</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mixin)</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div2</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mixin)</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但存在问题，如果代码写成如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span><span class="selector-pseudo">:hover()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div1</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mixin)</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div2</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mixin)</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个div是不继承<code>hover</code>的属性的，只需加上一个<code>all</code>表示全部继承</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>()&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span><span class="selector-pseudo">:hover()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div1</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mixin</span> <span class="keyword">all</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div2</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mixin</span> <span class="keyword">all</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-避免编译"><a href="#5-避免编译" class="headerlink" title="5.避免编译"></a>5.避免编译</h2><p>我们如果写下面的Less代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10</span>*<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: cacl(<span class="number">10</span>*<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="built_in">cacl</span>(<span class="number">1000px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cacl()</code>是css的计算函数，但是被less给算了，我们不想让less做，希望编译成如下样式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: cacl(<span class="number">10</span>*<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是让<code>10*100px</code><strong>避免编译</strong>,要求原样输出，只要把需要的部分加上<code>～&quot;&quot;</code>,也就是</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10</span>*<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="string">~&quot;cacl(10*100px)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p.s. IE6有一个与BFC类似的模式，一旦出现兼容性问题首先考虑开启他，放法是<code>overflow:hidden</code></p>]]></content>
    
    
    <summary type="html">Less是一种动态样式语言，属于css预处理器的范畴，他扩展了CSS语言，增加了变量、mixin、函数的等特性，使css更易于维护和扩展 Less既可以在客户端运行，也可以借助Node.js在服务端运行</summary>
    
    
    
    <category term="前端" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS预处理器" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    <category term="Less" scheme="http://liukairui.cc/categories/%E5%89%8D%E7%AB%AF/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/Less/"/>
    
    
    <category term="前端" scheme="http://liukairui.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="笔记" scheme="http://liukairui.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CSS" scheme="http://liukairui.cc/tags/CSS/"/>
    
    <category term="CSS预处理器" scheme="http://liukairui.cc/tags/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    <category term="Less" scheme="http://liukairui.cc/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro - KDE - i3wm - PolyBar 使用配置全指南</title>
    <link href="http://liukairui.cc/Manjaro-KDE-i3wm-PolyBar%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E5%85%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://liukairui.cc/Manjaro-KDE-i3wm-PolyBar%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E5%85%A8%E6%8C%87%E5%8D%97/</id>
    <published>2020-10-30T16:00:17.000Z</published>
    <updated>2020-11-15T18:50:33.626Z</updated>
    
    <content type="html"><![CDATA[<p>==本文全部内容几乎没有作者原创，全文为多篇带佬文章拼接而成，作以备份，勿喷!!!==</p><h1 id="0-安装之前的准备"><a href="#0-安装之前的准备" class="headerlink" title="0. 安装之前的准备"></a>0. 安装之前的准备</h1><p>需要一个U盘以及一个能制作启动盘的电脑。<br><strong>如果您准备搞双系统或者准备重装双系统，请先阅读最后一节 4. 优雅的清除Manjaro(双系统用户)</strong></p><h1 id="1-Manjaro-KDE的安装"><a href="#1-Manjaro-KDE的安装" class="headerlink" title="1.Manjaro-KDE的安装"></a>1.Manjaro-KDE的安装</h1><blockquote><p>1.1-1.8的绝大部分内容来自<a href="https://zhuanlan.zhihu.com/p/114296129">知乎文章</a></p></blockquote><p>==想要获得更好的阅读体验，可以查看知乎原文，但是在转载的时候进行了修改，建议两边都阅读==</p><p>Manjaro是当前Linux发行版排名第一(第二??)的系统，而KDE是一个可玩性比较高的桌面。<br>去manjaro官网下载系统，官方提供三种桌面环境，笔者都体验过，目前觉得KDE最合心意，功能最多，用起来也最顺手，对新手也友好，推荐各位使用。<br><strong>Xfce桌面</strong>是最为轻量的官方版本，系统占用很小，你可以尝试给家里面的老电脑装一个xfce，但是缺点也很明显，桌面可定制性最差，一开始我装的就是xfce，然后因为它的环境太简陋了，所以就转向了KDE<br><strong>KDE</strong>是三者之中可玩性最高，功能最强大的桌面环境，系统占用也不大，对于各位的主力机来说，我觉得这个大可不必在意。<br><strong>Gnome</strong>：3.36以后的Gnome功能加了好多，但还是老问题：各种各样的扩展导致桌面不稳定，不建议入手Gnome版本，就算你是Gnome老用户，我还是强烈建议你使用KDE<br><strong>注意</strong>：这里只针对Manjaro定制的Gnome，并不是所有发行版的Gnome都这样<br>另外DDE之前我做过推荐，但是DDE对于WiFi的支持太差，不建议使用</p><h2 id="1-1-下载系统"><a href="#1-1-下载系统" class="headerlink" title="1.1 下载系统"></a>1.1 下载系统</h2><p>去<a href="https://manjaro.org/">Manjaro官网</a>下载系统：选择”Try Manjaro download”，选择橙色按钮 “Get KDE Plasma   20.0.3” 下载即可</p><h2 id="1-2-制作启动U盘"><a href="#1-2-制作启动U盘" class="headerlink" title="1.2 制作启动U盘"></a>1.2 制作启动U盘</h2><p>下载iso文件之后，使用 rufus 将其写入到U盘中，网上比较旧的攻略会有dd模式写入的说法，现在没有这个选项了，直接写入就可以，注意写入之后你的U盘可见空间会变为几MB，莫惊慌<br><img data-src="https://img-blog.csdnimg.cn/20200817164948557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>关于恢复U盘空间的方法</strong><br>当然这样U盘里的Manjaro安装文件就没了。右键”计算机” - 管理 - 存储磁盘 - 找到你的U盘 - 对所有的分区(方块)右键 - 删除卷 - 最后得到一个叫做为分配的黑色块 - 右键 - 新建简单卷 - 一路下一步即可</p><h2 id="1-3-安装系统前的BIOS设置"><a href="#1-3-安装系统前的BIOS设置" class="headerlink" title="1.3  安装系统前的BIOS设置"></a>1.3  安装系统前的BIOS设置</h2><p>插入U盘 - 重启 - 进入BIOS界面 - 关闭Secure Boot和Lanuch CSM(有选项就关闭，没有就不管) - 选择U盘第一启动顺序</p><h2 id="1-4-正式安装系统"><a href="#1-4-正式安装系统" class="headerlink" title="1.4 正式安装系统"></a>1.4 正式安装系统</h2><p>从U盘启动后会看到如下界面<br><img data-src="https://img-blog.csdnimg.cn/20200817170249466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>选择lang - 去最下面找中文 - 然后选 zh-cn(简体中文)</li><li>选择driver - 如果你的电脑是Nvida的独显，那么选择nonfree(使用闭源驱动)，其余选择free (如果你确定你选择的是对的还是进不去系统，考虑是主板的ACPI问题，例如神船笔记本的1050系列卡，大厂的一般没问题)</li><li>选择boot然后进入一个临时的桌面，由于国内网络条件不好，请断网，选择安装<br><img data-src="https://img-blog.csdnimg.cn/20200817170845274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在时间设置中选择亚洲 - 上海，键盘默认，到分区之后选择手动分区，如图<br><img data-src="https://img-blog.csdnimg.cn/20200817171956901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200817170936704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><ul><li><p>对于 Windows+Linux 双系统而且双系统共用一个盘，选择Windows的EFI分区(一般是你看到的磁盘列表第一个，FAT分区，100-300MB大小的) - 右键 - ==不要改大小== - ==<strong>内容选择保留</strong>== - <strong>==挂载点选择/boot/EFI==</strong> - ==<strong>标记选择boot</strong>==</p></li><li><p>对于 Windows+Linux 双系统而且双系统分别在两个盘的，选择Windows所在硬盘，选择的EFI分区(一般是你看到的磁盘列表第一个，FAT分区，100-300MB大小的) - 右键 - ==不要改大小== - ==<strong>内容选择保留</strong>== - <strong>==挂载点选择/boot/EFI==</strong> - ==<strong>标记选择boot</strong>==，再切换到装Linux的盘中，选择新建分区表，新建的时候选择gpt分区<br><img data-src="https://img-blog.csdnimg.cn/20200817172049285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>会显示一个空闲分区</p></li><li><p>对于单系统用户，不用管</p></li></ul><p>之后进行正式分区操作(选择空闲分区 - 创建)</p><ol><li><p>boot分区，2G(确实是大了)<br><img data-src="https://img-blog.csdnimg.cn/20200817172134433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>创建根分区，10-20G<br><img data-src="https://img-blog.csdnimg.cn/20200817172210201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>创建交换分区，如图，挂载点必须是linuxswap<br><img data-src="https://img-blog.csdnimg.cn/20200817172254861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>交换分区大小如下</p><table><thead><tr><th>物理内存</th><th>交换分区</th></tr></thead><tbody><tr><td>&lt;= 4G</td><td>至少4G</td></tr><tr><td>4~16G</td><td>至少8G</td></tr><tr><td>16G~64G</td><td>至少16G</td></tr><tr><td>64G~256G</td><td>至少32G</td></tr></tbody></table></li><li><p>创建home，大小就是剩下的全部空间(但是还是建议留下来一点空闲)<br><img data-src="https://img-blog.csdnimg.cn/20200817173310231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择下一步，创建用户与密码，下一步，选择第一个，不要预装办公套件 -下一步 - 安装 - 完成后勾选重启 - 重启进入系统</p></li></ol><h2 id="1-5-换源"><a href="#1-5-换源" class="headerlink" title="1.5 换源"></a>1.5 换源</h2><ol><li><p>换pacman<br>F12 打开下拉终端，复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><p>用<code>Ctrl+Shift+V</code> 粘贴，运行，看到又一个延迟，找到最低的，然后子啊弹出框只勾选哪一个，选多了会降低速度(如果有几个差不多的，优先选稳定的企业源例如huawei的那个)</p></li><li><p>换ArchLinuxCN源，这里推荐中科大的，清华的翻车过一次<br>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>用键盘向下，在文末添加</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>然后<code>Ctrl+X</code>退出，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syyu &amp;&amp; sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><p>更新系统，==<strong>重启</strong>==</p><h2 id="1-6-安装软件"><a href="#1-6-安装软件" class="headerlink" title="1.6 安装软件"></a>1.6 安装软件</h2><p> 安装软件可以使用进入系统后左下角manjaro菜单中的<code>添加/删除软件</code>这实际上是Pacman的，但是还是建议再装两个(你可以理解为应用商店)<code>yay</code>和<code>yaourt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yay</span><br><span class="line">pacman -S yaourt</span><br></pre></td></tr></table></figure><h3 id="1-6-1-中文输入法"><a href="#1-6-1-中文输入法" class="headerlink" title="1.6.1 中文输入法"></a>1.6.1 中文输入法</h3><p>尝试过搜狗，百度，谷歌拼音，rime<br>前两个严格按照规则安装失败了，于是推荐谷歌拼音和rime<br>首先要知道Mangaro下有两个知名的输入法管理工具<code>fcitx</code>和<code>Ibus</code>，我推荐用<code>ibus</code>，但是还是建议配置好<code>fcitx</code>作为备用</p><ol><li>安装谷歌拼音</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S fcitx-im kcm-fcitx fcitx-googlepinyin</span><br></pre></td></tr></table></figure><p>新建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano ~/.xprofile</span><br></pre></td></tr></table></figure><p>输入内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用ibus下的rime</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo  pacman -S ibus</span><br><span class="line">sudo yay -S ibus-qt</span><br><span class="line">sudo pacman -S  ibus-rime</span><br></pre></td></tr></table></figure><p>添加配置文件 ~/.xprofile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=ibus</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=ibus</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=ibus</span><br><span class="line">ibus-daemon -d -x</span><br></pre></td></tr></table></figure><p>重启 - 右键输入法 - 首选项 - 自己修改快捷键 - 排列选择排列方向:水平 - 选择输入法标签 - 添加 - 中文 - Rime - 添加 - 重启 - 随便找个地方切换到Rime输入，会发现候选词有中文，<code>Ctrl+~</code>,选择明月拼音[简化字]<br><strong>完事</strong></p><ol><li><a href="https://sspai.com/post/55699">Rime 详细配置</a><br>之后，你可以<a href="https://www.jianshu.com/p/300bbe1602d4">为rime导入搜狗词库</a>(我准备自己养词库)<h3 id="1-6-2-安装与配置zsh"><a href="#1-6-2-安装与配置zsh" class="headerlink" title="1.6.2 安装与配置zsh"></a>1.6.2 安装与配置zsh</h3></li></ol><blockquote><p>zsh原称为Z Shell。也是一种shell，兼容最常用的bash这种shell的命令和操作，并且有很多增强，超强的订制性。查来查去，bash虽然很标准，但是自己日常的话还是不要太偏执，力求简单方便的工具更好，所以就玩弄起了zsh。超漂亮又简单,也很好上手。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zsh</span><br></pre></td></tr></table></figure><p>切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><p>之后因为需要链接github于是先修改hosts<br>打开hosts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/hosts</span><br></pre></td></tr></table></figure><p>把这段话复制到下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub Start</span></span><br><span class="line">151.101.76.133 raw.githubusercontent.com</span><br><span class="line"><span class="comment"># GitHub End</span></span><br></pre></td></tr></table></figure><h4 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h4><p>(失败重新输入命令)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>安装插件<code>autojump</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S autojump</span><br></pre></td></tr></table></figure><p>安装<code>zsh-syntax-highlighting</code>：提供命令高亮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>安装autosuggestions：记住你之前使用过的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>安装incr：再也不用先ls在粘贴文件名了，看下效果：<br><img data-src="https://img-blog.csdnimg.cn/20200817180735670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>去<a href="https://mimosa-pudica.net/zsh-incremental.html">incr官方</a>网站下载，假设保存在了~目录下，接着执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.oh-my-zsh/custom/plugins/incr</span><br><span class="line">mv ~/incr-0.2.zsh ~/.oh-my-zsh/custom/plugins/incr</span><br></pre></td></tr></table></figure><p>安装thefuck：帮你更加高效地学习linux命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --user thefuck</span><br></pre></td></tr></table></figure><p>输错命令不要慌，输入fuck即可帮你更正<br><img data-src="https://img-blog.csdnimg.cn/20200817180923140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>如果下载太慢：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">nano ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>写入如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>这样就永久地修改了用户级别的pip下载源<br><strong>启用所有插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.zshrc</span><br></pre></td></tr></table></figure><p>将<code>plugins=(git)</code>改为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git zsh-syntax-highlighting zsh-autosuggestions sudo extract autojump)</span><br></pre></td></tr></table></figure><p>这个sudo是oh-my-zsh自带的插件，功能是在你输入的命令的开头添加sudo ，方法是双击Esc<br>extract也是自带插件，不用再去记不同文件的解压命令，方法是extract +你要解压的文件名<br>在下面那句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br></pre></td></tr></table></figure><p>下面输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.oh-my-zsh/custom/plugins/incr/incr*.zsh</span><br></pre></td></tr></table></figure><p>在文件末尾输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(thefuck --<span class="built_in">alias</span>)</span><br></pre></td></tr></table></figure><p>打开konsole执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>有好多主题，但是我懒，用比较优秀的主题,配置结果如图<br><img data-src="https://img-blog.csdnimg.cn/20200817181553839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li><a href="https://github.com/romkatv/powerlevel10k#manual-font-installation">点此</a>进入项目的readme，会自动跳转到字体下载小节，下载安装四个字体，打开Konsle - 设置 - 编辑配置方案 - 外观 - 字体 - 选择 - MesloLGS NF</li><li><a href="https://github.com/romkatv/powerlevel10k#oh-my-zsh">点此</a>进入项目的readme，会自动跳转到安装小节，当然我复制了一份<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano ~/.zshrc</span><br></pre></td></tr></table></figure>找到<code>Set ZSH_THEME</code>,修改为<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br></pre></td></tr></table></figure>重启终端会进入配置界面，如果没有进入就或者想重新配置可以输入<code>p10k configure</code><br>想要半透明？ Konsle - 设置 - 编辑配置方案 - 外观 - 获取新的… - 搜索下载 nordic 应用</li></ol><h3 id="1-6-3-安装Vim"><a href="#1-6-3-安装Vim" class="headerlink" title="1.6.3 安装Vim"></a>1.6.3 安装Vim</h3><p>详见<a href="https://blog.csdn.net/Liukairui/article/details/107392243">这篇文章</a>，太长了放不下</p><h3 id="1-6-4-安装Tim-似乎QQ很不好用"><a href="#1-6-4-安装Tim-似乎QQ很不好用" class="headerlink" title="1.6.4 安装Tim(似乎QQ很不好用)"></a>1.6.4 安装Tim(似乎QQ很不好用)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S deepin-wine-tim</span><br></pre></td></tr></table></figure><p>安装过程中出现选择输入n就好<br>为了让tim能接收到图片，需要禁用ipv6<br>手动禁用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo 1 &gt;&gt; /proc/sys/net/ipv6/conf/wlp3s0/disable_ipv6&#x27;</span></span><br></pre></td></tr></table></figure><p>开机禁用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet splash&quot;</span></span><br></pre></td></tr></table></figure><p>为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;ipv6.disable=1 quiet  splash&quot;</span></span><br></pre></td></tr></table></figure><p>自动切换deepin-wine环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /opt/deepinwine/apps/Deepin-Tim/run.sh -d</span><br></pre></td></tr></table></figure><h3 id="1-6-5-安装微信"><a href="#1-6-5-安装微信" class="headerlink" title="1.6.5 安装微信"></a>1.6.5 安装微信</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S deepin-wine-wechat</span><br></pre></td></tr></table></figure><h3 id="1-6-6-安装终端文件浏览器Ranger"><a href="#1-6-6-安装终端文件浏览器Ranger" class="headerlink" title="1.6.6 安装终端文件浏览器Ranger"></a>1.6.6 安装终端文件浏览器Ranger</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S ranger</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200817182558374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="1-6-7-wps中文版"><a href="#1-6-7-wps中文版" class="headerlink" title="1.6.7 wps中文版"></a>1.6.7 wps中文版</h3><p>想要英文版把后面那个包去掉（不建议用wps，经常性卡死）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S wps-office wps-office-mui-zh-cn</span><br></pre></td></tr></table></figure><h3 id="1-6-8-libreoffice"><a href="#1-6-8-libreoffice" class="headerlink" title="1.6.8 libreoffice"></a>1.6.8 libreoffice</h3><p>如果你安装时没有装的话（建议）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S libreoffice</span><br></pre></td></tr></table></figure><p>其下libreoffice-fresh相当于是beta版，libreoffice-still相当于是stable版</p><h3 id="1-6-9-网易云音乐"><a href="#1-6-9-网易云音乐" class="headerlink" title="1.6.9 网易云音乐"></a>1.6.9 网易云音乐</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S netease-cloud-music</span><br></pre></td></tr></table></figure><h3 id="1-6-10-chrome"><a href="#1-6-10-chrome" class="headerlink" title="1.6.10 chrome"></a>1.6.10 chrome</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S google-chrome</span><br></pre></td></tr></table></figure><p>打开后右键浏览器标签栏，取消选择使用系统栏和边框</p><h3 id="1-6-11-百度网盘"><a href="#1-6-11-百度网盘" class="headerlink" title="1.6.11 百度网盘"></a>1.6.11 百度网盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S baidunetdisk</span><br></pre></td></tr></table></figure><h3 id="1-6-12-Typora"><a href="#1-6-12-Typora" class="headerlink" title="1.6.12 Typora"></a>1.6.12 Typora</h3><p>最舒适的md编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S typora</span><br></pre></td></tr></table></figure><h3 id="1-6-13-flameshot"><a href="#1-6-13-flameshot" class="headerlink" title="1.6.13 flameshot"></a>1.6.13 flameshot</h3><p>最强大的截图工具 当你的tim/微信截图不好用的时候，用这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S flameshot</span><br></pre></td></tr></table></figure><h3 id="1-6-14-timeshift"><a href="#1-6-14-timeshift" class="headerlink" title="1.6.14 timeshift"></a>1.6.14 timeshift</h3><p>强大好用的备份、回滚系统工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S timeshift</span><br></pre></td></tr></table></figure><h3 id="1-6-15-vscode"><a href="#1-6-15-vscode" class="headerlink" title="1.6.15 vscode"></a>1.6.15 vscode</h3><p>去<code>添加/删除应用</code>找到<code>code-insiders</code>,安装</p><p><strong>还有一个软件见原文，不敢转，</strong><a href="https://zhuanlan.zhihu.com/p/114296129">这里</a>第9节</p><h2 id="1-7-安装KDE主题等"><a href="#1-7-安装KDE主题等" class="headerlink" title="1.7 安装KDE主题等"></a>1.7 安装KDE主题等</h2><p>如果在安装主题的时候下载<strong>特别慢</strong>，方法是：<br>首先换成联通或者电信的网络，<br>去<code>添加/删除应用</code>找到<code>ocs-url</code>,安装<br>去<a href="https://store.kde.org/browse">这里</a>找主题，选择Install而不是Download<br><img data-src="https://img-blog.csdnimg.cn/20200817184318787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择Install，会打开ocs-url自动下载<br>p.s.还有<a href="https://www.reddit.com/r/kde/comments/8g97n7/how_to_add_themes_from_httpsstorekdeorg/">一种方法</a>，但是我从来没成功过</p><h2 id="1-8-美化桌面"><a href="#1-8-美化桌面" class="headerlink" title="1.8 美化桌面"></a>1.8 美化桌面</h2><p>效果如图<img data-src="https://img-blog.csdnimg.cn/20200817184655904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>壁纸自己换</li><li>安装latte-dock<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S latte-dock</span><br></pre></td></tr></table></figure>添加一个新空面板，默认会出现在上面，然后删除下面这个面板<br>在新面板上添加必要的部件：应用程序面板，数字时钟，托盘图标<br>还可以加全局菜单，显示面板等等<br><img data-src="https://img-blog.csdnimg.cn/20200817184812508.png#pic_center" alt="在这里插入图片描述"><br>启动latte-dock，下方就会出现一个dock栏，具体配置看自己爱好<br>移除那个时钟的方法：<br>右键 配置lattedock 然后右键 那个时钟 移除 就好了<br>进入设置-外观中选择你喜欢的主题什么的安装并且应用即可<br>设置-工作空间行为-桌面特效 中可以启用一些华丽的特效<br>设置-开机和关机 中更改登录屏幕等效果<br>在设置-工作空间行为-常规行为-点击行为 中改掉单击打开文件/文件夹的设置<br><img data-src="https://img-blog.csdnimg.cn/20200817184838890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>修改~下的用户文件夹名称为英文：<br>先去手动修改文件夹名称，然后在 设置 -&gt; 应用程序 -&gt; 地点 这修改<h2 id="1-9-KDE下的其他配置"><a href="#1-9-KDE下的其他配置" class="headerlink" title="1.9 KDE下的其他配置"></a>1.9 KDE下的其他配置</h2><h3 id="1-9-1-遇到-要解锁，请输入默认密钥环的密码"><a href="#1-9-1-遇到-要解锁，请输入默认密钥环的密码" class="headerlink" title="1.9.1 遇到 要解锁，请输入默认密钥环的密码"></a>1.9.1 遇到 要解锁，请输入默认密钥环的密码</h3><code>添加/删除应用</code>搜索<code>seahorse</code><br>终端输入<code>seahorse</code>，选择返回(左上角第二个)<br><img data-src="https://img-blog.csdnimg.cn/20200817190919831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>右键默认密钥环，更改密码，先输入老密码，新密码不写，确认即可<br><img data-src="https://img-blog.csdnimg.cn/20200817191412589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>相关阅读：</li><li><a href="https://blog.csdn.net/weixin_44405279/article/details/104123282">manjaro pacman及其数字签名问题解决</a></li><li><a href="https://www.cnblogs.com/zenPger/archive/2011/05/25/2057188.html">“要解锁，请输入默认密钥环的密码”的解决办法</a></li></ol><h3 id="1-9-2-输入密码的时候显示密码"><a href="#1-9-2-输入密码的时候显示密码" class="headerlink" title="1.9.2 输入密码的时候显示密码"></a>1.9.2 输入密码的时候显示密码</h3><p>效果<br><img data-src="https://img-blog.csdnimg.cn/20200817193711501.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><p>行尾 可添加如下的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defaults pwfeedback</span><br></pre></td></tr></table></figure><p>相关阅读：<br><a href="http://8u.hn.cn/Linuxmingling/13084.html">教你在Linux终端中键入密码时显示星号（*）的办法</a></p><h3 id="1-9-3-快速启动器-Albert"><a href="#1-9-3-快速启动器-Albert" class="headerlink" title="1.9.3 快速启动器 Albert"></a>1.9.3 快速启动器 Albert</h3><p>本来可以用<code>Alt+Space</code>启动但是i3不支持，所以换成这个，<code>添加/删除应用</code>搜索即可</p><h3 id="1-9-4-安装位图图标被禁用"><a href="#1-9-4-安装位图图标被禁用" class="headerlink" title="1.9.4 安装位图图标被禁用"></a>1.9.4 安装位图图标被禁用</h3><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/fonts/conf.d</span><br><span class="line">rm 70-no-bitmaps.conf</span><br><span class="line">ln -s ../conf.avail/70-yes-bitmaps.conf .</span><br><span class="line">fc-cache -f.</span><br></pre></td></tr></table></figure><p>如果还是不行就这个</p><blockquote><p>Try linking to 70-force-bitmaps instead. 70-yes-bitmaps doesn’t seem<br>to have anything in it. (This is taken from your link.) This worked<br>for me on Ubuntu 12.04.</p><p>The process is like this (Added by a user on 14.04)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/fonts/conf.avail/70-force-bitmaps.conf /etc/fonts/conf.d/</span><br><span class="line">sudo unlink /etc/fonts/conf.d/70-no-bitmaps.conf <span class="comment"># For disabling no-bitmap setting</span></span><br></pre></td></tr></table></figure><blockquote><p>Then do this to update settings</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure fontconfig</span><br></pre></td></tr></table></figure><p>相关阅读<br><a href="https://askubuntu.com/questions/1039763/how-to-disable-bitmap-fonts">How to disable bitmap fonts?</a></p><h3 id="1-9-5-截图工具推荐"><a href="#1-9-5-截图工具推荐" class="headerlink" title="1.9.5 截图工具推荐"></a>1.9.5 截图工具推荐</h3><p>深度截图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt deepin-screenshot</span><br></pre></td></tr></table></figure><p>如图设置快捷键，快捷键自选<br><img data-src="https://img-blog.csdnimg.cn/20200817210632557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="1-9-6-显示本机信息命令"><a href="#1-9-6-显示本机信息命令" class="headerlink" title="1.9.6 显示本机信息命令"></a>1.9.6 显示本机信息命令</h3><p><code>添加/删除应用</code>搜索<code>neofetch </code></p><h3 id="1-9-7-切换ESC与CapsLock"><a href="#1-9-7-切换ESC与CapsLock" class="headerlink" title="1.9.7 切换ESC与CapsLock"></a>1.9.7 切换ESC与CapsLock</h3><p>在~/.Xmodmap写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">! Swap caps lock and escape</span><br><span class="line">remove Lock = Caps_Lock</span><br><span class="line">keysym Escape = Caps_Lock</span><br><span class="line">keysym Caps_Lock = Escape</span><br><span class="line">add Lock = Caps_Lock</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> xmodmap ~/.Xmodmap</span><br></pre></td></tr></table></figure><p>可以的话还要加入自启动</p><ol><li><a href="https://blog.csdn.net/tmjdone/article/details/5627239">KDE桌面的方法</a>，当然直接autostart加入.sh即可</li><li>i3wm的方法(后面会用到)<br>~/.config/i3/config写入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> xmodmap ~/.Xmodmap</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-i3wm配置-Polybar的配置"><a href="#2-i3wm配置-Polybar的配置" class="headerlink" title="2. i3wm配置 + Polybar的配置"></a>2. i3wm配置 + Polybar的配置</h1><h2 id="2-1-i3wm-最基本的使用方法"><a href="#2-1-i3wm-最基本的使用方法" class="headerlink" title="2.1 i3wm 最基本的使用方法"></a>2.1 i3wm 最基本的使用方法</h2><p>==想要获得更好的阅读体验，请点击<a href="https://www.jianshu.com/p/b9b644cf528f">链接</a>,我在原文的基础上未做修改==</p><blockquote><p>2.1小节内容转自<a href="https://www.jianshu.com/p/b9b644cf528f">简书</a></p></blockquote><h3 id="2-1-1-默认键位"><a href="#2-1-1-默认键位" class="headerlink" title="2.1.1 默认键位"></a>2.1.1 默认键位</h3><p>给那些“太长不看”的人，以下图片是默认热键。<br>与$mod（Alt）一起按：<br><img data-src="https://img-blog.csdnimg.cn/20200817220611105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>与Shift+$mod一起按：</p><p><img data-src="https://img-blog.csdnimg.cn/20200817220621168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>Alt与Shift+$mod一起按：<br>红色按键是你需要按的修饰键（默认配置），蓝色按键是盲打键位。<br>要注意的是，若是没有配置文件就启动i3,i3-config-wizard    会帮助你创建一个配置文件，键位位置会跟上图所示一样，不管你是什么键盘布局。<br>如果你喜欢上图的设置，可以拒绝 i3-config-wizard的引导，默认以 etc/i3/config 作为配置文件</p><h3 id="2-1-2-使用i3"><a href="#2-1-2-使用i3" class="headerlink" title="2.1.2 使用i3"></a>2.1.2 使用i3</h3><p>贯穿整个使用文档，关键字$mod将当作已配置好的修饰键，修饰键默认为Alt键（Mod1），<br>windows（Mod4）键也是一个受欢迎的替换方案</p><h4 id="2-1-2-1-打开虚拟终端和移动位置"><a href="#2-1-2-1-打开虚拟终端和移动位置" class="headerlink" title="2.1.2.1 打开虚拟终端和移动位置"></a>2.1.2.1 打开虚拟终端和移动位置</h4><p>打开一个新的虚拟终端是非常简单的操作，默认情况下，这个操作的组合键是 $ mod+Enter ,默认配置下是Alt+Enter。按下$mod+Enter,将会打开一个新的虚拟终端，它将占满你屏幕的所有空间。<br><img data-src="https://img-blog.csdnimg.cn/20200817220708270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>如果你现在打开另一个虚拟终端，i3会把屏幕空间一分为二，各占一半。新创建的窗口会被i3放   在已有窗口的旁边（宽屏）或者下面（竖屏）</p><p><img data-src="https://img-blog.csdnimg.cn/20200817220719378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>要在两个终端之间移动焦点，你可以使用vi编辑器风格的方向键。然而，在i3里，盲打键位就是   方向键(vi编辑器里的方向键为了兼容大多数键盘布局，都向左移动了一个键位)。因此，<br>$ mod+j是向左，$ mod+k是向上，$ mod+l是向下，$ mod+;是向右。像上图的情况，用$ mod+k<br>或$ mod+l在两个终端之间切换。当然，你也可以使用箭头方向键。</p><p>现在，你的workspace是按特定方向（默认水平方向）划分（容器里包含两个终端）。你可把   每个window都再分离一次（水平或者垂直），就像workspace一样。“window”指一个容器包含   一个X11窗口（如一个浏览器或者一个终端），“split container”指的是容器包含一个或多个窗口。<br>垂直分割窗口，在创建新窗口前按$mod+v，水平分割窗口，按 $ mod+h。</p><h4 id="2-1-2-2-改变容器布局"><a href="#2-1-2-2-改变容器布局" class="headerlink" title="2.1.2.2 改变容器布局"></a>2.1.2.2 改变容器布局</h4><p>一个split container 可以设置成下面所列出的布局之一。<br><strong>splith/splitv</strong>容器里的每个窗口都获得等量大小的空间。splith 控制每个窗口在彼此的左右方。splitv 控制每个窗口在彼此的上下方。<br><strong>stacking</strong>容器里只显示一个正在活动的窗口。在容器上方得到一个窗口的列表。<br><strong>tabbed</strong>与stacking是一个原理，不过tabbed的窗口列表是单行显示的标签页。<br><strong>切换模式</strong>：$ mod+e打开splith/splitv，$ mod+s打开stacking，$ mod+w打开tabbed<br><img data-src="https://img-blog.csdnimg.cn/2020081722074334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="2-1-2-3-把一个窗口切换到全屏模式"><a href="#2-1-2-3-把一个窗口切换到全屏模式" class="headerlink" title="2.1.2.3 把一个窗口切换到全屏模式"></a>2.1.2.3 把一个窗口切换到全屏模式</h4><p>把一个窗口全屏显示或者退出全屏，按 $ mod+f。<br>在i3里还有全局全屏模式，那么这个窗口将占据所有的显示输出（多屏显示）（配置命令：<br>fullscrren toggle global）</p><h4 id="2-1-2-4-打开其他应用程序"><a href="#2-1-2-4-打开其他应用程序" class="headerlink" title="2.1.2.4 打开其他应用程序"></a>2.1.2.4 打开其他应用程序</h4><p>除了通过终端打开应用程序，你也可以使用dmenu来打开程序，默认情况下通过$mod+d调 出。只需要输入你要打开的应用的名字（或者是名字的一部分），应用必须在$PATH中才能正常打开。<br>另外，如果你有一个需要经常打开的应用，你可以创建一个组合键来直接打开它，细节请看  配置 部分.</p><h4 id="2-1-2-5-关闭窗口"><a href="#2-1-2-5-关闭窗口" class="headerlink" title="2.1.2.5 关闭窗口"></a>2.1.2.5 关闭窗口</h4><p>如果一个程序未提供一个关闭的机制（很多程序都提供了一个关闭方案，Esc键或者一个快捷键，比如Ctrl+w），你可以按$mod+Shift+q 来杀掉这个窗口。对于支持 WM_DELETE 协议的应用程序，它将正确地关闭（保存任何修改或进行其他清理）。如果程序不支持 WM_DELETE 协议。X server 将杀掉这个程序并且之后的动作取决与此程序。</p><h4 id="2-1-2-6-使用WorkSpace"><a href="#2-1-2-6-使用WorkSpace" class="headerlink" title="2.1.2.6 使用WorkSpace"></a>2.1.2.6 使用WorkSpace</h4><p>使用工作空间是分组归类一堆窗口的好方法。默认情况下，你处在第一个workspace,就像i3bar    左下角所指示的一样。要切换到其他workspace，按下$mod+数字键（你要切换到的workspace的数字）。如果工作空间不存在，它将被创建。<br>一个常见的例子是把网页浏览器放在第一workspace，聊天工具放在另一个workspace，还有另   一个你运行的其他软件放在第三个workspace。当然，你可以不必照着做。<br>如果你拥有多个显示屏，在启动时将会在每个屏幕创建一个workspace。如果你打开一个新的<br>workspace，他会绑定到你正在工作的显示屏。当你切换一个在其他  显示屏的workspace时，i3 会把焦点设置到那个显示屏。</p><h4 id="2-1-2-7-移动一个window到另一个workspace"><a href="#2-1-2-7-移动一个window到另一个workspace" class="headerlink" title="2.1.2.7 移动一个window到另一个workspace"></a>2.1.2.7 移动一个window到另一个workspace</h4><p>移动一个窗口到另一个工作空间，按$mod+Shift+目标工作区数字。跟切换workspaces时一样  的情况，如果目标工作空间不存在，它将被创建。</p><h4 id="2-1-2-8-调整容器大小调整容器大小"><a href="#2-1-2-8-调整容器大小调整容器大小" class="headerlink" title="2.1.2.8 调整容器大小调整容器大小"></a>2.1.2.8 调整容器大小调整容器大小</h4><p>最简单的办法是用鼠标：拖拽边框到想要的大小。<br>你也可以定义快捷键来调整，可以看看这个例子，default config–由i3提供</p><h4 id="2-1-2-9-重启"><a href="#2-1-2-9-重启" class="headerlink" title="2.1.2.9 重启"></a>2.1.2.9 重启</h4><p>为了重启i3你可以使用$mod+Shift+r(例如当有一个bug时，恢复到正常状态，或者升级到一个新版本i3)。</p><h4 id="2-1-2-10-退出i3"><a href="#2-1-2-10-退出i3" class="headerlink" title="2.1.2.10 退出i3"></a>2.1.2.10 退出i3</h4><p>不关掉Xserver且利落地退出i3，你可以按$mod+shift+e。通常会有一个对话向你确认是否退出。</p><h4 id="2-1-2-11"><a href="#2-1-2-11" class="headerlink" title="2.1.2.11"></a>2.1.2.11</h4><p>浮动模式是相对于平铺模式的。窗口的位置和大小不是由i3自动管理的，而是由你手工调整。   使用这个模式有违于平铺模式，但是他对一些案例如”Save as”对话窗口，或者toolbar窗口（GIMP或类似的）是有用的。这些窗口通常会设置恰当的提示和默认情况下被打开于浮动模式。<br>你可以通过按$mod+Shift+space来切换一个窗口的浮动模式。通过鼠标拖动标题栏，你可以移   动这个窗口，通过拖动边框，你可以调整窗口大小。你也可以通过使用floating_modifier来操作。另一个调整浮动窗口大小的方法是鼠标右击标题栏并且拖拽。<br>关于用键盘来调整浮动窗口的大小，请看调整大小的绑定模式，由i3提供<br>default config<br>浮动窗口一直处于平铺窗口的上方</p><h3 id="2-1-3-树"><a href="#2-1-3-树" class="headerlink" title="2.1.3 树"></a>2.1.3 树</h3><p>i3保存着所有关于 X11 output 的数据，workspace和窗口布局在里面是树形图的结构。根节点是X11根窗口，随后是X11 putputs，然后是 dock areas 和一个 content container，随后是workspace，最后是window本身。在旧版本的i3，每个workspace有多个list和table，这个方法   的结果是难以使用（真的难），理解和实现。</p><h4 id="2-1-3-1-树是由容器组成的"><a href="#2-1-3-1-树是由容器组成的" class="headerlink" title="2.1.3.1 树是由容器组成的"></a>2.1.3.1 树是由容器组成的</h4><p>我们把树的组件叫做Containers。一个容器可以掌控一个窗口（意思是一个X11     window，你可以真正看到的，使用的，比如说一个浏览器）。另外，Containers可以再包含一个或者多个Containers。一个简单的workspace例子是：当你在单个显示器打开i3时，只有一个workspace，你这时打开了两个终端，你最后得到的树是：</p><p><img data-src="https://img-blog.csdnimg.cn/20200817220800804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200817220809719.png#pic_center" alt="在这里插入图片描述"></p><h4 id="2-1-3-2定位和Split-Containers"><a href="#2-1-3-2定位和Split-Containers" class="headerlink" title="2.1.3.2定位和Split Containers"></a>2.1.3.2定位和Split Containers</h4><p>当以树作为数据结构时，为了构建一个布局，使用所谓的 Split Containers 是很正常的。在i3 里，每个容器都有属于自己的方位（水平，垂直，或者未指定），并且定位取决于上一级容器  的布局（垂直的有splitev和stacking，水平的有splith和tabbed）。所以我们以一个workspace     作为例子，workspace    容器的默认布局是splith(如今很多显示器是宽屏的)。如果你把布局切换成splitv（默认情况下按$mod+v）然后打开两个终端，i3会把你的窗口设置成这个样子：<br><img data-src="https://img-blog.csdnimg.cn/202008172208200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>从version 4开始，i3多了一个有趣的新特性，它能够分割任何东西：让我们假设你现在在<br>workspace里打开了两个终端（以splith布局打开，也就是水平定位）焦点处于右边的终端，现  在你想要要在当前终端下面打开另外一个终端。如果你直接打开新终端，它会被放在最右边而  不是下面。解决办法是按$mod+v用splitv布局来分割容器（要打开Horizontal Split Container， 用$mod+h）。现在你可以在当前终端下面打开一个新终端了：</p><p>你可能已经猜到了：它能够无限分割到下一层。</p><h4 id="2-1-3-3-聚焦于父容器"><a href="#2-1-3-3-聚焦于父容器" class="headerlink" title="2.1.3.3 聚焦于父容器"></a>2.1.3.3 聚焦于父容器</h4><p><code>$mod+a</code><img data-src="https://img-blog.csdnimg.cn/20200817220834802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200817220846341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>我们继续以上图为例。我们在左边有一个终端，右边有两个垂直分布的终端，焦点处在右下角   的终端。当你又打开一个新终端，他会被放在右下角终端的下面。<br>所以说，要怎么把新终端放到右边而不是下面呢，答案是使用focus    parent，它会把焦点转移到当前容器的父容器。在这种情况下，你会把焦点放在水平方向的workspace里的vertical split<br>Container。因此，新窗口会被打开在Vertical Split Container的右边：<br><img data-src="https://img-blog.csdnimg.cn/20200817220900750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="2-1-3-4-隐式容器"><a href="#2-1-3-4-隐式容器" class="headerlink" title="2.1.3.4 隐式容器"></a>2.1.3.4 隐式容器</h4><p>在一些情况下，i3需要隐式地创建一个容器来完成你的命令。<br>一个例子如下：你在单个显示器启用i3，在单个workspace打开3个终端。workspace节点在i3 的layout    tree里，这些终端窗口直属于workspace节点。默认workspace节点的方向设置是水平的。<br>现在你往下移动其中一个终端（$mod+Shift+k by default）。那么workspace节点会被设置成垂直布局，你移动的这个终端就会出现在屏幕的下面并且直属于workspace。一个新的容器被创建，用于容纳另外两个终端。当你切换到tabbed模式，你会注意到这个情况。你最终会得到一个有标签页容器，里面有两个窗口（比如 “H[urxvt firefox]”），还有一个你刚才移动到下面的终端窗口。<br>到这里，真正有趣的事情才刚刚开始;-)。很多东西都非常依赖于你样要的工作环境，所以我们   无法提供一个默认的且合理的配置。<br>虽然没有使用编程语言来进行配置，i3在你希望让窗口管理器怎么做的方面依然保持着灵活的   特性。<br>例如，你可以配置一个绑定用来跳到指定的窗口，可以设置打开指定的应用程序到指定的<br>workspace，可以自动启动某个程序，可以改变i3的配色，还可以设置快捷键来做一些有用的事   情。<br>要改变i3的配置，复制 /etc/i3/config 到 <del>/.i3/config并且用一个文本编辑器来编辑它（或者是复制到</del>/.config/i3/config，如果你喜欢XDG目录方案）<br>第一次启动i3时，i3会引导你创建一个配置文件，你可以告诉向导程序在配置文件里设置Alt<br>（Mod1）或windows（Mod4）键作为辅助按键。当然，创建的配置文件会使用你当前键盘布   局的键盘符号。要启动向导程序，请在终端输入命令i3-config-wizard。<br>请确认你当前并没有~/.i3/config/。否则向导程序将会退出。</p><h3 id="2-1-4-配置i3"><a href="#2-1-4-配置i3" class="headerlink" title="2.1.4 配置i3"></a>2.1.4 配置i3</h3><p>到这里，真正有趣的事情才刚刚开始;-)。很多东西都非常依赖于你样要的工作环境，所以我们   无法提供一个默认的且合理的配置。<br>虽然没有使用编程语言来进行配置，i3在你希望让窗口管理器怎么做的方面依然保持着灵活的   特性。<br>例如，你可以配置一个绑定用来跳到指定的窗口，可以设置打开指定的应用程序到指定的<br>workspace，可以自动启动某个程序，可以改变i3的配色，还可以设置快捷键来做一些有用的事   情。<br>要改变i3的配置，复制 /etc/i3/config 到 <del>/.i3/config并且用一个文本编辑器来编辑它（或者是复制到</del>/.config/i3/config，如果你喜欢XDG目录方案）<br>第一次启动i3时，i3会引导你创建一个配置文件，你可以告诉向导程序在配置文件里设置Alt<br>（Mod1）或windows（Mod4）键作为辅助按键。当然，创建的配置文件会使用你当前键盘布   局的键盘符号。要启动向导程序，请在终端输入命令i3-config-wizard。<br>请确认你当前并没有~/.i3/config/。否则向导程序将会退出。</p><h4 id="2-1-4-1-备注"><a href="#2-1-4-1-备注" class="headerlink" title="2.1.4.1  备注"></a>2.1.4.1  备注</h4><p>在配置文件里使用备注是可行的和推荐的，为了以后参考或修改，适当地记录你的配置。备注   以#开始，而且只能用在每行的开头：<br>例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a comment</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-2-字体"><a href="#2-1-4-2-字体" class="headerlink" title="2.1.4.2 字体"></a>2.1.4.2 字体</h4><p>i3支持以 X core字体和 FreeType 字体来渲染窗口标题<br>你可以使用xfontsel(1) 生成一个 X core字体类型。你需要使用一个支持ISO-10646编码的字体来显示特殊字符（Unicode）。<br>一个FreeType字体类型是由一个字体系列，风格，粗细，便提，伸延组成的，FreeType字体支持从右到左的渲染和往往比 X core字体支持更多的Unicode符号。<br>如果i3不能打开配置好的字体，i3会吧错误输出到日志文件，退回到可以工作的字体<br><strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font &lt;X core font description&gt;</span><br><span class="line">font pango:&lt;family list&gt; [&lt;style options&gt;] &lt;size&gt;</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1</span><br><span class="line">font pango:DejaVu Sans Mono 10</span><br><span class="line">font pango:DejaVu Sans Mono, Terminus Bold Semi-Condensed 11</span><br><span class="line">font pango:Terminus 11px</span><br></pre></td></tr></table></figure><h4 id="2-1-4-3-键盘绑定"><a href="#2-1-4-3-键盘绑定" class="headerlink" title="2.1.4.3 键盘绑定"></a>2.1.4.3 键盘绑定</h4><p>一个键盘绑定会让i3在按下特定的按键后执行一个命令。i3允许以keycode或keysym绑定（你可已随便更改绑定，虽然i3并不会帮你解决键位冲突）<br>Keysym(key symbol)是指键盘上的符号。像是”A”或者”B”，但是像是那些奇怪的”underscore”而不是”_”。这些符号是你们用Xmodmap重新映射的按键。要获得当前键盘的映射，使用命令 xmodmap -pke 。要以交互方式输入一个按键，查看它是被设置成什么keysym，使用命令 xev 。<br>Keycode 不需要拥有一个已赋值符号（方便某些笔记本热键），而且他们即使在你换了键盘布局后，也不会改变keycode本身（当使用xmodmap）。<br>我的建议是：如果你经常更换键盘布局，但是不想改变绑定键位的物理位置，使用keycodes。如果你不改变键盘布局，而且想要一个简单干净的配置文件，使用keysyms。<br>某些工具（例如import或者xdotool）可能无法运行在一些KeyPress事件，因为键盘/指针被占用了。针对这些情况，可以使用 –release 标记,这将在按键被松开后执行命令。<br><strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bindsym [--release] [&lt;Group&gt;+][&lt;Modifiers&gt;+]&lt;keysym&gt; <span class="built_in">command</span></span><br><span class="line">bindcode [--release] [&lt;Group&gt;+][&lt;Modifiers&gt;+]&lt;keycode&gt; <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fullscreen</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+f fullscreen toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restart</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+r restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># Notebook-specific hotkeys</span></span><br><span class="line">bindcode 214 <span class="built_in">exec</span> --no-startup-id /home/michael/toggle_beamer.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Simulate ctrl+v upon pressing $mod+x</span></span><br><span class="line">bindsym --release <span class="variable">$mod</span>+x <span class="built_in">exec</span> --no-startup-id xdotool key --clearmodifiers ctrl+v</span><br><span class="line"></span><br><span class="line"><span class="comment"># Take a screenshot upon pressing $mod+x (select an area)</span></span><br><span class="line">bindsym --release <span class="variable">$mod</span>+x <span class="built_in">exec</span> --no-startup-id import /tmp/latest-screenshot.png</span><br></pre></td></tr></table></figure><p>可以使用的修饰键：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mod1-mod5，Shift，Control</span><br></pre></td></tr></table></figure><p>默认修饰请看 xmodmap（1）<br>Group1, Group2, Group3, Group4<br>当使用多个键盘布局（例如setxkbmap -layout us，ru）时，您可以指定哪个XKB组（也称为“布局”）键盘绑定应处于活动状态。默认的，键盘绑定会被转换成Group1并且活跃在所有键盘布局。如果你想为其中一个键盘布局重写键盘绑定，指定到相应的group。为了向后兼容，“Mode_switch” 是Group2的别名。</p><h4 id="2-1-4-4-鼠标绑定"><a href="#2-1-4-4-鼠标绑定" class="headerlink" title="2.1.4.4 鼠标绑定"></a>2.1.4.4 鼠标绑定</h4><p>在容器范围内按下一个已经绑定的鼠标按键，i3将会执行一个命令。你可以用绑定键盘的方法设置鼠标绑定。</p><p><strong>语法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym [--release] [--border] [--whole-window] [&lt;Modifiers&gt;+]button&lt;n&gt; <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>默认的，绑定只会在点击到标题栏的时候运行。如果添加了–release标记，它会在按键松开时运行。<br>如果添加了–whole-window标记，绑定会在你点击到窗口任何一个部位时运行，但是边框除外。为了让一个绑定在点击到边框时运行，指定一个–border标记。<br><strong>例子:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The middle button over a titlebar kills the window</span></span><br><span class="line">bindsym --release button2 <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The middle button and a modifer over any part of the window kills the window</span></span><br><span class="line">bindsym --whole-window <span class="variable">$mod</span>+button2 <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The right button toggles floating</span></span><br><span class="line">bindsym button3 floating toggle</span><br><span class="line">bindsym <span class="variable">$mod</span>+button3 floating toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># The side buttons move the window around</span></span><br><span class="line">bindsym button9 move left</span><br><span class="line">bindsym button8 move right</span><br></pre></td></tr></table></figure><p><strong>绑定模式</strong><br>你可以拥有多套键位绑定模式，当你切换到其他绑定模式的时候，所有当前键位绑定会被释放，并且只有你新切换的绑定模式生效。唯一的预设的绑定模式是defalut的，他伴随i3的启动，并且没有定义任何指定的绑定模式。<br>使用绑定模式有以下两部分组成:定义一个绑定模式和切换到它。为了做到这个，需要一个配置指令和一个命令，他们被称为mode。配置指令被用来定义一组绑定并且把它放到一个绑定模式，而命令是用来切换到一个绑定模式。<br>建议与[variables]组合使用绑定模式，以便维护更容易。以下是一个简单案例<br>请注意定义一个退回默认模式的绑定键<br>注意，可以使用[pango_markup]来设置绑定模式， 但是你需要通过添加 –pango_markup标记给定义模式来明确地开启它。<br><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config directive</span></span><br><span class="line">mode [--pango_markup] &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># command</span></span><br><span class="line">mode &lt;name&gt;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Press $mod+o followed by either f, t, Esc or Return to launch firefox,</span></span><br><span class="line"><span class="comment"># thunderbird or return to the default mode, respectively.</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$mode_launcher</span> Launch: [f]irefox [t]hunderbird</span><br><span class="line">bindsym <span class="variable">$mod</span>+o mode <span class="string">&quot;<span class="variable">$mode_launcher</span>&quot;</span></span><br><span class="line"></span><br><span class="line">mode <span class="string">&quot;<span class="variable">$mode_launcher</span>&quot;</span> &#123;</span><br><span class="line">    bindsym f <span class="built_in">exec</span> firefox</span><br><span class="line">    bindsym t <span class="built_in">exec</span> thunderbird</span><br><span class="line"></span><br><span class="line">    bindsym Esc mode <span class="string">&quot;default&quot;</span></span><br><span class="line">    bindsym Return mode <span class="string">&quot;default&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-4-6-浮动调节"><a href="#2-1-4-6-浮动调节" class="headerlink" title="2.1.4.6 浮动调节"></a>2.1.4.6 浮动调节</h4><p>移动浮动窗口。你可以选择其中一个方式，1拖动标题栏，2配置可以通过按键和鼠标点击窗口来移动窗口的浮动调节器。最常见的设置是用与管理窗口相同的按键（例如Mod1）。也就是说，你可以按住Mod1,同时鼠标左键点击拖动动窗口到你想要的方位。<br>当你按住浮动调节器时（Mod1）,你可以通过按住鼠标右键并拖动，来调整那一个窗口的大小。如果你同时按住了Shift键，窗口将会按比例缩放（宽高比会保留）。<br><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">floating_modifier &lt;Modifier&gt;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">floating_modifier Mod1</span><br></pre></td></tr></table></figure><h4 id="2-1-4-7-限制浮动窗口的大小"><a href="#2-1-4-7-限制浮动窗口的大小" class="headerlink" title="2.1.4.7 限制浮动窗口的大小"></a>2.1.4.7 限制浮动窗口的大小</h4><p>浮动窗口的最大最小面积可以被指定。如果其中的floating_maximum_size被指定为-1，那么对于窗口的最大值将不会被约束。如果其中的floating_maximum_size为定义，或者被制定为0,i3会使用默认值来限制窗口最大值。floating_minimum_size的处理方法一定程度上与floating_maximum_size的相同。</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">floating_minimum_size &lt;width&gt; x &lt;height&gt;</span><br><span class="line">floating_maximum_size &lt;width&gt; x &lt;height&gt;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">floating_minimum_size 75 x 50</span><br><span class="line">floating_maximum_size -1 x -1</span><br></pre></td></tr></table></figure><h4 id="2-1-4-8-工作区的定位"><a href="#2-1-4-8-工作区的定位" class="headerlink" title="2.1.4.8 工作区的定位"></a>2.1.4.8 工作区的定位</h4><p>新工作区有一个默认合适的定位：宽屏用水平定位，竖屏用垂直定位。<br>你可以重写default_orientation的行为</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_orientation horizontal|vertical|auto</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_orientation vertical</span><br></pre></td></tr></table></figure><h4 id="2-1-4-9-新容器的布局模式"><a href="#2-1-4-9-新容器的布局模式" class="headerlink" title="2.1.4.9 新容器的布局模式"></a>2.1.4.9 新容器的布局模式</h4><p>这个选项决定了工作区级别的容器该用什么布局模式</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workspace_layout default|stacking|tabbed</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workspace_layout tabbed</span><br></pre></td></tr></table></figure><h4 id="2-1-4-10-新窗口的边框风格"><a href="#2-1-4-10-新窗口的边框风格" class="headerlink" title="2.1.4.10 新窗口的边框风格"></a>2.1.4.10 新窗口的边框风格</h4><p>此选项决定新窗口拥有什么样的边框风格。默认是normal。注意，new_float 仅应用于作为浮动窗口呼出的窗口。例如对话窗口，而不是到后来才被设置成浮动窗口的窗口。</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new_window normal|none|pixel</span><br><span class="line">new_window normal|pixel &lt;px&gt;</span><br><span class="line">new_float normal|none|pixel</span><br><span class="line">new_float normal|pixel &lt;px&gt;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_window pixel</span><br><span class="line"><span class="string">&quot;normal&quot;</span> 和 <span class="string">&quot;pixel&quot;</span> 边框风格支持设置边框像素大小的可选项。</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The same as new_window none</span></span><br><span class="line">new_window pixel 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># A 3 px border</span></span><br><span class="line">new_window pixel 3</span><br></pre></td></tr></table></figure><h4 id="2-1-4-11-隐藏靠近屏幕边缘的边框"><a href="#2-1-4-11-隐藏靠近屏幕边缘的边框" class="headerlink" title="2.1.4.11 隐藏靠近屏幕边缘的边框"></a>2.1.4.11 隐藏靠近屏幕边缘的边框</h4><p>你可以使用hide_edge_borders来隐藏与屏幕边缘靠近的边框。如果你使用滚动条的话这很有用，或者不想浪费甚至两像素的显示空间。”smart”选项是在工作区内只有一个可见窗口时才隐藏边框，而在工作去内有多个窗口，他不会隐藏边框。</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hide_edge_borders none|vertical|horizontal|both|smart</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hide_edge_borders vertical</span><br></pre></td></tr></table></figure><h4 id="2-1-4-12-指定窗口的任意命令（for-window）"><a href="#2-1-4-12-指定窗口的任意命令（for-window）" class="headerlink" title="2.1.4.12 指定窗口的任意命令（for window）"></a>2.1.4.12 指定窗口的任意命令（for window）</h4><p>使用for_window指令，当i3碰到特定的窗口，你可以让i3执行任何命令。它可以用在让窗口浮动，改变他们的边框的方面，等。</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for_window &lt;criteria&gt; &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable floating mode for all XTerm windows</span></span><br><span class="line">for_window [class=<span class="string">&quot;XTerm&quot;</span>] floating <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make all urxvts use a 1-pixel border:</span></span><br><span class="line">for_window [class=<span class="string">&quot;urxvt&quot;</span>] border pixel 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># A less useful, but rather funny example:</span></span><br><span class="line"><span class="comment"># makes the window floating as soon as I change</span></span><br><span class="line"><span class="comment"># directory to ~/work</span></span><br><span class="line">for_window [title=<span class="string">&quot;x200: ~/work&quot;</span>] floating <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>有效的命令请command_criteria</p><h4 id="2-1-4-13-不把焦点放在新建窗口"><a href="#2-1-4-13-不把焦点放在新建窗口" class="headerlink" title="2.1.4.13 不把焦点放在新建窗口"></a>2.1.4.13 不把焦点放在新建窗口</h4><p>当一个新窗口出现时，焦点会移到它那里。no_focus 指令允许预防这种情况发生，而且它必须与command_criteria一起使用<br>注意，他不会在所有情景下生效，例如，当数据正输送给一个运行中的程序，使得焦点必须移到它身上。设置这种情况的行为，参考focus_on_window_activation<br>在工作区的第一个窗口中，no_focus也会被忽略，在这种情况下，没有理由不把焦点放在这个窗口。与workspace_layaout结合使用会有更好是可用性。</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no_focus &lt;criteria&gt;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no_focus [window_role=<span class="string">&quot;pop-up&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="2-1-4-14-变量"><a href="#2-1-4-14-变量" class="headerlink" title="2.1.4.14 变量"></a>2.1.4.14 变量</h4><p>正如您在有关键盘绑定的章节中了解到的，你将要配置许多包含修饰键的绑定，如果你想要保存一些输入并能够改变你之后要用的修饰键，那么变量就很方便了。</p><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> $&lt;name&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$m</span> Mod1</span><br><span class="line">bindsym <span class="variable">$m</span>+Shift+r restart</span><br></pre></td></tr></table></figure><p>在解释过程中，变量会在文件中被替换。变量扩张不是递归的，所以不可能用一个包含另一个变量的值来定义变量。对于这个没有其他的想法，而且绝对没有改变的计划。如果你需要更多的动态配置，你应该创建一些用来生成配置文件在i3启动之前运行的脚本。</p><h2 id="2-2-i3wm的配置"><a href="#2-2-i3wm的配置" class="headerlink" title="2.2 i3wm的配置"></a>2.2 i3wm的配置</h2><p>==想要获得更好的阅读体验，请点击<a href="https://github.com/Kuari/i3-wm-config">链接</a>,我在原文的基础上未做修改，原配置文件可以直接去github下载==</p><blockquote><p>配置改自<a href="https://github.com/Kuari/i3-wm-config">github</a></p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><blockquote><p>此处默认配置好基础系统和安装好图形化以及i3-wm</p></blockquote><h4 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件"></a>需要的软件</h4><ul><li><em>i3-wm</em> : 窗口管理器</li><li><em>i3gaps</em> : 设置窗口间距</li><li><em>feh</em> : 设置背景图片</li><li><em>compton</em> : 终端透明</li><li><em>xfce4-terminal</em> : 终端</li><li><em>polybar</em> : 状态栏</li><li><em>i3lock-fancy-git</em> : 锁屏</li></ul><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="1-安装字体"><a href="#1-安装字体" class="headerlink" title="1.安装字体"></a>1.安装字体</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S ttf-font-awesome</span><br></pre></td></tr></table></figure><h5 id="2-安装需要的包"><a href="#2-安装需要的包" class="headerlink" title="2.安装需要的包"></a>2.安装需要的包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S xfce4-terminal feh compton i3-gaps i3lock-fancy-git polybar-git</span><br></pre></td></tr></table></figure><h5 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h5><p>在文件<code>.xinitrc</code>加入如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> compton -b &amp;</span><br><span class="line"><span class="built_in">exec</span> i3 -V &gt;&gt; ~/.config/i3/<span class="built_in">log</span>/i3log-$(date +<span class="string">&#x27;%F-%k-%M-%S&#x27;</span>) 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h5><p>依赖软件包括<code>alsa</code>,<code>MPD</code>等等,可以去<a href="https://github.com/jaagr/polybar">polybar的Github主页</a>去查看相关文档。</p><h5 id="2-调试"><a href="#2-调试" class="headerlink" title="2.调试"></a>2.调试</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .config/polybar</span><br><span class="line">bash launch.sh</span><br></pre></td></tr></table></figure><p>运行此命令调试查看其报错。除了此处查看报错,根据以上配置,i3启动之后会输出日志到<code>~/.config/i3/log/</code>,可以直接查看日志。</p><h5 id="3-显示输出报错"><a href="#3-显示输出报错" class="headerlink" title="3.显示输出报错"></a>3.显示输出报错</h5><p>报错内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Monitor <span class="string">&#x27;eDP-1&#x27;</span> not found or disconnected</span><br></pre></td></tr></table></figure><p>这个问题需要看具体的硬件,可以查看<a href="https://wiki.archlinux.org/index.php/Xrandr">archlinux的xrander</a>,通过<code>xrander</code>查看自己主要适用的显示设备等等信息,然后修改i3和polybar配置文件内设备信息即可。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><table><thead><tr><th>功能</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>向上/下/左/右移动</td><td>$mod+k/j/h/l</td><td></td></tr><tr><td>切换分区</td><td>$mod+1/2/3/4/5/6/7/8/9/0</td><td></td></tr><tr><td>移动窗口到目标分区</td><td>$mod+Shift+1/2/3/…/0</td><td></td></tr><tr><td>关闭i3-wm</td><td>$mod+Shift+e</td><td></td></tr><tr><td>关闭窗口</td><td>$mod+q</td><td></td></tr><tr><td>移动窗口到上/下/左/右侧</td><td>$mod+Shift+k/j/h/l</td><td></td></tr><tr><td>更改布局为横向/竖向</td><td>$mod+h/v</td><td></td></tr><tr><td>窗口全屏/取消全屏</td><td>$mod+f</td><td></td></tr><tr><td>隐藏窗口</td><td>$mod+-</td><td></td></tr><tr><td>切换显示隐藏窗口（为浮动状态）</td><td>$mod+Shift+-</td><td></td></tr><tr><td>浮动窗口取消浮动</td><td>$mod+Shift+space</td><td></td></tr><tr><td>调高音量5%</td><td>$mod+F3</td><td></td></tr><tr><td>调低音量5%</td><td>$mod+F2</td><td></td></tr><tr><td>打开/关闭声音</td><td>$mod+F1</td><td></td></tr><tr><td>锁屏</td><td>$mod+F12</td><td>需要安装i3-fancy</td></tr></tbody></table><h5 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h5><ul><li>此处需要安装相应的软件才可实现</li></ul><table><thead><tr><th>功能</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>终端</td><td>$mod+enter</td><td>用的xfce4-terminal</td></tr><tr><td>firefox</td><td>$mod+Shift+f</td><td></td></tr><tr><td>chromium</td><td>$mod+Shift+g</td><td></td></tr><tr><td>slack</td><td>$mod+Shift+k</td><td></td></tr><tr><td>steam</td><td>$mod+Shift+s</td><td></td></tr><tr><td>thunderbird</td><td>$mod+Ctrl+t</td><td></td></tr><tr><td>blueberry</td><td>$mod+Shift+b</td><td></td></tr><tr><td>virtualbox中的win10虚拟机</td><td>$mod+Shift+v</td><td></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><br /><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><h4 id="1-配置快捷键"><a href="#1-配置快捷键" class="headerlink" title="1. 配置快捷键"></a>1. 配置快捷键</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym <span class="variable">$mod</span>+&lt;快捷键&gt; <span class="built_in">exec</span> &lt;shell&gt;</span><br></pre></td></tr></table></figure><ul><li>软件</li></ul><p>需要确保软件已安装，且使用软件自带的启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym <span class="variable">$mod</span>+Shift+f <span class="built_in">exec</span> firefox</span><br></pre></td></tr></table></figure><ul><li>运行脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym <span class="variable">$mod</span>+Shift+s <span class="built_in">exec</span> bash ~/example.sh</span><br></pre></td></tr></table></figure><ul><li>virtualbox虚拟机</li></ul><p>此处为直接打开一个名为“win10”的虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindsym <span class="variable">$mod</span>+Shift+v <span class="built_in">exec</span> VBoxManage startvm <span class="string">&quot;win10&quot;</span> --<span class="built_in">type</span> gui</span><br></pre></td></tr></table></figure><h4 id="2-配置背景图"><a href="#2-配置背景图" class="headerlink" title="2. 配置背景图"></a>2. 配置背景图</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec_always --no-startup-id feh --bg-scale <span class="string">&quot;/home/kuari/Picture/girl.png&quot;</span></span><br></pre></td></tr></table></figure><br /><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><table>    <tr>        <th>功能</th>        <th>软件</th>    </tr>    <tr>        <th>浏览器</th>        <th>Firefox, chromium</th>    </tr>    <tr>        <th>输入法</th>        <th>ibus, ibus-libpinyin</th>    </tr>    <tr>        <th>程序启动</th>        <th>rofi</th>    </tr>    <tr>        <th>邮件</th>        <th>thunderbird</th>    </tr>    <tr>        <th>编辑器</th>        <th>vim</th>    </tr>    <tr>        <th>音频播放</th>        <th>vlc, mplayer</th>    </tr>    <tr>        <th>office组件</th>        <th>libreoffice, wps</th>    </tr></table><p><strong>我的配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># i3 config file (v4)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please see https://i3wm.org/docs/userguide.html for a complete reference!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This config file uses keycodes (bindsym) and was written for the QWERTY</span></span><br><span class="line"><span class="comment"># layout.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To get a config file with the same key positions, but for your current</span></span><br><span class="line"><span class="comment"># layout, use the i3-config-wizard</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Font for window titles. Will also be used by the bar unless a different font</span></span><br><span class="line"><span class="comment"># is used in the bar &#123;&#125; block below.</span></span><br><span class="line">font pango:monospace 8</span><br><span class="line"></span><br><span class="line"><span class="comment"># This font is widely installed, provides lots of unicode glyphs, right-to-left</span></span><br><span class="line"><span class="comment"># text rendering and scalability on retina/hidpi displays (thanks to pango).</span></span><br><span class="line"><span class="comment">#font pango:DejaVu Sans Mono 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Before i3 v4.8, we used to recommend this one as the default:</span></span><br><span class="line"><span class="comment"># font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1</span></span><br><span class="line"><span class="comment"># The font above is very space-efficient, that is, it looks good, sharp and</span></span><br><span class="line"><span class="comment"># clear in small sizes. However, its unicode glyph coverage is limited, the old</span></span><br><span class="line"><span class="comment"># X core fonts rendering does not support right-to-left and this being a bitmap</span></span><br><span class="line"><span class="comment"># font, it doesn’t scale on retina/hidpi displays.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use these keys for focus, movement, and resize directions when reaching for</span></span><br><span class="line"><span class="comment"># the arrows is not convenient</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$up</span> k</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$down</span> j</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$left</span> h</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$right</span> l</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$mod</span> Mod4</span><br><span class="line"></span><br><span class="line"><span class="comment"># use Mouse+$mod to drag floating windows to their wanted position</span></span><br><span class="line">floating_modifier <span class="variable">$mod</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start a terminal</span></span><br><span class="line"><span class="comment"># bindsym $mod+Return exec gnome-terminal</span></span><br><span class="line"><span class="comment"># bindsym $mod+Return exec xfce4-terminal</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Return <span class="built_in">exec</span> konsole</span><br><span class="line"></span><br><span class="line"><span class="comment"># amixer</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+F3 <span class="built_in">exec</span> amixer <span class="built_in">set</span> Master 5%+</span><br><span class="line">bindsym <span class="variable">$mod</span>+F2 <span class="built_in">exec</span> amixer <span class="built_in">set</span> Master 5%-</span><br><span class="line">bindsym <span class="variable">$mod</span>+F1 <span class="built_in">exec</span> amixer <span class="built_in">set</span> Master toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># i3lock</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+F12 <span class="built_in">exec</span> i3lock-fancy</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the firefox</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+f <span class="built_in">exec</span> firefox</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the bluetooth</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+b <span class="built_in">exec</span> blueberry</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the rem</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+r <span class="built_in">exec</span> remarkable</span><br><span class="line"></span><br><span class="line"><span class="comment"># start slack</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+k <span class="built_in">exec</span> slack</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the win10</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+v <span class="built_in">exec</span> VBoxManage startvm <span class="string">&quot;win10&quot;</span> --<span class="built_in">type</span> gui</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the chromium</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+g <span class="built_in">exec</span> chromium</span><br><span class="line"></span><br><span class="line"><span class="comment"># ss</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+s <span class="built_in">exec</span> bash ~/.ss.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># wps, et, wpp</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+w <span class="built_in">exec</span> wps</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+e <span class="built_in">exec</span> et</span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+p <span class="built_in">exec</span> wpp</span><br><span class="line"></span><br><span class="line"><span class="comment"># thunderbird</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+t <span class="built_in">exec</span> thunderbird</span><br><span class="line"></span><br><span class="line"><span class="comment"># kill focused window</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+q <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># steam</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Control+s <span class="built_in">exec</span> steam</span><br><span class="line"></span><br><span class="line"><span class="comment"># start dmenu (a program launcher)</span></span><br><span class="line"><span class="comment"># bindsym $mod+d exec dmenu_run</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># run rofi</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+d <span class="built_in">exec</span> rofi -show run</span><br><span class="line"></span><br><span class="line"><span class="comment"># arandr</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+n <span class="built_in">exec</span> arandr</span><br><span class="line"><span class="comment"># There also is the (new) i3-dmenu-desktop which only displays applications</span></span><br><span class="line"><span class="comment"># shipping a .desktop file. It is a wrapper around dmenu, so you need that</span></span><br><span class="line"><span class="comment"># installed.</span></span><br><span class="line"><span class="comment"># bindsym $mod+d exec --no-startup-id i3-dmenu-desktop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change focus</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+<span class="variable">$left</span> focus left</span><br><span class="line">bindsym <span class="variable">$mod</span>+<span class="variable">$down</span> focus down</span><br><span class="line">bindsym <span class="variable">$mod</span>+<span class="variable">$up</span> focus up</span><br><span class="line">bindsym <span class="variable">$mod</span>+<span class="variable">$right</span> focus right</span><br><span class="line"></span><br><span class="line"><span class="comment"># alternatively, you can use the cursor keys:</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Left focus left</span><br><span class="line">bindsym <span class="variable">$mod</span>+Down focus down</span><br><span class="line">bindsym <span class="variable">$mod</span>+Up focus up</span><br><span class="line">bindsym <span class="variable">$mod</span>+Right focus right</span><br><span class="line"></span><br><span class="line"><span class="comment"># move focused window</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+<span class="variable">$left</span> move left</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+<span class="variable">$down</span> move down</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+<span class="variable">$up</span> move up</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+<span class="variable">$right</span> move right</span><br><span class="line"></span><br><span class="line"><span class="comment"># alternatively, you can use the cursor keys:</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Left move left</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Down move down</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Up move up</span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+Right move right</span><br><span class="line"></span><br><span class="line"><span class="comment"># split in horizontal orientation</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+g split h</span><br><span class="line"></span><br><span class="line"><span class="comment"># split in vertical orientation</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+v split v</span><br><span class="line"></span><br><span class="line"><span class="comment"># enter fullscreen mode for the focused container</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+f fullscreen toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># change container layout (stacked, tabbed, toggle split)</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+s layout stacking</span><br><span class="line">bindsym <span class="variable">$mod</span>+w layout tabbed</span><br><span class="line">bindsym <span class="variable">$mod</span>+e layout toggle split</span><br><span class="line"></span><br><span class="line"><span class="comment"># toggle tiling / floating</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+space floating toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># change focus between tiling / floating windows</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+space focus mode_toggle</span><br><span class="line"></span><br><span class="line"><span class="comment"># focus the parent container</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+a focus parent</span><br><span class="line"></span><br><span class="line"><span class="comment"># focus the child container</span></span><br><span class="line"><span class="comment">#bindsym $mod+d focus child</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># move the currently focused window to the scratchpad</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+minus move scratchpad</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the next scratchpad window or hide the focused scratchpad window.</span></span><br><span class="line"><span class="comment"># If there are multiple scratchpad windows, this command cycles through them.</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+minus scratchpad show</span><br><span class="line"></span><br><span class="line"><span class="comment"># use window title, but no border</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+t border normal 0</span><br><span class="line"><span class="comment"># use no window title and a thick border</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+y border pixel 3</span><br><span class="line"><span class="comment"># use neither window title nor border</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+u border none</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># workspace names</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws1</span> 1:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws2</span> 2:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws3</span> 3:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws4</span> 4:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws5</span> 5:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws6</span> 6:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws7</span> 7:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws8</span> 8:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws9</span> 9:</span><br><span class="line"><span class="built_in">set</span> <span class="variable">$ws10</span> 0:</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to workspace</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+1 workspace <span class="variable">$ws1</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+2 workspace <span class="variable">$ws2</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+3 workspace <span class="variable">$ws3</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+4 workspace <span class="variable">$ws4</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+5 workspace <span class="variable">$ws5</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+6 workspace <span class="variable">$ws6</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+7 workspace <span class="variable">$ws7</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+8 workspace <span class="variable">$ws8</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+9 workspace <span class="variable">$ws9</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+0 workspace <span class="variable">$ws10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># move focused container to workspace</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+1 move container to workspace <span class="variable">$ws1</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+2 move container to workspace <span class="variable">$ws2</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+3 move container to workspace <span class="variable">$ws3</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+4 move container to workspace <span class="variable">$ws4</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+5 move container to workspace <span class="variable">$ws5</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+6 move container to workspace <span class="variable">$ws6</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+7 move container to workspace <span class="variable">$ws7</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+8 move container to workspace <span class="variable">$ws8</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+9 move container to workspace <span class="variable">$ws9</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+0 move container to workspace <span class="variable">$ws10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># assign</span></span><br><span class="line"><span class="comment"># assign [class=&quot;chromium&quot;] $ws4</span></span><br><span class="line"><span class="comment"># assign [class=&quot;arandr&quot;] $ws10</span></span><br><span class="line"><span class="comment"># assign [class=&quot;wps&quot;] $ws6</span></span><br><span class="line"><span class="comment"># assign [class=&quot;et&quot;] $ws6</span></span><br><span class="line"><span class="comment"># assign [class=&quot;wpp&quot;] $ws6</span></span><br><span class="line"><span class="comment"># assign [class=&quot;virtualbox&quot;] $ws9</span></span><br><span class="line"><span class="comment"># assign [class=&quot;steam&quot;] $ws5</span></span><br><span class="line"><span class="comment"># assign [class=&quot;thunderbird&quot;] $ws7</span></span><br><span class="line"><span class="comment"># assign [class=&quot;slack&quot;] $ws8</span></span><br><span class="line"><span class="comment"># assign [class=&quot;virtualbox&quot;] $ws9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for_window [instance=&quot;Steam&quot;] floating enable</span></span><br><span class="line"><span class="comment"># for_window [instance=&quot;Steam&quot;] border none</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reload the configuration file</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+c reload</span><br><span class="line"><span class="comment"># restart i3 inplace (preserves your layout/session, can be used to upgrade i3)</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+r restart</span><br><span class="line"><span class="comment"># exit i3 (logs you out of your X session)</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Shift+e <span class="built_in">exec</span> <span class="string">&quot;i3-nagbar -t warning -m &#x27;You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.&#x27; -b &#x27;Yes, exit i3&#x27; &#x27;i3-msg exit&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gaps inner 10</span></span><br><span class="line">gaps inner 0</span><br><span class="line"><span class="comment"># gaps outer 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># resize window (you can also use the mouse for that)</span></span><br><span class="line">mode <span class="string">&quot;resize&quot;</span> &#123;</span><br><span class="line">        <span class="comment"># These bindings trigger as soon as you enter the resize mode</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pressing left will shrink the window’s width.</span></span><br><span class="line">        <span class="comment"># Pressing right will grow the window’s width.</span></span><br><span class="line">        <span class="comment"># Pressing up will shrink the window’s height.</span></span><br><span class="line">        <span class="comment"># Pressing down will grow the window’s height.</span></span><br><span class="line">        bindsym <span class="variable">$left</span>       resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym <span class="variable">$down</span>       resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym <span class="variable">$up</span>         resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym <span class="variable">$right</span>      resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        <span class="comment"># same bindings, but for the arrow keys</span></span><br><span class="line">        bindsym Left        resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym Down        resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym Up          resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym Right       resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        <span class="comment"># back to normal: Enter or Escape</span></span><br><span class="line">        bindsym Return mode <span class="string">&quot;default&quot;</span></span><br><span class="line">        bindsym Escape mode <span class="string">&quot;default&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindsym <span class="variable">$mod</span>+r mode <span class="string">&quot;resize&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start i3bar to display a workspace bar (plus the system information i3status</span></span><br><span class="line"><span class="comment"># finds out, if available)</span></span><br><span class="line"><span class="comment"># i3status</span></span><br><span class="line"><span class="comment"># bar &#123;</span></span><br><span class="line">    <span class="comment"># status_command i3status</span></span><br><span class="line"><span class="comment"># #    status_command py3status -c ~/.i3status.conf</span></span><br><span class="line">    <span class="comment"># strip_workspace_numbers yes</span></span><br><span class="line">    <span class="comment"># separator_symbol &quot; &quot;</span></span><br><span class="line">    <span class="comment"># position top</span></span><br><span class="line">    <span class="comment"># font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1</span></span><br><span class="line">    <span class="comment"># font pango:DejaVu Sans Mono 10</span></span><br><span class="line">    <span class="comment"># colors &#123;</span></span><br><span class="line">        <span class="comment"># background #000000</span></span><br><span class="line">        <span class="comment"># statusline #ffffff</span></span><br><span class="line">        <span class="comment"># separator #00E3E3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># focused_workspace  #4F4F4F #4F4F4F #ffffff</span></span><br><span class="line">        <span class="comment"># active_workspace   #333333 #5f676a #ffffff</span></span><br><span class="line">        <span class="comment"># inactive_workspace #333333 #222222 #888888</span></span><br><span class="line">        <span class="comment"># urgent_workspace   #2f343a #900000 #ffffff</span></span><br><span class="line">        <span class="comment"># binding_mode       #2f343a #900000 #ffffff</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># polybar</span></span><br><span class="line"><span class="comment"># bar &#123;</span></span><br><span class="line">    <span class="comment"># i3bar_command $HOME/.config/polybar/launch.sh</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># border</span></span><br><span class="line">new_window pixel 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># background</span></span><br><span class="line">exec_always --no-startup-id feh --bg-scale <span class="string">&quot;/home/kuari/Picture/girl.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># screen timeout</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id xset dpms 600 800 900</span><br><span class="line"></span><br><span class="line"><span class="comment"># xrandr</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id xrandr --output eDP1 --mode 1920x1080 --same-as HDMI2</span><br><span class="line"></span><br><span class="line"><span class="comment"># polybar</span></span><br><span class="line"><span class="comment"># exec_always --no-startup-id $HOME/.config/polybar/launch.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># automatically start i3-config-wizard to offer the user to create a</span></span><br><span class="line"><span class="comment"># keysym-based config which used their favorite modifier (alt or windows)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># i3-config-wizard will not launch if there already is a config file</span></span><br><span class="line"><span class="comment"># in ~/.i3/config.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please remove the following exec line:</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment">#exec i3-config-wizard</span></span><br><span class="line">exec_always --no-startup-id feh --bg-scale <span class="string">&quot;/home/liukairui/图片/Sleepy Mountains/sleepy_mountains_light_v06.png&quot;</span></span><br><span class="line">exec_always albert</span><br><span class="line"><span class="built_in">exec</span> . ~/.config/polybar/launch.sh</span><br><span class="line">bindsym alt+space <span class="built_in">exec</span> albert</span><br></pre></td></tr></table></figure><p>相关阅读：<br><a href="https://www.jianshu.com/p/fd07c3081493">在Archlinux中安装使用i3-gaps和polybar</a><br><a href="https://github.com/aeghn/prettyi3">一份极其优秀的i3配置-github</a><br><a href="https://www.zhihu.com/question/62251457/answer/200683406">如何配置linux 平铺式窗口管理器i3wm？-知乎</a><br><a href="https://github.com/Kuari/i3-wm-config">我fork的i3配置-github</a><br><a href="https://github.com/sainathadapa/i3-wm-config">一份解释较为详细的i3配置教程</a><br><a href="https://www.deviantart.com/tag/urxvt?offset=0&page=1">优秀i3wm配置文件汇总</a></p><h2 id="2-3-i3wm-联网"><a href="#2-3-i3wm-联网" class="headerlink" title="2.3 i3wm 联网"></a>2.3 i3wm 联网</h2><p>当然可以直接往配置里面写密码，也可以在i3键入的终端<code>nmtui</code>，图形化配置<br>建议还是下载一份network manager</p><p>相关阅读<br><a href="https://www.cnblogs.com/pipci/p/12571469.html">nmtui网络配置命令</a><br><a href="https://www.cnblogs.com/dengshihuang/p/8056716.html">使用文本用户界面（NMTUI）进行网络配置</a></p><h2 id="2-3-Polybar的安装与尝试使用example配置"><a href="#2-3-Polybar的安装与尝试使用example配置" class="headerlink" title="2.3 Polybar的安装与尝试使用example配置"></a>2.3 Polybar的安装与尝试使用example配置</h2><p><strong>希望您可以吧example试着配置下来，如果可以处理好，使用自定义主题会如鱼得水</strong><br>==想要获得更好的阅读体验，请点击<a href="https://blog.csdn.net/qq_33215865/article/details/84720212">链接</a>,我在原文的基础上未做修改==</p><blockquote><p>以下内容改自<a href="https://blog.csdn.net/qq_33215865/article/details/84720212">CSDN</a></p></blockquote><p>如果不喜欢i3或者其他桌面系统的默认状态栏，polybar还是一个不错的选择。基本上，所有的流行的Linux发行版都可以用包管理器直接进行polybar的安装。ArchLinux可以使用yay或者其他AUR工具安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S polybar-git</span><br></pre></td></tr></table></figure><h3 id="Polybar的使用"><a href="#Polybar的使用" class="headerlink" title="Polybar的使用"></a>Polybar的使用</h3><p>polybar的启动主要有2个文件，一个启动脚本和一个配置文件。<br>配置文件可以使用其他人的配置，也可以使用官方的example示例。</p><h3 id="Example示例使用"><a href="#Example示例使用" class="headerlink" title="Example示例使用"></a>Example示例使用</h3><p>polaybar自带了example示例，让我们可以快速看到polybar的展示，并且可以在其基础上进行修改。exanple的config文件位于/esr/share/doc/polybar，如果是压缩文件我们需要先用bzip2命令进行解压。然后，我们就会获得config文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install -Dm644 /usr/share/doc/polybar/config <span class="variable">$HOME</span>/.config/polybar/config</span><br></pre></td></tr></table></figure><p>之后我们在$HOME/.config/polybar/config目录创建launch.sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">killall -q polybar</span><br><span class="line"><span class="keyword">while</span> pgrep -u <span class="variable">$UID</span> -x polybar &gt;/dev/null; <span class="keyword">do</span> sleep 1; <span class="keyword">done</span></span><br><span class="line">polybar example</span><br></pre></td></tr></table></figure><p>执行launch.sh文件，我们就会看到polybar成功显示在我们上方。<br>之后我们需要开机自动启动，在桌面系统的配置文件中上运行launch.sh文件的命令就可以了们，以i3为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> . ~/.config/polybar/launch.sh</span><br></pre></td></tr></table></figure><p>我们可以修改config文件进行属性的设定。example的状态栏会有留边，我们可以修改border-size属性来取消。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border-size = 0</span><br><span class="line">border-color = <span class="comment">#00000000</span></span><br></pre></td></tr></table></figure><p>遇到模块有问题，请使用<a href="https://github.com/polybar/polybar/wiki">gitgub项目的wiki</a>，还是不会推荐看<a href="https://www.bilibili.com/video/BV17T4y1E7sc?from=search&seid=15772182517967257125">这位Up的视频</a></p><h2 id="2-4-Polybar的主题配置-polybar-themes"><a href="#2-4-Polybar的主题配置-polybar-themes" class="headerlink" title="2.4 Polybar的主题配置(polybar-themes)"></a>2.4 Polybar的主题配置(polybar-themes)</h2><p>Polybar的主题可以自己定制，但是我懒，于是在github上找到两个不错的项目<br><a href="https://github.com/Yucklys/polybar-nord-theme">一个Nord风格的Polybar</a><br><a href="https://github.com/adi1090x/polybar-themes">颇受欢迎的上千款样式大合集</a><br>我选取了后者(因为多)<br>如果你想自己一步一步来，<a href="https://guyueshui.github.io/post/polybar-%E7%9A%84%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/">参见此处</a></p><h3 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h3><p>首先，你已经下好了polybar<br>然后下载polybar的主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.config</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/adi1090x/polybar-themes.git</span><br></pre></td></tr></table></figure><p>然后在.config目录下就会有一个名为polybar-themes的文件夹</p><h3 id="配置字体"><a href="#配置字体" class="headerlink" title="配置字体"></a>配置字体</h3><p>就会看到一共九个主题，每个主题下都有一个名为fonts的文件夹，想要使用哪个主题，先将主题的字体复制到你系统的字体文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> polybar-themes</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>我的字体目录是/usr/share/fonts/，我的ttf尾缀的字体在/usr/share/fonts/TTF/下，所以我将ttf字体复制到这里面，然后termsyn是个字体文件夹，直接放在fonts目录下即可，siji放在/usr/share/fonts/misc/下<br>最后将原来的~/.config/polybar/这个目录改个名字，如果不需备份的话直接删除就好了</p><h3 id="以polybar-5为例"><a href="#以polybar-5为例" class="headerlink" title="以polybar-5为例"></a>以polybar-5为例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r ~/.config/polybar-themes/polybar-5 ~/.config/polybar</span><br></pre></td></tr></table></figure><p>接下来运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.config/polybar/</span><br><span class="line">./launsh.sh</span><br></pre></td></tr></table></figure><h3 id="配置-polybar-5"><a href="#配置-polybar-5" class="headerlink" title="配置(polybar-5)"></a>配置(polybar-5)</h3><p>如果想更改标题栏顺序，可以在主题中config.ini中修改 建议将[bar/top]下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modules-left = menu title right-end-top left-end-bottom workspaces right-end-top left-end-bottom colors-switch right-end-top</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modules-left = menu workspaces right-end-top left-end-bottom colors-switch right-end-top left-end-bottom title right-end-top</span><br></pre></td></tr></table></figure><p>用起来感觉好些</p><p>如果要更改左上角菜单栏中Files，Terminal等的程序，可以在主题下user_modules.ini中[module/menu]下更改</p><p>解决polybar显示不了中文 打开主题目录下config.ini，将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-0 = Iosevka Nerd Font:style=Medium:size=14;3</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-0 = unifont:style=Medium:size=14;3</span><br></pre></td></tr></table></figure><p>当然也可以下载其他支持中文的字体</p><p>我用的i3wm所以它的右上角powermenu菜单中logout用不了<br>首先下载i3exit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S i3exit</span><br></pre></td></tr></table></figure><p>然后更改主题文件夹下scripts/powermenu，将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*Logout) openbox --<span class="built_in">exit</span> ;;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*Logout) i3exit <span class="built_in">logout</span> ;;</span><br></pre></td></tr></table></figure><h2 id="2-5-应用polybar-themes主题时的一些经验之谈"><a href="#2-5-应用polybar-themes主题时的一些经验之谈" class="headerlink" title="2.5 应用polybar-themes主题时的一些经验之谈"></a>2.5 应用polybar-themes主题时的一些经验之谈</h2><ol><li>字体</li></ol><p><strong>siji那个字体一定要用polybar-themes上下载下来的那个版本</strong><br><strong>要关闭系统对于位图字体的禁止(前文有讲)</strong><br>上文的建议时进行字体拷贝，但是，如果你使用的时KDE桌面，那么可以这样: 设置 -  字体 - 字体管理 - 系统字体 - 从文件安装。这样所有有问题的字体都会弹出错误提示，进而解决<br><img data-src="https://img-blog.csdnimg.cn/202008172317016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2. 调试的方法，直接进i3去修改时很麻烦的，我建议在KDE下操作，找到对应的launch.sh 找到他运行 ploybar的那个命令，在KED的终端运行，这样他不仅会显示报错信息，还可以Ctrl+C停止，改配置，直接重新进入polyvar<br>3. 模块的问题：<br>首先建议安装rofi(从添加/删除软件那里就可以找到)<br>出现Error开头的说明模块有问题，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Disabling module <span class="string">&quot;battery&quot;</span> ...</span><br></pre></td></tr></table></figure><p>我们可以看到是<code>battery</code>出了问题，于是去<a href="https://github.com/polybar/polybar/wiki">github-polybar-wiki</a>找解决方案，<br><img data-src="https://img-blog.csdnimg.cn/20200817233203346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>照猫画虎就可以解决其他的了，实在解决不了，报错信息直接<strong>谷歌</strong>，百 度 太 坑</p><ol start="4"><li>一定记得吧polybar加入i3自启，然后删除自带状态栏</li></ol><p>相关阅读<br><a href="https://awesomeopensource.com/projects/polybar">The Top 26 Polybar Open Source Projects</a></p><h2 id="2-5-mpd的配置"><a href="#2-5-mpd的配置" class="headerlink" title="2.5 mpd的配置"></a>2.5 mpd的配置</h2><p>==想要获得更好的阅读体验，请点击<a href="https://blog.fooleap.org/installation-and-configuration-mpd.html">链接</a>,我在原文的基础上略做修改==</p><blockquote><p>以下内容改自<a href="https://blog.fooleap.org/installation-and-configuration-mpd.html">个人博客</a></p></blockquote><p>使用 i3 窗口管理器，感觉很舒服，更有帅帅的 i3status 点缀之，在 GitHub 搜了下，发现有个i3status 修改版[1]，可以显示 MPD 的播放状态，于是又用起 MPD。</p><p>MPD [2] 是一个实用的音乐播放器，以其独特的 C/S 结构获得人们的喜爱。充其量 MPD 只是作为一个守护进程（或者可以说服务）运行于后台，想要控制它的播放，还需要一个客户端，一般只选用 MPC (Music Player Command)， MPC 虽为命令行客户端，但已够用。</p><p>下面一起来安装配置 MPD，获得恰到好处的使用体验</p><h3 id="MPD"><a href="#MPD" class="headerlink" title="MPD"></a>MPD</h3><p>安装 MPD, MPC</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pacman -S mpd mpc</span></span><br></pre></td></tr></table></figure><p>创建 MPD 的配置文件~/.config/mpd/.mpdconf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">music_directory         <span class="string">&quot;~/Music/&quot;</span></span><br><span class="line">playlist_directory      <span class="string">&quot;~/.mpd/playlists&quot;</span></span><br><span class="line">db_file                 <span class="string">&quot;~/.mpd/database&quot;</span></span><br><span class="line">log_file                <span class="string">&quot;~/.mpd/log&quot;</span></span><br><span class="line">pid_file                <span class="string">&quot;~/.mpd/pid&quot;</span></span><br><span class="line">state_file              <span class="string">&quot;~/.mpd/state&quot;</span></span><br><span class="line">bind_to_address         <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port                    <span class="string">&quot;6600&quot;</span></span><br><span class="line">audio_output &#123;</span><br><span class="line"><span class="built_in">type</span>            <span class="string">&quot;alsa&quot;</span></span><br><span class="line">name            <span class="string">&quot;My ALSA Device&quot;</span></span><br><span class="line">mixer_control   <span class="string">&quot;Master&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多配置可参考 <code>/usr/share/mpd/mpd.conf.example</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/.mpd/playlists</span><br><span class="line">$ touch ~/.mpd/&#123;database,<span class="built_in">log</span>,pid,state&#125;</span><br></pre></td></tr></table></figure><p>至此，可直接运行 mpd 命令以启动</p><p>通过 systemd 设置自启，默认配置不是普通用户的，遂先修改 mpd.service 文件，指定配置/usr/lib/systemd/system/mpd.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/mpd /home/fooleap/.mpdconf --no-daemon</span><br><span class="line">...</span><br><span class="line"><span class="comment"># systemctl enable mpd</span></span><br></pre></td></tr></table></figure><h3 id="均衡器"><a href="#均衡器" class="headerlink" title="均衡器"></a>均衡器</h3><p>播放器是有了，但 MPD 不带均衡器，在此使用 Alsaequal[3] 充当均衡器</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yaourt -S alsaequal caps</span><br></pre></td></tr></table></figure><p>配置~/.asoundrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ctl.equal &#123;</span><br><span class="line"> <span class="built_in">type</span> equal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcm.plugequal &#123;</span><br><span class="line">  <span class="built_in">type</span> equal;</span><br><span class="line">  <span class="comment"># Modify the line below if you do not</span></span><br><span class="line">  <span class="comment"># want to use sound card 0.</span></span><br><span class="line">  <span class="comment">#slave.pcm &quot;plughw:0,0&quot;;</span></span><br><span class="line">  <span class="comment">#by default we want to play from more sources at time:</span></span><br><span class="line">  slave.pcm <span class="string">&quot;plug:dmix&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#pcm.equal &#123;</span></span><br><span class="line">  <span class="comment"># If you don&#x27;t want the equalizer to be your</span></span><br><span class="line">  <span class="comment"># default soundcard comment the following</span></span><br><span class="line">  <span class="comment"># line and uncomment the above line. (You can</span></span><br><span class="line">  <span class="comment"># choose it as the output device by addressing</span></span><br><span class="line">  <span class="comment"># it with specific apps,eg mpg123 -a equal 06.Back_In_Black.mp3)</span></span><br><span class="line">pcm.!default &#123;</span><br><span class="line">  <span class="built_in">type</span> plug;</span><br><span class="line">  slave.pcm plugequal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Alsa 后，可调整增益值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alsamixer -D equal</span><br></pre></td></tr></table></figure><p>~/.mpdconf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">audio_output &#123;</span><br><span class="line">  <span class="built_in">type</span>    <span class="string">&quot;alsa&quot;</span></span><br><span class="line">  name    <span class="string">&quot;My ALSA Device&quot;</span></span><br><span class="line">  device  <span class="string">&quot;plug:plugequal&quot;</span></span><br><span class="line">  mixer_control<span class="string">&quot;Master&quot;</span><span class="comment"># optional</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200818002230485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="MPC"><a href="#MPC" class="headerlink" title="MPC"></a>MPC</h3><p>尝试播放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mpc listall | mpc add</span><br><span class="line">$ mpc play</span><br></pre></td></tr></table></figure><p>添加所有音乐到当前播放列表</p><ul><li>播放</li><li>播放列表</li></ul><p>通过 MPC 创建的是 *.m3u 格式的 Playlist</p><p>假设 ~/Music 文件夹里有多个文件夹，创建播放列表，包含某目录（或多目录）下所有音乐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mpc clear</span><br><span class="line">$ mpc ls</span><br><span class="line">$ mpc listall FolderName1 FolderName2 .. | mpc add</span><br><span class="line">$ mpc save playlist</span><br><span class="line">$ mpc load playlist</span><br></pre></td></tr></table></figure><p>清空当前播放列表<br>列出文件夹<br>显示名字为 FolderName1 FolderName2 文件夹下的所有音乐并添加到当前播放列表<br>保存当前播放列表为 playlist<br>读取播放列表 playlist<br>也可以通过类似下面的命令来创建播放列表，萝卜青菜</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/Music</span><br><span class="line">$ find * -iname <span class="string">&quot;*.mp3&quot;</span> | sort | grep Keyword &gt; ~/.mpd/playlist/playlist.m3u</span><br></pre></td></tr></table></figure><p>更多使用可以参考 man mpc</p><h3 id="多媒体键"><a href="#多媒体键" class="headerlink" title="多媒体键"></a>多媒体键</h3><p>使用 Thinkpad 多媒体键来代替常用的 mpc 命令再合适不过，这里通过 Xbindkeys[4] 来绑定</p><p>安装 Xbindkeys</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pacman -S xbindkeys</span></span><br></pre></td></tr></table></figure><p>配置 Xbindkeys<br>~/.xbindkeysrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;mpc toggle&quot;</span></span><br><span class="line">XF86AudioPlay</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;mpc stop&quot;</span></span><br><span class="line">XF86AudioStop</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;mpc prev&quot;</span></span><br><span class="line">XF86AudioPrev</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;mpc next&quot;</span></span><br><span class="line">XF86AudioNext</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;amixer sset Master 2-&quot;</span></span><br><span class="line">XF86AudioLowerVolume</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;amixer sset Master 2+&quot;</span></span><br><span class="line">XF86AudioRaiseVolume</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;amixer sset Master toggle&quot;</span></span><br><span class="line">XF86AudioMute</span><br></pre></td></tr></table></figure><p>将 xbindkeys &amp; 添加到 ~/.xinitrc 使其随 X 启动</p><h3 id="键映射"><a href="#键映射" class="headerlink" title="键映射"></a>键映射</h3><p>在此之前，可能需要通过 Xmodmap[5] 修改键映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~/.Xmodmap</span><br><span class="line">!Media</span><br><span class="line">keycode 173 = XF86AudioPrev</span><br><span class="line">keycode 172 = XF86AudioPlay</span><br><span class="line">keycode 171 = XF86AudioNext</span><br><span class="line">keycode 174 = XF86AudioStop</span><br><span class="line"></span><br><span class="line">!Volume</span><br><span class="line">keycode 121 = XF86AudioMute</span><br><span class="line">keycode 122 = XF86AudioLowerVolume</span><br><span class="line">keycode 123 = XF86AudioRaiseVolume</span><br></pre></td></tr></table></figure><p>将 xmodmap ~/.Xmodmap &amp; 添加到 ~/.xinitrc 使其随 X 启动</p><p>相关阅读<br><a href="https://forum.archlabslinux.com/t/fix-mpd-on-polybar/1861/8">Fix MPD on polybar</a></p><h2 id="2-6-新终端"><a href="#2-6-新终端" class="headerlink" title="2.6 新终端"></a>2.6 新终端</h2><p>感觉Konsole挺好的，那天再说</p><h1 id="3-备份您的文件-dotfile项目"><a href="#3-备份您的文件-dotfile项目" class="headerlink" title="3.备份您的文件(dotfile项目)"></a>3.备份您的文件(dotfile项目)</h1><p>由于在Linux下大部分文件都是<code>.XXXrc</code>,有人叫他<code>dotfile</code>  </p><blockquote><p>以下转自<a href="https://www.jianshu.com/p/7UJapk">简书</a></p></blockquote><p>1.dotfiles是什么？<br>我自己的理解:linux下有各种app，每个人会根据自己的喜好和习惯来设置一些（快捷键，变量等等），而dotfiles就是保存了这些自定义设置的文件，如果换一台电脑，只要你备份了dotfiles文件，一样可以快速回归到自己熟悉的设置。<br>2.如何使用dotfiles?<br>我自己的理解：a.在系统中使用一个文件夹，通过ln命令，将不同的app，不同的系统设置文件都指引到这个文件夹，这样就可以在这个文件夹管理所有的系统app setting了？。<br>3.进阶<br>既然都统一到了一个文件夹，那么，就可以通过git，dropbox来进行备份，分享，也可以clone下其他人的dotfiles。<br>不知道自己的理解有没有错，话说中文基本没有入门教程，英文也就是github的那个和一些使用dropbox来备份的。<br><a href="https://github.com/zzuse/dotfiles">项目的github地址</a></p><h1 id="4-优雅的清除Manjaro-双系统用户"><a href="#4-优雅的清除Manjaro-双系统用户" class="headerlink" title="4. 优雅的清除Manjaro(双系统用户)"></a>4. 优雅的清除Manjaro(双系统用户)</h1><p>当你准备重装或者删除Manjaro的时候您需要进行以下操作以保证没有残留</p><ol><li>右击计算机 - 管理 - 存储磁盘 - 选择manjaro分区选择删除卷 - 直到如图删除manjaro全部分区<br><img data-src="https://img-blog.csdnimg.cn/20200818020118975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><p><img data-src="https://img-blog.csdnimg.cn/20200818020039716.png#pic_center" alt="在这里插入图片描述"><br>2. 安装esayuefi(免费软件)用来删除manjaro的启动项<img data-src="https://img-blog.csdnimg.cn/20200818020231510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>看到有两个<img data-src="https://img-blog.csdnimg.cn/20200818020409644.png#pic_center" alt="在这里插入图片描述"><br>找到一个详细信息有manjaro的<br><img data-src="https://img-blog.csdnimg.cn/20200818020449746.png#pic_center" alt="在这里插入图片描述"><br>选中 - 禁用 - 删除 - 重启<br><strong>如果还是不行</strong><br>a. 下载分区助手 - 找到EFI分区 - 分配盘符 - 以管理员方式运行记事本 - 打开文件 - 进入EFI分区 - 选中Manjaro 文件夹 - 删除<br><img data-src="https://img-blog.csdnimg.cn/20200818020930402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>b. 去BIOS设置删除有问题的启动项或者把有问题的启动项放最后</p><h1 id="优秀的教程网站与视频"><a href="#优秀的教程网站与视频" class="headerlink" title="优秀的教程网站与视频"></a>优秀的教程网站与视频</h1><p><a href="https://zhuanlan.zhihu.com/p/114296129">Manjaro-KDE配置全攻略</a><br><a href="https://sspai.com/post/55699">自由输入法RIME简明配置指南</a><br><a href="https://www.jianshu.com/p/300bbe1602d4">Rime 导入搜狗词库</a><br><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k主题</a><br><a href="https://www.reddit.com/r/kde/comments/8g97n7/how_to_add_themes_from_httpsstorekdeorg/">手动导入KDE主题</a><br><a href="https://www.cnblogs.com/zenPger/archive/2011/05/25/2057188.html">“要解锁，请输入默认密钥环的密码”的解决办法</a><br><a href="https://blog.csdn.net/weixin_44405279/article/details/104123282">【最全】manjaro pacman及其数字签名问题解决</a><br><a href="http://8u.hn.cn/Linuxmingling/13084.html">教你在Linux终端中键入密码时显示星号（*）的办法</a><br><a href="https://www.jianshu.com/p/b9b644cf528f">i3wm的使用说明</a><br><a href="https://www.zhihu.com/question/62251457/answer/200683406">如何配置linux 平铺式窗口管理器i3wm？-知乎</a><br><a href="https://github.com/Kuari/i3-wm-config">我fork的i3配置-github</a><br><a href="https://github.com/sainathadapa/i3-wm-config">一份解释较为详细的i3配置教程</a><br><a href="https://www.deviantart.com/tag/urxvt?offset=0&page=1">优秀i3wm配置汇总网站</a><br><a href="https://www.cnblogs.com/pipci/p/12571469.html">nmtui网络配置命令</a><br><a href="https://www.cnblogs.com/dengshihuang/p/8056716.html">使用文本用户界面（NMTUI）进行网络配置</a><br><a href="https://blog.csdn.net/qq_33215865/article/details/84720212">polybar基础使用</a><br><a href="https://github.com/Yucklys/polybar-nord-theme">一个Nord风格的Polybar</a><br><a href="https://github.com/adi1090x/polybar-themes">颇受欢迎的上千款样式大合集Polybar主题</a><br><a href="https://guyueshui.github.io/post/polybar-%E7%9A%84%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/">PolyBar手动配置笔记</a><br><a href="https://awesomeopensource.com/projects/polybar">The Top 26 Polybar Open Source Projects</a><br><a href="https://blog.fooleap.org/installation-and-configuration-mpd.html">安装和配置 MPD</a><br><a href="https://forum.archlabslinux.com/t/fix-mpd-on-polybar/1861/8">Fix MPD on polybar</a><br><a href="https://www.jianshu.com/p/7UJapk">dotfiles新手教程</a><br><a href="https://www.bilibili.com/video/BV17T4y1E7sc?from=search&seid=15772182517967257125">bilibili-66RINGpolybar的简单基本配置和如何使用官方文档</a></p><p><a href="https://space.bilibili.com/13081489?from=search&seid=1960259514159989618">UP主TheCW</a><br><a href="https://space.bilibili.com/43806321?from=search&seid=1960259514159989618">UP主紫色妖姬半岛</a></p><hr><h2 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h2>]]></content>
    
    
    <summary type="html">本文介绍了Manjaro-KDE桌面版的安装，polybar+i3 的配置</summary>
    
    
    
    <category term="Linux" scheme="http://liukairui.cc/categories/Linux/"/>
    
    <category term="Manjaro" scheme="http://liukairui.cc/categories/Linux/Manjaro/"/>
    
    
    <category term="Linux" scheme="http://liukairui.cc/tags/Linux/"/>
    
    <category term="Manjaro" scheme="http://liukairui.cc/tags/Manjaro/"/>
    
    <category term="KDE" scheme="http://liukairui.cc/tags/KDE/"/>
    
    <category term="i3wm" scheme="http://liukairui.cc/tags/i3wm/"/>
    
    <category term="PolyBar" scheme="http://liukairui.cc/tags/PolyBar/"/>
    
  </entry>
  
  <entry>
    <title>Vim使用全指南(环境配置,插件推荐,美化)(C++,Python,MarkDown,R...)</title>
    <link href="http://liukairui.cc/Vim%E4%BD%BF%E7%94%A8%E5%85%A8%E6%8C%87%E5%8D%97(%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE,%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90,%E7%BE%8E%E5%8C%96)(C++,Python,MarkDown,R...)/"/>
    <id>http://liukairui.cc/Vim%E4%BD%BF%E7%94%A8%E5%85%A8%E6%8C%87%E5%8D%97(%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE,%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90,%E7%BE%8E%E5%8C%96)(C++,Python,MarkDown,R...)/</id>
    <published>2020-10-30T16:00:16.000Z</published>
    <updated>2020-11-15T18:11:35.115Z</updated>
    
    <content type="html"><![CDATA[<p><font size="5" color="red">提示1：本文主要讲解了Windows下Vim的使用，配置，美化与使用Vim写C++,Python,MarkDown,R。其他语言的插件很不清楚</font></p><p><font size="5" color="red">提示2：Vim是一款工具，使用Vim是为了加快您的Coding效率的，不要配置比使用的时间还长(虽然很好玩)</font></p><p><font size="5" color="red">提示3：我想把这篇文章写的尽量的长，目的是帮助更多同学绕过Vim配置中的诸多天坑，请耐心观看，毕竟这要比你用一个星期去配置Vim来的快很多</font></p><p><font size="5" color="red">提示4：Manjarol来的先读16节</font></p><hr><h1 id="0-为什么要写这篇文章"><a href="#0-为什么要写这篇文章" class="headerlink" title="0.为什么要写这篇文章"></a>0.为什么要写这篇文章</h1><p>由于依赖win下的很多软件，不方便直接切换到Linux，但是关于Win下的vim使用说明与参考太少了，自己摸索了一段时间，斗胆分享一下，还请老哥们指教<br>以下是我目前的工作环境<br><img data-src="https://img-blog.csdnimg.cn/20200716201211338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200716201354268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="1-Vim的简介"><a href="#1-Vim的简介" class="headerlink" title="1.Vim的简介"></a>1.Vim的简介</h1><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。他可以让你手不离键盘的完成鼠标的所有操作，同时vim不依赖上下左右方向键</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>Vim是一个开源项目，所以显然Vim是免费的，由于Vim具有诸多小弊端，逐渐演变出一些分支软件比如NeoVim，但是可能Bug有点多，而且如果您排除了一切问题正常使用了Vim，换用NeoVim只需把配置文件复制一份到NeoVim的安装目录下即可。同时Vim的原作者也在努力补短板，所以我们仍然建议您学习Vim</p><hr><h1 id="2-Vim的起源"><a href="#2-Vim的起源" class="headerlink" title="2.Vim的起源"></a>2.Vim的起源</h1><blockquote><p>以下内容摘自<a href="https://www.oschina.net/translate/where-vim-came-from">开源中国</a>，不感兴趣可以跳过，但是我认为挺有趣的</p></blockquote><p>我最近无意中发现一个名为Intel HEX的文件格式。据我所知，Intel HEX文件（使用.hex后缀）是通过将二进制文件变为十六进制数据来降低它的不可读性。明显它们由那些编写微控制器程序或者将数据刻录到ROM中的人使用。无论如何，当我首次使用Vim打开一个十六进制文件，我感到震惊。至少对我来说，这种文件格式非常深奥，但是Vim已经对其了如指掌。每行十六进制文件都分成不同区域——Vim已经先一步为每一个字段都标记了不同的颜色。set ft? 我敬畏地问道。filetype-hex，Vim得意地回答。</p><p>Vim无处不在。这么多人都在使用它，像对十六进制文件的支持并不值得惊讶。Vim是Mac OS的预装程序，而且在Linux世界广泛应用。它甚至对讨厌它的人来说都很熟悉，由于很多热门的命令行工具都默认让用户进入Vim，以至于那些未入门的人会被困到Vim中，这已经变成了一个热门问题。有一些主流网站，包括Facebook，当你按下j键之后，页面会滚到下面，而当按下k键则会滚到上面——Vim在数字文化中的广泛传播达到了意想不到的程度。</p><p>Vim仍然很神秘。例如，它不像React，每个人都知道它是由Facebook开发和维护的，Vim没有明确的作者。尽管它是如此的普遍和重要，却没有任何类型的委员会或组织来为Vim做决策。你可能花了几分钟来浏览Vim网站，但是却找不到关于谁创建了Vim或者为什么创造它的有效信息。如果你启动Vim时没有提供文件参数，你会看到Vim的启动信息，说的是Vim是由“Bram Moolenaar等人”开发的。但是没有更多信息。谁是Bram Moolenaar，他的神秘同盟都有谁？</p><p>当我们在提问的时候，也许更重要的是，为什么退出Vim需要输入:wq？没错，这是一个“写(write)”操作，后面还跟了一个“退出(quit)”操作，但是这并不是一个特别直观的惯例。谁来决定当复制文本的时候应该调用“复制命令（yanking）”？为什么:%s/foo/bar/gc是“查找并替换”的缩写？Vim的用法太随意了，看起来没有好好决策，但是它们到底源于何处？</p><p>情况往往如此，问题答案源自于古老的计算机构，贝尔实验室。从某种意义上来说，Vim只是一个软件——名为“wq文件编辑器”——的最新版本，它从Unix时代开始已经持续开发并完善。</p><h2 id="2-1-Ken-Thompson-写了一个行编辑器-Line-Editor"><a href="#2-1-Ken-Thompson-写了一个行编辑器-Line-Editor" class="headerlink" title="2.1 Ken Thompson 写了一个行编辑器(Line Editor)"></a>2.1 Ken Thompson 写了一个行编辑器(Line Editor)</h2><p>1966年，贝尔实验室骋请了 Ken Thompson。Thompson 刚刚在加州大学伯克利分校获得了电子工程和计算机科学硕士学位。在那里，他使用了一个叫 QED 的文件编辑器，这是为 1965 年至 1966 年间的伯克利分时系统编写的。1Thompson 抵达贝尔实验室后所做的第一件事就是为麻省理工学院兼容的分时系统重写了 QED。后来他为 Multics 项目编写了另一个版本的 QED。在此过程中，他扩展了程序，以便用户可以搜索文件中的行并使用正则表达式进行替换。2</p><p>Multics 项目，跟伯克利分时系统(Berkeley Timesharing System)一样，旨在创建一个商业上可行的分时操作系统，由麻省理工学院、通用电气和贝尔实验室之间协作进行。AT＆T 最终认为该项目前途堪忧而选择退出。Thompson 和贝尔实验室的研究员 Dennis Ritchie，当时没有访问分时系统的权限，失去了这种系统带来的“交互式计算感”，于是着手创建自己的版本，最终在 1969 年 8 月被称为 Unix 3。当时他的妻子和年少的儿子正在加里福尼亚度假，Thompson 将新系统的基本组件整合到一起，分配开发操作系统、shell、编辑器、汇编程序的时间为每周一项。4</p><p>编辑器被命名为 ed。它基于 QED，但不是一个完全的重新实现。Thompson 决定放弃某些 QED 特性。对正则表达式的支持被削减，因此只能理解相对简单的正则表达式。QED 允许用户通过打开多个缓冲区并同时编辑多个文件，但是 ed 同时只能使用一个缓冲区工作。而且 QED 可以执行一个包含命令的缓冲区，而 ed 则不会这样做。这些简化是需要的。Dennis Ritchie 表示，没有 QED 的高级正则表达式并“没有太大的损失”。5</p><p>ed 现在是 POSIX 规范的一部分，所以如果你有一个符合 POSIX 标准的系统，你可以将它安装到你的计算机上。这值得一试，因为许多 ed 的命令都是今天的 Vim 的一部分。举例来说，为了将缓冲区的内容写入磁盘，你需要使用 w 命令；为了退出编辑器，你需要使用 q 命令。这两个命令可以同时写到同一行 —— 即 wq。与 Vim 相似，ed 是一个模态编辑器；从命令模式进入输入模式，你可以使用插入命令（i），追加命令（a），或者修改命令（c），取决于你要怎样去改变你的文本。ed 也引入了 s/foo/bar/g 的语法，用来查找和替换，或者“替换”文本。</p><p>有这么多的相似之处，你可能认为一般的 Vim 用户使用 ed 也没问题。不过 ed 在其它一些重要方面却一点也不像 Vim。ed 是一个真正的行编辑器。它是在电传打印机的时代编写并广泛使用的。当 Ken Thompson 和 Dennis Ritchie 在 Unix 上进行编码时，他们看起来是这样的：<br><img data-src="https://img-blog.csdnimg.cn/20200716202141725.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>ed 不允许你在打开的缓冲区中的其它行之间进行编辑和移动光标，因为每次对其进行更改时，ed 都需要重新打印整个文件。1969 年的 ed 还没有清空整个屏幕内容的机制，因为那时的屏幕是一张纸，而且所有需要被打印的将会使用墨水打印。如果有必要，你可以使用列表命令（l）告诉 ed 打印出一系列的行，但大部分时间你都在操作你看不到的文字。因此，使用 ed 有点像带着一个不怎么亮的灯在一所黑暗的房子里试图找到一条路径。你只能一次看到这么多，所以你必须尽力记住一切都在哪里。</p><p>这里有一个 ed 会话的例子。我已经添加了注释（在＃号之后的）来解释每一行的目的，如果这些注释被实际输入到了 ed，则不会将它们识别为注释，而且可能会出错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[sinclairtarget 09:49 ~]$ ed</span><br><span class="line">i                           # Enter input mode</span><br><span class="line">Hello world!</span><br><span class="line"></span><br><span class="line">Isn&#39;t it a nice day?</span><br><span class="line">.                           # Finish input</span><br><span class="line">1,2l                        # List lines 1 to 2</span><br><span class="line">Hello world!$</span><br><span class="line">$</span><br><span class="line">2d                          # Delete line 2</span><br><span class="line">,l                          # List entire buffer</span><br><span class="line">Hello world!$</span><br><span class="line">Isn&#39;t it a nice day?$</span><br><span class="line">s&#x2F;nice&#x2F;terrible&#x2F;g           # Substitute globally</span><br><span class="line">,l</span><br><span class="line">Hello world!$</span><br><span class="line">Isn&#39;t it a terrible day?$</span><br><span class="line">w foo.txt                   # Write to foo.txt</span><br><span class="line">38                          # (bytes written)</span><br><span class="line">q                           # Quit</span><br><span class="line">[sinclairtarget 10:50 ~]$ cat foo.txt</span><br><span class="line">Hello world!</span><br><span class="line">Isn&#39;t it a terrible day?</span><br></pre></td></tr></table></figure><p>正如你所看到的，ed 并不是一个很方</p><h2 id="2-2-Bill-Joy-写了一个文本编辑器"><a href="#2-2-Bill-Joy-写了一个文本编辑器" class="headerlink" title="2.2 Bill Joy 写了一个文本编辑器"></a>2.2 Bill Joy 写了一个文本编辑器</h2><p>ed 对于 Thompson 和 Ritchie 来说已经足够用了。不过其他人觉得它很难使用，并因其成为 Unix 对新手来说很困难的一个特别典型例子而出名。6 1975年，一个叫 George Coulouris 的人在伦敦玛丽皇后学院安装的 Unix 系统上开发了 ed 的一个改进版。Coulouris 利用他在玛丽皇后学院得到的视频显示来编写他的编辑器。Coulouris 的程序允许用户在屏幕上编辑某一行，在这一行上进行码字（想像一下在一行上使用 Vim）。Coulouris 将他的程序称为 em，或者“普通人的编辑器”，这是他在 Thompson 访问了玛丽皇后学院后受到的启发，据说 Thompson 看到了 Coulouris 构建的程序，然后驳回了它，并说他在编辑的时候不需要看文件的状态。7</p><p>1976年，Coulouris 带着 em 到了加州大学伯克利分校，在这里，他在计算机学院度过了一个夏天。这距 Ken Thompson 离开加州大学伯克利分校到贝尔实验室工作已经整整十年。在加州大学伯克利分校，Coulouris 遇到了 Bill Joy，一个在伯克利软件发行版(BSD)工作的研究生。Coulouris 向 Joy 展示了 em，Joy 从 Coulouris 的源代码开始，开发了一个 ed 的改进版，被称为 ex，意思是“扩展的 ed”。ex 的 1.1 版本与1978年第一版 BSD Unix 捆绑在一起。ex 在很大程度上与 ed 兼容，但是它添加了两个模式：一个“open”模式，它可以进行单行编辑，就像在 em 中一样，还有一个“visual”模式，接管了整个屏幕，并启用了我们今天习惯的整个文件的实时编辑。便的交互式程序。</p><p>对于 1979 年发布的第二个 BSD 版本，引入了一个名叫 vi 的可执行程序，它只能在可视模式下打开 ex。8</p><p>ex/vi（以下称为 vi）定义了现在我们使用 Vim 的大多数规则，这些规则已经不是 ed 的一部分。Joy 使用的视频终端是 Lear Siegler ADM-3A，它有一个没有光标的键盘。取而代之的是在 h，j，k，和 l 键的地方绘制了一个箭头，这就是 Joy 在 vi 中使用这些键来移动光标的原因、ADM-3A 键盘上的退出键也是今天我们可以找到 tab 键的地方，它解释了如何为这样一个难以触及的键分配了一个与退出模式相同的操作。命令的前缀冒号“:”也是来自于 vi，在常规模式下（即运行 ex 后进入的模式）使用冒号“:”作为提示。这解决了关于 ed 的长期抱怨，曾经的 ed 在这种情况下是不会提示用户的。在可视模式下，保存和退出现在可以输入经典的“:wq”命令。“Yanking”和“puts”标记以及用于设置选项的 set 命令都是原始 vi 的一部分。今天我们在 Vim 中进行基本的文本编辑使用的功能大部分都是 vi 的功能。</p><p><img data-src="https://img-blog.csdnimg.cn/20200716202300932.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>vi 是除了 ed 之外唯一与 BSD Unix 捆绑在一起的文本编辑器。那时，Emacs 需要花费上百美元（在GNU Emacs之前），所以 vi 变得非常流行。但是 vi 是 ed 的直接后裔，这意味着没有 AT＆T 源码许可证就无法修改源代码。因此激励了一些人去创建 vi 的开源版本。STEVIE（VI爱好者的 ST 编辑器）出现于 1987 年，Elvis 诞生于 1990 年，nvi 出现于 1994 年。其中一些克隆的版本增加了额外的功能，如语法高亮和分割窗口。Elvis 尤其将它的许多功能都纳入到了 Vim 中，因为许多 Elvis 用户都为此做出了努力。</p><h2 id="2-3-Bram-Moolenaar-编写了-Vim"><a href="#2-3-Bram-Moolenaar-编写了-Vim" class="headerlink" title="2.3 Bram Moolenaar 编写了 Vim"></a>2.3 Bram Moolenaar 编写了 Vim</h2><p>“Vim”，现在可称为“Vi Improved”(Vi改进版)，原来也被称为“Vi Imitation”（Vi模拟版）。与许多其它 vi 克隆版一样，Vim 的初衷是尝试复制 Vi，使其在不支持 Vi 的平台上使用。Bram Moolenaar，一位在荷兰芬洛一家复印公司工作的软件工程师，想要为他的全新 Amiga 2000 提供类似 vi 的东西。Moolenaar 已经习惯于在他的大学的 Unix 系统上使用 vi，现在已经熟练到“就像在使用他的手指”。10 因此，在 1988 年，使用现有的 vi 克隆版 STEVIE 作为起点，Moolenaar 开始开发 Vim。</p><p>Moolenaar 使用 STEVIE，是因为 STEVIE 之前曾出现在 Fred Fish 磁盘上。Fred Fish 是一名美国程序员每个月选择 Amiga 平台上最好的开源软件，放到一张软盘上并寄出。任何人都可以请求索取磁盘，而仅仅只需要邮费。STEVIE 的若干个版本在 Fred Fish Disk 上被发布。Moolenaar 使用的版本已在 Fred Fish Disk 256 上发布。11（令人失望的是，Fred Fish Disk 似乎与 Freddi Fish 无关）。</p><p>Moolenaar 喜欢 STEVIE，但是他很快发现缺少了许多 vi 命令。12 因此，对于 Vim 的第一个版本，Moolenaar 将 vi 兼容性作为他的首要任务。其他人编写了一系列 vi 宏，当通过正确的 vi 兼容编辑器运行时，可以解决随机生成的迷宫。Moolenaar 能够让这些宏在 Vim 中运行。1991年，Vim 首次发布于 Fred Fish Disk 591 中，被称为“Vi Imitation”。13 Moolenaar 添加了一些功能（包括多级撤消和编译错误的“quickfix”模式），这意味着 Vim 超越了 vi。但是 Vim 在 1993 年通过 FTP 发布 Vim 2.0 之前，一直保持着“Vi Imitation”的名字。</p><p>在各种互联网合作者的偶尔帮助下，Moolenaar 为 Vim 增加了一些稳定的功能。Vim 2.0 引入了对 wrap 选项的支持以及通过长行文本的水平滚动。Vim 3.0 增加了对分割窗口和缓冲区的支持，这一功能的灵感来自 vi，克隆了 nvi。Vim 现在还将每个缓冲区保存到交换文件中，以便编辑后的文本可以在崩溃中存活。Vimscript 首次亮相于 Vim 5.0，同时支持语法高亮。一直以来，Vim 的受欢迎程度都在增长。它被移植到 MS-DOS，Windows，Mac，甚至 Unix，在以上操作系统与原始的 vi 竞争。</p><p>2006年，Vim 被《Linux Journal》读者选为最受欢迎的编辑工具。14今天，根据 Stack Overflow 的 2018 年开发者调查，Vim 是最受欢迎的文本模式（即终端模拟器）编辑器，25.8％ 的软件开发者使用它（和 40％ 的系统管理员/DevOps 工程师）。15有一段时间，在20世纪80年代后期和整个20世纪90年代，程序员发起了“编辑器战争”，使得 Emacs 用户与 vi（以及最终的Vim）用户进行了对抗。虽然 Emacs 肯定还会继续发展，但有些人认为编辑大战已经结束，Vim 赢了。162018 Stack Overflow 开发者调查显示这是真的；只有 4.1％ 的受访者使用过 Emacs。</p><p>Vim是如何变得如此成功的？显然人们喜欢Vim所提供的功能。但我认为，Vim背后的悠久历史表明它拥有比其功能集更多的优势。Vim的代码库可以追溯到1988年，当时Moolenaar开始致力于此。另一方面，“wq文本编辑器” - 一个关于Unix风格的文本编辑器应该如何工作的更宽泛视角 - 可以追溯到半个世纪之前。“wq文本编辑器”有一些不同的具体表达方式，但部分归功于Bill Joy和Bram Moolenaar对后向兼容性的特别关注，随着时间的推移逐渐积累了好的想法。从这个意义上说，“wq文本编辑器”是运行时间最长、最成功的开源项目之一，享用了计算机世界一些最伟大的思想家的贡献。我不认为“初创公司 - 抛弃所有先例 - 并创造 - 破坏性 - 全新-软件”的发展方法必然是坏事，但Vim提醒世人：协作和增量方法也可以产生奇迹。</p><hr><h1 id="3-Vim的下载与安装-加入Vim到环境变量"><a href="#3-Vim的下载与安装-加入Vim到环境变量" class="headerlink" title="3.Vim的下载与安装(加入Vim到环境变量)"></a>3.Vim的下载与安装(加入Vim到环境变量)</h1><p><strong>请注意这里是第一个天坑</strong><br>如果您在<a href="https://www.vim.org/">Vim官网</a>的下载页面下载Vim for Windows，您大概率会下载到Vim32位版或者Vim 32与64均兼容版，如果下载的是这两个，您安装的时候会默认安装Vim32位版。这似乎不是问题，但是很多Vim插件是需要Python支持的，或者需要本地编译，如果您的Vim是32位的，64位Python是不会被正确识别并调用的。这会导致你必须安装很多python的版本，并且默认的必须是32位的(如果你默认的python也是32位的当我没说)<br>所以我推荐你到这里下载Vim64位安装包<a href="https://github.com/vim/vim-win32-installer">Vim-wim32-installer 项目-Github</a> 虽然这里写的是32，但是是有64位的安装包的，同时这是Vim官方的项目，请放心使用<br>打开链接之后，在右侧找到并点击Releases，然后从上到下找到这样的一个链接<br><img data-src="https://img-blog.csdnimg.cn/20200716204853993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击：gvim_X.X.XXXX_x64.exe 64-bit installer，下载，恭喜你下载到了一个纯64位的Vim，同时在你安装的时候您也会看到写有(x64)<br><img data-src="https://img-blog.csdnimg.cn/20200716205458288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后的安装过程就简单多了，按照Vim的默认配置安装即可，与其他Windows应用一样只要一直下一步即可，<strong>我不建议您修改安装路径1. Vim不大，不会占用您C盘很多空间(全部安装仅44MB) 2. 与大多数人的配置保持一致非常方便您询问与解决问题</strong> </p><p>把Vim的安装路径加入环境变量(如果您不了解如何加入环境变量请自行百度，比较简单的一个操作) 尝试Win+R-&gt;cmd-&gt;vim试试是否加入环境变量成功，<strong>如果成功打开请按窗口右上角的关闭按钮关闭cmd</strong></p><p>至此，您安装好了一个<strong>64位的Vim</strong>，这会为您探索Vim节省一天的配置Python与重装Vim的时间</p><hr><h1 id="4-认识与打开Vim"><a href="#4-认识与打开Vim" class="headerlink" title="4. 认识与打开Vim"></a>4. 认识与打开Vim</h1><p>安装结束后，您会发现您的开始菜单中有好多Vim，而且名字都不一样<br><img data-src="https://img-blog.csdnimg.cn/20200716210254958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>他们的区别如下</p><ol><li><p>有g和没有g<br>gVim 是在windows下的Gui图形用户界面的的 vim (GUI Vim)，支持windows的一些快捷方式，支持鼠标操作<br>vim 是在windows下的类似linux vi 编辑的界面，只能用键盘操作<br>vim的操作指令同时适用于gVim</p></li><li><p> Vim, Vim Diff, Vim Easy, Vim Read-only<br>Diff 是用来对比两个文件内容用的，直接打开挺没用的，不过直接拖2个文件到快捷方式上倒是可行；<br>Easy启动的时候是insert模式，适合普通windows用户的习惯；<br>Read-Only的用途：比如用read-only打开已经用vim打开过的文件，就不会提示让人烦躁的.swp文件存在的问题；</p></li></ol><p>在此，您只需知道，我们暂时会使用Vim来入门，最后您会使用gVim编程，这是因为gVim在没有配置的时候比Vim还不方便操作</p><p>您可以打开Vim了，确实非常丑，似乎不是用来写代码的。如果您开启了声音，大概率的您会发现按动绝大多数按键，windows都会发出报错的声音(一个噔~)，而且什么都输入不进去…</p><p>试着按一下键盘的<code>i</code>键，你会发现您可以输入东西了，但是似乎只能输入，如何保存呢？如何关闭vim呢？您会发现除非直接按右上角的×，您甚至无法优雅的退出Vim，那就按右上角的×吧，连文件都没有保存</p><hr><h1 id="5-Vim基本的使用说明"><a href="#5-Vim基本的使用说明" class="headerlink" title="5. Vim基本的使用说明"></a>5. Vim基本的使用说明</h1><p>在这个阶段，您需要在Vim上做一些实践，但是可能大部分情况下都会使用右上角的×来关闭Vim，这一阶段的内容不需要保存，就这样放肆的强制关闭Vim吧，同时Vim的很多按键方式与其他编辑器不同，尝试去适应他，不要排斥，相信在您完成了本教程的配置，您的肌肉记忆就会形成，加油</p><h2 id="5-1-用Vim打开文件"><a href="#5-1-用Vim打开文件" class="headerlink" title="5.1 用Vim打开文件"></a>5.1 用Vim打开文件</h2><p>在cmd下输入vim + 路径即可，同时直接将文件拖动到快捷方式图标上也可以</p><h2 id="5-2-Vim的四种模式"><a href="#5-2-Vim的四种模式" class="headerlink" title="5.2 Vim的四种模式"></a>5.2 Vim的四种模式</h2><p>基本上 vim 共分为四种模式，分别是普通模式（Normal mode）、底行模式(Last line mode)、输入模式（Insert mode）和可视化模式（Visual mode）此处似乎与其他教程不一样，但是没有问题，只是分类不同而已。 四种模式的切换与作用如下</p><pre class="mermaid">graph LRst[启动] -- 自动进入 --> Nor[Normal模式]Nor --按键i--> Ins[Insert模式]Ins --按键ESC--> NorNor --按键:--> Lin[行末模式]Lin --按键ESC--> NorNor --v系列快捷键--> Val[可视化模式]Val --按键ESC--> Norsubgraph 可视化系列模式Val --小写v--> nVal[普通可视化模式]Val --大写V--> lval[可视化行模式]Val --CtrlV--> kval[可视化块模式]end</pre><h3 id="5-2-1Normal-Mode"><a href="#5-2-1Normal-Mode" class="headerlink" title="5.2.1Normal Mode"></a>5.2.1Normal Mode</h3><p>这个模式一般用于浏览代码与进入底行模式输入命令，使用快捷键修改文章，这里仅仅介绍少量按键并讲解快捷键命令的组合原理，<br>| 快捷键             | 效果                 |<br>| —————— | ——————– |<br>| h 或 向左箭头键(←) | 光标向左移动一个字符 |<br>| j 或 向下箭头键(↓) | 光标向下移动一个字符 |<br>| k 或 向上箭头键(↑) | 光标向上移动一个字符 |<br>| l 或 向右箭头键(→) | 光标向右移动一个字符 |<br>   用上面的按键你就可以上下浏览代码了，但是不建议使用方向键<br>   Vim中还有一些键位是进行<strong>光标移动</strong>的<br>| 快捷键 <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>| 效果|<br>| —————- | ———————————————————— |<br>| [Ctrl] + [f]     | 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)          |<br>| [Ctrl] + [b]     | 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)           |<br>| [Ctrl] + [d]     | 屏幕『向下』移动半页                                         |<br>| [Ctrl] + [u]     | 屏幕『向上』移动半页                                         |<br>| +                | 光标移动到非空格符的下一行                                   |<br>| -                | 光标移动到非空格符的上一行                                   |<br>   | n &lt; space &gt;         | 那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20&lt; space &gt; 则光标会向后面移动 20 个字符距离。 || 0 或功能键[Home] | 这是数字『 0 』：移动到这一行的最前面字符处 (常用)           || $ 或功能键[End]  | 移动到这一行的最后面字符处(常用)                             || H                | 光标移动到这个屏幕的最上方那一行的第一个字符<br>   | M                | 光标移动到这个屏幕的中央那一行的第一个字符                   |<br>   | L                | 光标移动到这个屏幕的最下方那一行的第一个字符                 |<br>   | G                | 移动到这个档案的最后一行(常用)                               |<br>   | nG               | n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu) |<br>   | gg               | 移动到这个档案的第一行，相当于 1G 啊！ (常用)                |<br>   | n&lt; Enter &gt;         | n 为数字。光标向下移动 n 行(常用)                            |<br>   以上是光标移动命令，然后是<strong>文档查询替换</strong>命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /    vbird 即可！ (常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird     去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird     的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下     N 则表示『向上』搜寻 vbird 。</td></tr><tr><td>使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为     word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr></tbody></table><p>最后是最常用的<strong>增删改命令</strong></p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(    相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第     20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30     行。 (常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。     如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><p>以上的增删改查命令有一定的命名规律，比如<code>y</code>是复制，然后复制什么没说，你用<code>yw</code>就是复制一个单词(word)，重复写一个命令就是对这个对行操作，例如<code>yy</code>就是复制一行，还可以<code>y+数字</code>，例如<code>y3</code>就是复制三行，还可以与其他命令组合比如<code>yG</code>就是从当前光标位置复制到文档最后，这样组合才可以让我们高效的使用Vim</p><h3 id="5-2-2-Last-line-mode模式"><a href="#5-2-2-Last-line-mode模式" class="headerlink" title="5.2.2 Last line mode模式"></a>5.2.2 Last line mode模式</h3><p>我一直觉得这就是Vim的Normal模式，结果别人都觉得这是一个新模式，那就当他是个新模式吧<br>你会发现在没有配置Vim的其他功能的时候，Vim的下面会写有一个Normal等，但是似乎下面还有一行，这一行是让你输入命令的，想要输入命令必须使用<code>\</code>或者<code>:</code>触发，<code>\</code>是用来查找内容的，严格说属于Normal模式，所以其实只有<code>:</code>开头的命令<br>| 命令                                                         | 作用                                                         |<br>| ———————————————————— | ———————————————————— |<br>| :w                                                           | 将编辑的数据写入硬盘档案中(常用)                             |<br>| :w!                                                          | 若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！ |<br>| :q                                                           | 离开 vi (常用)                                               |<br>| :q!                                                          | 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。    |<br>| 注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ |                                                              |<br>| :wq                                                          | 储存后离开，若为 :wq! 则为强制储存后离开 (常用)              |<br>| :w [filename]                                                | 将编辑的数据储存成另一个档案（类似另存新档）                 |<br>| :r [filename]                                                | 在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面 |<br>| :n1,n2 w [filename]                                          | 将 n1 到 n2 的内容储存成 filename 这个档案。                 |<br>| :! command                                                   | 暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！ |<br>还有很多，但是都是特殊的命令，或者某一个插件特有的，这里不做介绍</p><h3 id="5-2-3-Insert模式"><a href="#5-2-3-Insert模式" class="headerlink" title="5.2.3 Insert模式"></a>5.2.3 Insert模式</h3><p>插入模式是让你正常写代码的，注意的是，插入模式下hjkl的上下左右切换是失效的，可以用方向键，但是不建议，还是退出编辑模式在normal下改光标方便，进入插入模式的快捷键最常用的是<code>i</code>，还有如下的也可以<br>| 快捷键 | 作用|<br>| —— | ———————————————————— |<br>| i, I   | 进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用) |<br>| a, A   | 进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用) |<br>| o, O   | 进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用) |<br>| r, R   | 进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用) |<br>这一部分没什么好说的，因为没有快捷键(否则你打着打着代码就触发了什么快捷键)</p><h3 id="5-2-4-Visual模式"><a href="#5-2-4-Visual模式" class="headerlink" title="5.2.4 Visual模式"></a>5.2.4 Visual模式</h3><p>可视化模式在很多文献中都没有介绍，但是是一个非常好用的模式，在这个模式下你可以用鼠标选择内容要选取一段文本，首先将光标移到段首，在普通模式下按 v 进入可视模式，然后把光标移到段末。 需要注意，光标所在字符是包含在选区中的</p><ul><li>v 进入字符可视化模式</li><li>V 进入行可视化模式</li><li>Ctrl+v 进入块可视化模式<br>块选择在表格中删除指定列非常有用<br>用 v 命令进入的字符可视化模式（Characterwise visual mode)。文本选择是以字符为单位的。<br>用 V 命令进入的行可视化模式（Linewise visual mode)。文本选择是以行为单位的。<br>用 ctrl-V 进入的块可视化模式（Blockwise visual mode）。可以选择一个矩形内的文本。</li></ul><p>使用鼠标或者hjkl即可选中字符/行/块，然后可以y，x…<br>更有用的是对块批量操作，例如批量注释可以这么写<br><strong>批量注释：</strong><br>Ctrl + v 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 I 进入行首插入模式输入注释符号如 // 或 #，输入完毕之后，按两下 ESC，Vim 会自动将你选中的所有行首都加上注释，保存退出完成注释。<br><strong>取消注释：</strong><br>Ctrl + v 进入块选择模式，选中你要删除的行首的注释符号，注意 // 要选中两个，选好之后按 d 即可删除注释，ESC 保存退出<br>还可以在选择文字后输入<code>:</code>然后把你在平时这么用的就怎么写，注意按<code>:</code>会多出一些东西不要管他,例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:A &#x2F;&#x2F;这是一堆注释</span><br></pre></td></tr></table></figure><p>然后Vim会根据你所写，先对每一样在Normal模式下使用<code>A</code>把光标移动到该行行尾，然后进入Insert模式输入<code>//这是一堆注释</code>对每一行都操作结束之后就会自动退出到Normal模式</p><p>具体的这个模式如何使用见<a href="https://linux.cn/article-10589-1.html">Vim可视化入门</a></p><h2 id="5-3-宏录制"><a href="#5-3-宏录制" class="headerlink" title="5.3 宏录制"></a>5.3 宏录制</h2><p>不怎么用，自己查吧</p><hr><h1 id="6-Vim的配置文件基本使用方法"><a href="#6-Vim的配置文件基本使用方法" class="headerlink" title="6. Vim的配置文件基本使用方法"></a>6. Vim的配置文件基本使用方法</h1><p>Vim不像其他的IDE会有一个图形化的配置界面，你需要将你需要的配置写到一个配置文件里面，Vim在启动的时候会读取这个文件，然后根据文件需要去配置Vim<br>如果你在百度搜索Vim配置文件相关的内容，只会得到是一个叫做<code>.vimrc</code>的文件，但是就算全盘搜索也找不到他，为啥呢，<code>.vimrc</code>是Linux下的文件，win下的配置文件是<code>_vimrc</code>，于是你会发现在Vim安装目录和<code>C://User/你的用户名</code>下还有一个，我们使用自己用户名下的,如果没有的话就自己新建一个，这个不是因为你的Vim没安装，他就是没有</p><h2 id="6-1-第一个Vim配置，行号"><a href="#6-1-第一个Vim配置，行号" class="headerlink" title="6.1 第一个Vim配置，行号"></a>6.1 第一个Vim配置，行号</h2><p>找到或者新建这个文件，右键选中用Vim打开，我们就打开了一个空的<code>_vimrc</code>文件，试着往里面写下<code>set number</code>，这个配置的意思是自动为添加行号，这样你写代码就可以在左边看到行号了<br>按动<code>ZZ</code>(大写的)保存文件，然而行号并没有出来，这是因为我们没有”刷新配置文件”,在Normal下输入命令<code>:source $MYVIMRC</code>然后你就可以看到行号了，至此你成功配置了第一个Vimrc</p><h2 id="6-2-设置快捷键映射"><a href="#6-2-设置快捷键映射" class="headerlink" title="6.2 设置快捷键映射"></a>6.2 设置快捷键映射</h2><p>但是这似乎比较麻烦，每次修改之后还要输入那么长的刷新保存，如果有个快捷键帮助我们就好了,我设置的快捷键是大写的R，也就是<code>Shift+R</code>，那么我们应该如何设置呢？首先要想好自己要设置的快捷键，不能与之前的快捷键相重合，还有快捷键的生效范围，是只有在Normal模式下生效还是在四个模式下都生效。例如我将大写<code>R</code>作为快捷键最好只在Normal下操作，否则在Insert模式下我输入大写的R就没法输入了，但是例如F5这样的快捷键从来不会与其他模式冲突我们就可以设置为全局的<br>快捷键映射可以将一个组合键映射到一个命令，一个其他的组合键或者其他语法为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前缀+map 快捷键 映射结果</span><br></pre></td></tr></table></figure><p>这里的前缀限定了map的作用范围是那几个模式，不写前缀默认是前缀n</p><ul><li>nmap：只有在Normal模式下生效</li><li>vmap：只有在Visual模式下生效</li><li>imap：只有在Insert模式下生效</li><li>cmap：只有在行底命令的模式下生效</li><li>Xnoremap：X是前面的n/v/i/c，nore表示非递归的例如a被映射为了b，b被映射为了c，那么如果是递归的的话a就映射为了c</li></ul><p>对于被映射与要映射的动作按键遵循以下写法</p><ul><li>普通按键就直接写</li><li>Alt组合键写成<code>&lt;A-X&gt;</code>,例如Alt+S就是<code>&lt;A-S&gt;</code></li><li>Ctrl组合键写成<code>&lt;C-X&gt;</code>,例如Ctrl+S就是<code>&lt;C-S&gt;</code></li><li>FX写成<code>&lt;FX&gt;</code>，例如<code>&lt;F5&gt;</code>就是F5</li><li>四个方向键写成<code>&lt;方向&gt;</code>，例如<code>&lt;LEFT&gt;</code>就是方向左键</li><li>ESC就写成<code>&lt;ESC&gt;</code></li><li>Leader键就写成<LEADER></li><li>回车写成<code>&lt;CR&gt;</code></li></ul><p>关于leader键：<br>Vim预置有很多快捷键，再加上各类插件的快捷键，大量快捷键出现在单层空间中难免引起冲突。为缓解该问题，而引入了前缀键<code>&lt;leader&gt;</code>。藉由前缀键， 则可以衍生出更多的快捷键命名空间（namespace)。例如将r键配置为<code>&lt;leader&gt;r</code>、<code>&lt;leader&gt;&lt;leader&gt;r</code>等多个快捷键。前缀键默认为<code>\</code><br>但是在我的键盘上<code>\</code>太远了，于是我就把leader换成了空格，只需要如下的命令<code>let mapleader = &quot;\&lt;space&gt;&quot;</code>写在开头就完成了替换</p><p>针对上面的问题我们就可以把刷新配置文件映射成S，配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map R :source $MYVIMRC&lt;CR&gt;</span><br></pre></td></tr></table></figure><h2 id="6-3-安装插件管理器"><a href="#6-3-安装插件管理器" class="headerlink" title="6.3 安装插件管理器"></a>6.3 安装插件管理器</h2><p>Vim好用就在于有大量插件供我们使用，这样我们可以自己配置自己喜欢的Vim，这里我们介绍插件管理器<code>Vim-Pluig</code>，同时我们一般的插件都是在GitHub上托管的，所以我们一般也是在GitHub上找插件，Vim的插件非常好识别，他使用的语言大多会写<code>Vim script</code></p><ol><li><a href="https://git-scm.com/">下载Git</a></li><li><a href="https://github.com/junegunn/vim-plug">打开插件管理器所在仓库</a></li><li>下载如下文件并放入Vim的安装目录下的autoload<br><img data-src="https://img-blog.csdnimg.cn/2020071714475696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717144957144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样我们就完成了插件管理器的安装<br>之后我们开始尝试安装第一个插件<br>首先在vimrc中写下这样三行，他可以帮助插件管理器识别你要装那些插件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)</span><br><span class="line"></span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure><p>以后只要是需要安装的插件我们只需要把地址写在里面就可以直接安装了</p><h2 id="6-4-尝试安装第一个插件"><a href="#6-4-尝试安装第一个插件" class="headerlink" title="6.4 尝试安装第一个插件"></a>6.4 尝试安装第一个插件</h2><p>我们先来尝试安装一个主题插件，就安装我自用的主题snazzy吧。<br>首先我们找到<a href="https://github.com/connorholyday/vim-snazzy">这个主题的GitHub库</a><br>那如何告诉插件管理器我要安装这个插件，这个插件的安装包在哪里呢？<br>刚刚那个库的地址是<br><a href="https://github.com/connorholyday/vim-snazzy">https://github.com/connorholyday/vim-snazzy</a><br>我们发现<code>https://github.com/</code>是GitHub的前缀，而插件管理器默认库在GitHub所以只要告诉插件<code>connorholyday/vim-snazzy</code>就可以了，于是我们只需要在哪两行代中间写上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;connorholyday&#x2F;vim-snazzy&#39;</span><br></pre></td></tr></table></figure><p>即为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)</span><br><span class="line">Plug &#39;connorholyday&#x2F;vim-snazzy&#39;</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure><p>完事，我们还要让插件管理器去安装它，只需保存并刷新配置文件，输入命令<code>:PlugInstall</code>回车，等他跑完进度条即可<br>至此我们完成了第一个插件的<strong>安装</strong><br>但是似乎这个主题不能用，这么办呢，我们要告诉Vim我要应用这个主题，只要在配置文件最后写<code>colorscheme snazzy</code>，保存刷新配置文件即可，如果不行试试gVim</p><h2 id="6-5-尝试卸载第一个插件"><a href="#6-5-尝试卸载第一个插件" class="headerlink" title="6.5 尝试卸载第一个插件"></a>6.5 尝试卸载第一个插件</h2><p>如果哪一天插件不想要了，可以卸载，方法很简单，要么删除插件安装的哪一行，要么把他注释掉(vim下的注释是<code>&quot;</code>)，然后保存刷新配置文件，输入命令<code>:PlugClean</code><br>至此我介绍了Vim配置文件中常见的几种配置命令</p><hr><h1 id="7-基于问题解决的配置介绍"><a href="#7-基于问题解决的配置介绍" class="headerlink" title="7. 基于问题解决的配置介绍"></a>7. 基于问题解决的配置介绍</h1><p>在这一节中我将介绍Vim的常用插件的使用与Vim常用概念功能的介绍，但是不包括对于编程语言的适配，==<strong>从现在开始请使用gVim代替Vim</strong>==</p><h2 id="7-1-关于gVim"><a href="#7-1-关于gVim" class="headerlink" title="7.1 关于gVim"></a>7.1 关于gVim</h2><p>本来Vim用的好好的为什么要换gVim呢，因为vim是基于cmd/Powershell 对于背景色等等很多方面支持很差，所以开发了gVim<br>打开gVim，但是比Vim还丑，将就看看，我们开始基于他美化与修改，不要选上面的菜单与工具，比较麻烦<br>一下没有说明就是王配置文件直接写就好了</p><h2 id="7-2-为打开-vimrc配置快捷键"><a href="#7-2-为打开-vimrc配置快捷键" class="headerlink" title="7.2 为打开_vimrc配置快捷键"></a>7.2 为打开<code>_vimrc</code>配置快捷键</h2><p>配置vim每次都要打开_vimrc,不如设置个快捷键让他打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map rc : e $HOME\_vimrc&lt;CR&gt; </span><br></pre></td></tr></table></figure><p>很简单了，就是在Normal模式下按下<code>rc</code>，然后就打开了配置文件</p><h2 id="7-3-为Vim配置默认编码"><a href="#7-3-为Vim配置默认编码" class="headerlink" title="7.3 为Vim配置默认编码"></a>7.3 为Vim配置默认编码</h2><p>将编码设置为UTF-8，方便以后我们中文注释的Coding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set encoding&#x3D;utf-8</span><br></pre></td></tr></table></figure><h2 id="7-4-为Vim配置代码高亮"><a href="#7-4-为Vim配置代码高亮" class="headerlink" title="7.4 为Vim配置代码高亮"></a>7.4 为Vim配置代码高亮</h2><p>最朴素的高亮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax on </span><br></pre></td></tr></table></figure><p>你会发现好像是有，但是不全，比如c++的<code>string</code>，这个到后面给C++配置的时候说</p><h2 id="7-5-将gVim的语言修改为英文方便使用"><a href="#7-5-将gVim的语言修改为英文方便使用" class="headerlink" title="7.5 将gVim的语言修改为英文方便使用"></a>7.5 将gVim的语言修改为英文方便使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language C </span><br></pre></td></tr></table></figure><h2 id="7-6-直接写上-向下兼容vi"><a href="#7-6-直接写上-向下兼容vi" class="headerlink" title="7.6[直接写上]向下兼容vi"></a>7.6[直接写上]向下兼容vi</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">filetype on</span><br><span class="line">filetype indent on</span><br><span class="line">filetype plugin on</span><br></pre></td></tr></table></figure><h2 id="7-7-在可视化下兼容鼠标"><a href="#7-7-在可视化下兼容鼠标" class="headerlink" title="7.7 在可视化下兼容鼠标"></a>7.7 在可视化下兼容鼠标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set mouse&#x3D;a</span><br></pre></td></tr></table></figure><h2 id="7-8-将缩进设置为空格"><a href="#7-8-将缩进设置为空格" class="headerlink" title="7.8 将缩进设置为空格"></a>7.8 将缩进设置为空格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &amp;t_ut&#x3D;&#39;&#39;</span><br><span class="line">set expandtab </span><br></pre></td></tr></table></figure><h2 id="7-9-缩进配置为4空格"><a href="#7-9-缩进配置为4空格" class="headerlink" title="7.9 缩进配置为4空格"></a>7.9 缩进配置为4空格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set tabstop&#x3D;4</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">set softtabstop&#x3D;4</span><br></pre></td></tr></table></figure><h2 id="7-10-在空行末显示"><a href="#7-10-在空行末显示" class="headerlink" title="7.10 在空行末显示$"></a>7.10 在空行末显示<code>$</code></h2><p>win下似乎没有用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set list</span><br></pre></td></tr></table></figure><h2 id="7-11-渲染Tab和空格"><a href="#7-11-渲染Tab和空格" class="headerlink" title="7.11 渲染Tab和空格"></a>7.11 渲染Tab和空格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set listchars&#x3D;tab:▸\ ,trail:▫</span><br></pre></td></tr></table></figure><h2 id="7-12-尽可能在滚动的时候留下几行"><a href="#7-12-尽可能在滚动的时候留下几行" class="headerlink" title="7.12 尽可能在滚动的时候留下几行"></a>7.12 尽可能在滚动的时候留下几行</h2><p>就是往下滚的时候除非到行尾，保证当前选中行至少是倒数第五行，向上同理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set scrolloff&#x3D;5</span><br></pre></td></tr></table></figure><h2 id="7-13-开启退格跨行退格"><a href="#7-13-开启退格跨行退格" class="headerlink" title="7.13 开启退格跨行退格"></a>7.13 开启退格跨行退格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set backspace&#x3D;indent,eol,start</span><br></pre></td></tr></table></figure><h2 id="7-14-开启代码折叠"><a href="#7-14-开启代码折叠" class="headerlink" title="7.14 开启代码折叠"></a>7.14 开启代码折叠</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set foldmethod&#x3D;indent</span><br><span class="line">set foldlevel&#x3D;99</span><br></pre></td></tr></table></figure><h2 id="7-15-在三种模式下采用三种光标-仅gVim"><a href="#7-15-在三种模式下采用三种光标-仅gVim" class="headerlink" title="7.15 在三种模式下采用三种光标[仅gVim]"></a>7.15 在三种模式下采用三种光标[仅gVim]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let &amp;t_SI &#x3D; &quot;\&lt;Esc&gt;]50;CursorShape&#x3D;1\x7&quot;</span><br><span class="line">let &amp;t_SR &#x3D; &quot;\&lt;Esc&gt;]50;CursorShape&#x3D;2\x7&quot;</span><br><span class="line">let &amp;t_EI &#x3D; &quot;\&lt;Esc&gt;]50;CursorShape&#x3D;0\x7&quot;</span><br></pre></td></tr></table></figure><h2 id="7-16-永远保留命令行"><a href="#7-16-永远保留命令行" class="headerlink" title="7.16 永远保留命令行"></a>7.16 永远保留命令行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set laststatus&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="7-17-在重新打开文件后保留光标位置"><a href="#7-17-在重新打开文件后保留光标位置" class="headerlink" title="7.17 在重新打开文件后保留光标位置"></a>7.17 在重新打开文件后保留光标位置</h2><p>Win下似乎不可?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">au BufReadPost * if line(&quot;&#39;&#39;\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#39;\&quot;&quot;) &lt;&#x3D; line(&quot;$&quot;) | exe &quot;normal! g&#39;\&quot;&quot; | endif.</span><br></pre></td></tr></table></figure><h2 id="7-19-自动缩进"><a href="#7-19-自动缩进" class="headerlink" title="7.19 自动缩进"></a>7.19 自动缩进</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autoindent</span><br></pre></td></tr></table></figure><h2 id="7-20-设置字体-仅gVim"><a href="#7-20-设置字体-仅gVim" class="headerlink" title="7.20 设置字体[仅gVim]"></a>7.20 设置字体[仅gVim]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set guifont&#x3D;Powerline_Consolas:h12:cANSI:qDRAFT</span><br></pre></td></tr></table></figure><p>意思是用Powerline Consolas字体，字号12<br>关于为什么一定用这个字体，如何下载见airline插件一节</p><h2 id="7-21-隐藏gVim的四个滚动条"><a href="#7-21-隐藏gVim的四个滚动条" class="headerlink" title="7.21 隐藏gVim的四个滚动条"></a>7.21 隐藏gVim的四个滚动条</h2><p>隐藏gVim的四个滚动条如果被激活了F2再次关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map &lt;silent&gt; &lt;F2&gt; :if &amp;guioptions &#x3D;~# &#39;T&#39; &lt;Bar&gt;</span><br><span class="line">\set guioptions-&#x3D;T &lt;Bar&gt;</span><br><span class="line">\set guioptions-&#x3D;m &lt;bar&gt;</span><br><span class="line">\else &lt;Bar&gt;</span><br><span class="line">\set guioptions &#x3D;T &lt;Bar&gt;</span><br><span class="line">\set guioptions &#x3D;m &lt;Bar&gt;</span><br><span class="line">\endif&lt;CR&gt;</span><br><span class="line">set guioptions-&#x3D;m   &quot;Hide Menu</span><br><span class="line">set guioptions-&#x3D;T   &quot;Hide Tool-Bar</span><br><span class="line">set guioptions-&#x3D;r   &quot;hide right scroll</span><br><span class="line">set guioptions-&#x3D;b   &quot;hide buttom scoll</span><br><span class="line">set guioptions-&#x3D;L   &quot;hide left scroll</span><br></pre></td></tr></table></figure><h2 id="7-21-设置相对行号"><a href="#7-21-设置相对行号" class="headerlink" title="7.21 设置相对行号"></a>7.21 设置相对行号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set number</span><br><span class="line">set relativenumber</span><br></pre></td></tr></table></figure><h2 id="7-22-突出显示选中的字符所在行列"><a href="#7-22-突出显示选中的字符所在行列" class="headerlink" title="7.22 突出显示选中的字符所在行列"></a>7.22 突出显示选中的字符所在行列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set cursorline</span><br><span class="line">set cursorcolumn</span><br></pre></td></tr></table></figure><h2 id="7-23-自动换行"><a href="#7-23-自动换行" class="headerlink" title="7.23 自动换行"></a>7.23 自动换行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set wrap</span><br></pre></td></tr></table></figure><h2 id="7-24-显示输入的命令-右下角"><a href="#7-24-显示输入的命令-右下角" class="headerlink" title="7.24 显示输入的命令(右下角)"></a>7.24 显示输入的命令(右下角)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set showcmd</span><br></pre></td></tr></table></figure><h2 id="7-25-输入命令的时候Tab显示提示"><a href="#7-25-输入命令的时候Tab显示提示" class="headerlink" title="7.25 输入命令的时候Tab显示提示"></a>7.25 输入命令的时候Tab显示提示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set wildmenu</span><br></pre></td></tr></table></figure><h2 id="7-26-智能查找-高亮显示结果"><a href="#7-26-智能查找-高亮显示结果" class="headerlink" title="7.26 智能查找 高亮显示结果"></a>7.26 智能查找 高亮显示结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set hlsearch</span><br><span class="line">exec &quot;nohlsearch&quot;</span><br><span class="line">set incsearch</span><br><span class="line">set ignorecase</span><br><span class="line">set smartcase</span><br></pre></td></tr></table></figure><h2 id="7-27-复制粘贴到剪贴板"><a href="#7-27-复制粘贴到剪贴板" class="headerlink" title="7.27 复制粘贴到剪贴板"></a>7.27 复制粘贴到剪贴板</h2><p>注意的是我们的y和p只能在vim内部复制粘贴，想要复制粘贴到系统剪贴板需要用另一个命令，我把他换为<code>&lt;leader&gt;+y</code>,然后与y使用无异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vnoremap &lt;Leader&gt;y &quot;+y</span><br><span class="line">nmap &lt;Leader&gt;p &quot;+p</span><br></pre></td></tr></table></figure><h2 id="7-28-快捷保存-刷新"><a href="#7-28-快捷保存-刷新" class="headerlink" title="7.28 快捷保存 刷新"></a>7.28 快捷保存 刷新</h2><p>这里用S保存但是要声明不适用于s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map S : w&lt;CR&gt;</span><br><span class="line">map s &lt;nop&gt;</span><br><span class="line">map Q :q&lt;CR&gt;</span><br><span class="line">map R :source $MYVIMRC&lt;CR&gt;</span><br><span class="line">noremap &lt;LEADER&gt;&lt;CR&gt;  :nohlsearch&lt;CR&gt;</span><br></pre></td></tr></table></figure><h2 id="7-29-设置分屏"><a href="#7-29-设置分屏" class="headerlink" title="7.29 设置分屏"></a>7.29 设置分屏</h2><p>Vim下可以将窗口分为很多部分方便多代码同时调试，可以向上左下右扩展，但是命令有点长，我们直接写快捷键,<code>sp+h/j/k/l</code>就是分别向四个方向扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map spl :set splitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">map sph :set nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">map spj :set splitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="line">map spk :set nosplitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>然后我们需要将光标在多个窗口间移动，设置快捷键，<code>Alt+h/j/k/l</code>是向四个方向移动光标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map &lt;A-h&gt; &lt;C-w&gt;h</span><br><span class="line">map &lt;A-j&gt; &lt;C-w&gt;j</span><br><span class="line">map &lt;A-k&gt; &lt;C-w&gt;k</span><br><span class="line">map &lt;A-l&gt; &lt;C-w&gt;l</span><br></pre></td></tr></table></figure><p>调整所在窗口的大小,<code>Alt++/_</code>是水平<code>+/-</code>,<code>Alt+-/=</code>是垂直的,自己看下在键盘上的位置就知道了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map &lt;A-&#x3D;&gt; :vertical resize+5 &lt;CR&gt; </span><br><span class="line">map &lt;A--&gt; :vertical resize-5 &lt;CR&gt; </span><br><span class="line">map &lt;A-+&gt; :resize+5 &lt;CR&gt; </span><br><span class="line">map &lt;A-_&gt; :resize-5 &lt;CR&gt; </span><br></pre></td></tr></table></figure><p>转置窗口，左右边上下，上下变左右</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map sv &lt;C-w&gt;t&lt;c-W&gt;H</span><br><span class="line">map sv &lt;C-w&gt;t&lt;c-W&gt;K</span><br></pre></td></tr></table></figure><h2 id="7-30-增加删除tabe标签"><a href="#7-30-增加删除tabe标签" class="headerlink" title="7.30 增加删除tabe标签"></a>7.30 增加删除tabe标签</h2><p>Tabe是Vim中相当于浏览器的tab一样的东西<br>分别是增加<em>2，切换</em>2，移动*2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map tu :tabe&lt;CR&gt;</span><br><span class="line">map tc :tabc&lt;CR&gt;</span><br><span class="line">map tp :-tabnext&lt;CR&gt;</span><br><span class="line">map tn :+tabnext&lt;CR&gt;</span><br><span class="line">map tmn :-tabmove&lt;CR&gt;</span><br><span class="line">map tmi :+tabmove&lt;CR&gt;</span><br></pre></td></tr></table></figure><h2 id="7-31-插入模式移动光标"><a href="#7-31-插入模式移动光标" class="headerlink" title="7.31 插入模式移动光标"></a>7.31 插入模式移动光标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inoremap &lt;C-l&gt; &lt;Right&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="8-编译程序"><a href="#8-编译程序" class="headerlink" title="8. 编译程序"></a>8. 编译程序</h1><p>Vim不会自动识别并调用编译器的，所以我们要自己写一个小函数帮助我们调用编译器并编译<br>我不清楚Vim的语言语法，反正看了看别人的照猫画虎写的<br>F9会自动识别一部分语言并运行，成功会返回运行成功，否则给出错误信息。支持</p><ul><li>C/C++（直接运行gcc/g++）</li><li>python (直接运行)</li><li>R (Rscript运行，不过正常使用不要用这个)</li><li>Markdown (需要插件)</li><li>vbs (直接运行)</li><li>LaTeX (我忘了这么写的了)</li></ul><p>F10是用于C/C++调试的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">map  &lt;F9&gt;  :w&lt;CR&gt;:call Run()&lt;CR&gt;</span><br><span class="line">imap &lt;F9&gt;  &lt;ESC&gt;:w&lt;CR&gt;:call Run()&lt;CR&gt;</span><br><span class="line">map  &lt;F10&gt; :w&lt;CR&gt;:call Debug()&lt;CR&gt;</span><br><span class="line">imap &lt;F10&gt; &lt;ESC&gt;:w&lt;CR&gt;:call Debug()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">func!  Debug()</span><br><span class="line">    if expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;c&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cc&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cxx&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cpp&quot;</span><br><span class="line">        exe &quot;:setlocal makeprg&#x3D;&quot;.&#39;g++\ %\ -o\ %&lt;\ -gstabs+&#39;</span><br><span class="line">        echohl WarningMsg | echo &quot; compiling...&quot;</span><br><span class="line">        silent make</span><br><span class="line">        exe &quot;:!gdb %&lt;&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Debug finish! :-)&quot;</span><br><span class="line">    else</span><br><span class="line">        redraw!</span><br><span class="line">        echo &quot;Language not support! :-(&quot;</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">func! Run()</span><br><span class="line">    if expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;py&quot;</span><br><span class="line">        ! Python -u &quot;%&lt;.py&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;c&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cc&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cxx&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cpp&quot;</span><br><span class="line">        echo &quot; compiling...&quot;</span><br><span class="line">        :! g++ &quot;%&quot; -o &quot;%&lt;&quot; &amp;&amp; &quot;%&lt;.exe&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;r&quot;</span><br><span class="line">        exe &quot;:! Rscript %&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;vbs&quot;</span><br><span class="line">        exe &quot;:! %&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;md&quot;</span><br><span class="line">        :MarkdownPreview</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running on Chrome! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;tex&quot;</span><br><span class="line">        &quot;&lt;localleader&gt;ll</span><br><span class="line">        \\ll</span><br><span class="line">        &quot;:vimtex-compile</span><br><span class="line">    else</span><br><span class="line">        redraw!</span><br><span class="line">        echo &quot;Language not support! :-(&quot;</span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="9-在插件介绍之前的准备"><a href="#9-在插件介绍之前的准备" class="headerlink" title="9. 在插件介绍之前的准备"></a>9. 在插件介绍之前的准备</h1><p>我们需要一个3.6+的64bit的Python并加入环境变量（不做介绍）<br>注意的是一定是要64位，在加入环境变量之后一定把这个环境变量放在最前面，如图<br><img data-src="https://img-blog.csdnimg.cn/20200717161815855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原因是当你在cmd下输入python的时候，cmd会将环境变量<strong>从上到下</strong>检索python.exe,如果放在后面会导致系统先搜索了其他路径，而Microsoft Store中也有一个python，如果Microsoft Store的路径在python前面就会打开store让你安装那个应用。<br>但是，如果你有多个python，例如要使用python2.X，或者必须使用python3.5作为默认的py怎么办呢？<br>只需要手动为python指定路径，但是同时环境变量还是要加的，在<code>_vimrc</code>中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &amp;pythonthreedll&#x3D;&#39;C:\Program Files (x86)\Python36-32\python36.dll&#39;</span><br><span class="line">let &amp;pythonthreehome&#x3D;&#39;C:\Program Files (x86)\Python36-32&#39;</span><br></pre></td></tr></table></figure><p>路径自己改，于是你的最上面就可以写你自己用的python了<br>然后我们在vim中输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:echo has(python3)</span><br></pre></td></tr></table></figure><p>看到1就好了<br>再输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:python3 print(&quot;1“）</span><br></pre></td></tr></table></figure><p>看到1说明成功调用<br>这样你的python就弄好了，如果有显示0或者报错的建议也使用这个指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &amp;pythonthreedll&#x3D;&#39;C:\Program Files (x86)\Python36-32\python36.dll&#39;</span><br><span class="line">let &amp;pythonthreehome&#x3D;&#39;C:\Program Files (x86)\Python36-32&#39;</span><br></pre></td></tr></table></figure><p>还是不行卸载vim和py重装</p><hr><h1 id="10-通用插件的介绍"><a href="#10-通用插件的介绍" class="headerlink" title="10. 通用插件的介绍"></a>10. 通用插件的介绍</h1><h2 id="10-1-输入法切换：-xkb-switch"><a href="#10-1-输入法切换：-xkb-switch" class="headerlink" title="10.1 输入法切换： xkb-switch"></a>10.1 输入法切换： xkb-switch</h2><p>有的时候我们用中文写了注释以后发现换到Normal之后还是默认中文，然后按<code>:</code>就是中文的<code>：</code>，<code>/</code>变成<code>、</code>，这会导致响起非常吵的报错声音，这个<code>xkb-switch</code>会在你从normal切换到insert之后记住你在normal下的输入语言，就算insert下是中文，切换到normal之后就变成了英文，切换到insert就有自动改为中文输入法<br><strong>安装方法：</strong><br>安装这两个插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;lyokha&#x2F;vim-xkbswitch&#39;                 &quot;neovim notsupport</span><br><span class="line">Plug &#39;DeXP&#x2F;xkb-switch-win&#39;                  &quot;neoivm norsupport</span><br></pre></td></tr></table></figure><p>在此处<a href="https://github.com/DeXP/xkb-switch-win/releases">下载dll文件</a>libxkbswitch64.dll<br>然后复制进vim.exe同目录下<br>在<code>_vimrc</code>中写下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let g:XkbSwitchEnabled     &#x3D; 1</span><br><span class="line">let g:XkbSwitchIMappings   &#x3D; [&#39;cn&#39;]</span><br><span class="line">let g:XkbSwitchIMappingsTr &#x3D; &#123;&#39;cn&#39;: &#123;&#39;&lt;&#39;: &#39;&#39;, &#39;&gt;&#39;: &#39;&#39;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="10-2-Vim内部的todolist：-undotree"><a href="#10-2-Vim内部的todolist：-undotree" class="headerlink" title="10.2 Vim内部的todolist： undotree"></a>10.2 Vim内部的todolist： undotree</h2><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;mbbill&#x2F;undotree&#39;</span><br></pre></td></tr></table></figure><p>配置<code>_vimrc</code>快捷键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map &lt;F5&gt; :UndotreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure><h2 id="10-3-Vim内部的文件树：NERDTreeToggle"><a href="#10-3-Vim内部的文件树：NERDTreeToggle" class="headerlink" title="10.3 Vim内部的文件树：NERDTreeToggle"></a>10.3 Vim内部的文件树：NERDTreeToggle</h2><p>似乎有点老了，有一个更好的，但是我老是装不上<br>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;preservim&#x2F;nerdtree&#39;</span><br></pre></td></tr></table></figure><p>配置<code>_vimrc</code>快捷键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map ff :NERDTreeToggle&lt;CR&gt; </span><br></pre></td></tr></table></figure><h2 id="10-4-Vim强大状态栏：Airline"><a href="#10-4-Vim强大状态栏：Airline" class="headerlink" title="10.4 Vim强大状态栏：Airline"></a>10.4 Vim强大状态栏：Airline</h2><p>Vim下面的状态显示确实有点捞，这个可以增强，但是会拖慢vim启动0.1s</p><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;vim-airline&#x2F;vim-airline&#39;</span><br><span class="line">Plug &#39;vim-airline&#x2F;vim-airline-themes&#39;</span><br></pre></td></tr></table></figure><p><code>_vimrc</code>配置写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;set ambiwidth&#x3D;double                    &quot; 设置为双字宽显示，否则无法完整显示如:☆</span><br><span class="line">let g:airline_theme&#x3D;&#39;bubblegum&#39;&quot;Airline主题</span><br><span class="line">let g:airline_powerline_fonts &#x3D; 1</span><br><span class="line">&quot; 开启tabline</span><br><span class="line">let g:airline#extensions#tabline#enabled &#x3D; 1      &quot;tabline中当前buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_sep &#x3D; &#39; &#39;   &quot;tabline中未激活buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_alt_sep &#x3D; &#39;|&#39;      &quot;tabline中buffer显示编号</span><br><span class="line">let g:airline#extensions#tabline#buffer_nr_show &#x3D; 1      </span><br><span class="line">&quot; 映射切换buffer的键位</span><br><span class="line">nnoremap [b :bp&lt;CR&gt;</span><br><span class="line">nnoremap ]b :bn&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>会发现似乎和别人的不一样，有乱码，有空白，这是因为字体不兼容，安装powerline字体即可，安装方法如下：<br><a href="https://github.com/powerline/fonts">下载</a>powerline打过补丁的字体，下载字体后选择所有字体右键，点击安装。<br>然后<code>_vimrc</code>写下，<code>h12</code>可以自己改字号如<code>h15</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set guifont&#x3D;Powerline_Consolas:h12:cANSI:qDRAFT</span><br></pre></td></tr></table></figure><p>airline还可以与其他插件搭配在期中显示其他内容，例如ALE</p><h2 id="10-5-多语言代码查错：ALE"><a href="#10-5-多语言代码查错：ALE" class="headerlink" title="10.5 多语言代码查错：ALE"></a>10.5 多语言代码查错：ALE</h2><p>这个不是很好装，尤其是C++，需要gcc等<br>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;dense-analysis&#x2F;ale&#39;</span><br></pre></td></tr></table></figure><p>在<code>_vimrc</code>写入，那几个emoji是自定义的<br>❌换成你喜欢错误标志，用我的也行<br>🔰换成你喜欢警告标志，用我的也行<br>⚡换成你喜欢警告标志，用我的也行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;始终开启标志列</span><br><span class="line">let g:ale_sign_column_always &#x3D; 1</span><br><span class="line">let g:ale_set_highlights &#x3D; 0</span><br><span class="line">&quot;自定义error和warning图标</span><br><span class="line">let g:ale_sign_error &#x3D; &#39;❌&#39;</span><br><span class="line">let g:ale_sign_warning &#x3D; &#39;🔰&#39;</span><br><span class="line">&quot;在vim自带的状态栏中整合ale</span><br><span class="line">let g:ale_statusline_format &#x3D; [&#39;✗ %d&#39;, &#39;⚡ %d&#39;, &#39;✔ OK&#39;]</span><br><span class="line">&quot;显示Linter名称,出错或警告等相关信息</span><br><span class="line">let g:ale_echo_msg_error_str &#x3D; &#39;E&#39;</span><br><span class="line">let g:ale_echo_msg_warning_str &#x3D; &#39;W&#39;</span><br><span class="line">let g:ale_echo_msg_format &#x3D; &#39;[%linter%] %s [%severity%]&#39;</span><br><span class="line">&quot;普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告</span><br><span class="line">nmap sp &lt;Plug&gt;(ale_previous_wrap)</span><br><span class="line">nmap sn &lt;Plug&gt;(ale_next_wrap)</span><br><span class="line">&quot;&lt;Leader&gt;s触发&#x2F;关闭语法检查</span><br><span class="line">nmap &lt;Leader&gt;s :ALEToggle&lt;CR&gt;</span><br><span class="line">&quot;&lt;Leader&gt;d查看错误或警告的详细信息</span><br><span class="line">nmap &lt;Leader&gt;d :ALEDetail&lt;CR&gt;</span><br><span class="line">&quot;set statusline&#x3D;%F%m%r%h%w\ [FORMAT&#x3D;%&#123;&amp;ff&#125;]\ [TYPE&#x3D;%Y]\ [POS&#x3D;%l,%v][%p%%]\ %&#123;strftime(\&quot;%d&#x2F;%m&#x2F;%y\ -\ %H:%M\&quot;)&#125;\ %&#123;ALEGetStatusLine()&#125;</span><br><span class="line">&quot;cpp NOT C++</span><br><span class="line">let g:ale_linters &#x3D; &#123;</span><br><span class="line">\   &#39;cpp&#39;: [&#39;gcc&#39;],</span><br><span class="line">\   &#39;c&#39;: [&#39;gcc&#39;],</span><br><span class="line">\   &#39;python&#39;: [&#39;pylint&#39;],</span><br><span class="line">\&#125;</span><br></pre></td></tr></table></figure><p>这里C语言检查的编译器是gcc，想用clang的直接换就可以了<br></br><br>如果需要在Airline显示自定义报错与警告数目则：<br>打开<code>用户/.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim and replace</code><br>搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let error_symbol &#x3D; get(g:, &#39;airline#extensions#ale#error_</span><br></pre></td></tr></table></figure><p>找到唯一的结果的哪一行，用<code>&quot;</code>注释掉并换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let error_symbol &#x3D; get(g:, &#39;airline#extensions#ale#error_symbol&#39;, &#39;😡&#39;)</span><br></pre></td></tr></table></figure><p>最后那个emoji是报错数目的标志，可以自己换<br>搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let warning_symbol &#x3D; get(g:, &#39;airline#extensions#ale#warning_</span><br></pre></td></tr></table></figure><p>找到唯一的结果的哪一行，用<code>&quot;</code>注释掉并换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let warning_symbol &#x3D; get(g:, &#39;airline#extensions#ale#warning_symbol&#39;, &#39;📛:&#39;)</span><br></pre></td></tr></table></figure><p>最后那个emoji是警告数目的标志，可以自己换</p><h2 id="10-6-代码自动注释：nerdcommenter"><a href="#10-6-代码自动注释：nerdcommenter" class="headerlink" title="10.6 代码自动注释：nerdcommenter"></a>10.6 代码自动注释：nerdcommenter</h2><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;preservim&#x2F;nerdcommenter&#39;</span><br></pre></td></tr></table></figure><p><code>_vimrc</code>写下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map &lt;C-m&gt; &lt;leader&gt;cc</span><br><span class="line">map &lt;A-m&gt; &lt;leader&gt;cu</span><br><span class="line">unmap &lt;CR&gt;</span><br></pre></td></tr></table></figure><h2 id="10-7-代码彩虹括号"><a href="#10-7-代码彩虹括号" class="headerlink" title="10.7 代码彩虹括号"></a>10.7 代码彩虹括号</h2><p>可以彩虹匹配<code>()</code>,<code>&#123;&#125;</code>,<code>&lt;&gt;</code>,<code>[]</code>，效果参考<br><img data-src="https://img-blog.csdnimg.cn/20200717172800538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是vscode彩虹括号的效果，一样，同时我提供了vscode配色的色标<br>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;luochen1990&#x2F;rainbow&#39;</span><br></pre></td></tr></table></figure><p><code>_vimrc</code>写下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&quot; 1. vscode defult 2. author defult 3. vscode show</span><br><span class="line">&quot;\&#39;guifgs&#39;: [&#39;#B21212&#39;, &#39;#1B9CED&#39;,&#39;#FFFC00&#39;],</span><br><span class="line">&quot;\&#39;guifgs&#39;: [&#39;royalblue3&#39;, &#39;darkorange3&#39;, &#39;seagreen3&#39;, &#39;firebrick&#39;],</span><br><span class="line">&quot;\&#39;guifgs&#39;: [&#39;#C186BF&#39;, &#39;#268EDB&#39;,&#39;#F79318&#39;],</span><br><span class="line">let g:rainbow_conf &#x3D; &#123;</span><br><span class="line">\&#39;guifgs&#39;: [&#39;#C186BF&#39;, &#39;#268EDB&#39;,&#39;#F79318&#39;],</span><br><span class="line">\&#39;ctermfgs&#39;: [&#39;lightblue&#39;, &#39;lightyellow&#39;, &#39;lightcyan&#39;, &#39;lightmagenta&#39;],</span><br><span class="line">\&#39;operators&#39;: &#39;_,_&#39;,</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F; fold&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F; fold&#39;, &#39;start&#x3D;&#x2F;&#123;&#x2F; end&#x3D;&#x2F;&#125;&#x2F; fold&#39;],</span><br><span class="line">\&#39;separately&#39;: &#123;</span><br><span class="line">\&#39;*&#39;: &#123;&#125;,</span><br><span class="line">\&#39;tex&#39;: &#123;</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F;&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F;&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;lisp&#39;: &#123;</span><br><span class="line">\&#39;guifgs&#39;: [&#39;royalblue3&#39;, &#39;darkorange3&#39;, &#39;seagreen3&#39;, &#39;firebrick&#39;, &#39;darkorchid3&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;vim&#39;: &#123;</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F;&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F;&#39;, &#39;start&#x3D;&#x2F;&#123;&#x2F; end&#x3D;&#x2F;&#125;&#x2F; fold&#39;, &#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F; containedin&#x3D;vimFuncBody&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F; containedin&#x3D;vimFuncBody&#39;, &#39;start&#x3D;&#x2F;&#123;&#x2F; end&#x3D;&#x2F;&#125;&#x2F; fold containedin&#x3D;vimFuncBody&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;html&#39;: &#123;</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;\v\&lt;((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ &gt;])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\&#x3D;(&quot;[^&quot;]*&quot;|&#39;.&quot;&#39;&quot;.&#39;[^&#39;.&quot;&#39;&quot;.&#39;]*&#39;.&quot;&#39;&quot;.&#39;|[^ &#39;.&quot;&#39;&quot;.&#39;&quot;&gt;&lt;&#x3D;&#96;]*))?)*\&gt;&#x2F; end&#x3D;#&lt;&#x2F;\z1&gt;# fold&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;css&#39;: 0,</span><br><span class="line">\&#125;</span><br><span class="line">\&#125;</span><br><span class="line">let g:rainbow_active &#x3D; 1</span><br></pre></td></tr></table></figure><h2 id="10-8-自定义开始菜单"><a href="#10-8-自定义开始菜单" class="headerlink" title="10.8 自定义开始菜单"></a>10.8 自定义开始菜单</h2><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;mhinz&#x2F;vim-startify&#39;</span><br></pre></td></tr></table></figure><p>想要修改默认样式改这里，写入配置文件，删掉注释，换成自己想要的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;let g:startify_custom_header &#x3D; [</span><br><span class="line">&quot;            \ &#39;+------------------------------+&#39;,</span><br><span class="line">&quot;            \ &#39;|                              |&#39;,</span><br><span class="line">&quot;            \ &#39;|    Still waters run deep!    |&#39;,</span><br><span class="line">&quot;            \ &#39;|                              |&#39;,</span><br><span class="line">&quot;            \ &#39;+----------------+-------------+&#39;,</span><br><span class="line">&quot;            \]</span><br><span class="line">&quot;let g:startify_custom_footer &#x3D; [</span><br><span class="line">&quot;            \ &#39;+------------------------------+&#39;,</span><br><span class="line">&quot;            \ &#39;|     Keep an open mind!       |&#39;,</span><br><span class="line">&quot;            \ &#39;+----------------+-------------+&#39;,</span><br><span class="line">&quot;            \]</span><br><span class="line">let g:startify_files_number &#x3D; 5</span><br><span class="line">&quot;let g:startify_custom_indices &#x3D; map(range(1,100), &#39;string(v:val)&#39;)</span><br></pre></td></tr></table></figure><h2 id="10-9-全语言代码自动补全"><a href="#10-9-全语言代码自动补全" class="headerlink" title="10.9 全语言代码自动补全"></a>10.9 全语言代码自动补全</h2><p>这是Vim上被誉为最难安装的插件，做好肝一天的准备<br>请严格按照我的方法安装</p><ol><li>安装插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;ycm-core&#x2F;YouCompleteMe&#39;</span><br></pre></td></tr></table></figure></li><li>插入配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">set runtimepath+&#x3D;~&#x2F;.vim&#x2F;plugged&#x2F;YouCompleteMe</span><br><span class="line">autocmd InsertLeave * if pumvisible() &#x3D;&#x3D; 0|pclose|endif &quot;离开插入模式后自动关闭预览窗口&quot;</span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files &#x3D; 1           &quot; 开启 YCM基于标签引擎</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 1 &quot; 注释与字符串中的内容也用于补全</span><br><span class="line">let g:syntastic_ignore_files&#x3D;[&quot;.*\.py$&quot;]</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax &#x3D; 1                  &quot; 语法关键字补全</span><br><span class="line">let g:ycm_complete_in_comments &#x3D; 1</span><br><span class="line">let g:ycm_confirm_extra_conf &#x3D; 0                            &quot; 关闭加载.ycm_extra_conf.py提示</span><br><span class="line">let g:ycm_key_list_select_completion &#x3D; [&#39;&lt;c-n&gt;&#39;, &#39;&lt;Down&gt;&#39;]  &quot; 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.</span><br><span class="line">let g:ycm_key_list_previous_completion &#x3D; [&#39;&lt;c-p&gt;&#39;, &#39;&lt;Up&gt;&#39;]</span><br><span class="line">let g:ycm_complete_in_comments &#x3D; 1                          &quot; 在注释输入中也能补全</span><br><span class="line">let g:ycm_complete_in_strings &#x3D; 1                           &quot; 在字符串输入中也能补全</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 1 &quot; 注释和字符串中的文字也会被收入补全</span><br><span class="line">&quot;let g:ycm_global_ycm_extra_conf&#x3D;&#39;~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe&#x2F;third_party&#x2F;ycmd&#x2F;cpp&#x2F;ycm&#x2F;.ycm_extra_conf.py&#39;</span><br><span class="line">let g:ycm_global_ycm_extra_conf&#x3D;&#39;~&#x2F;.vim&#x2F;plugged&#x2F;YouCompleteMe&#x2F;third_party&#x2F;ycmd&#x2F;cpp&#x2F;.ycm_extra_conf.py&#39;</span><br><span class="line">let g:ycm_show_diagnostics_ui &#x3D; 0                           &quot; 禁用语法检查</span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot;</span><br><span class="line">&quot; 回车即选中当前项</span><br><span class="line">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span><br><span class="line">&quot; 跳转到定义处</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion&#x3D;2                 &quot; 从第2个键入字符就开始罗列匹配项</span><br><span class="line">let g:ycm_key_invoke_completion &#x3D; &#39;&lt;c-z&gt;&#39;</span><br><span class="line">let g:ycm_semantic_triggers &#x3D;  &#123;</span><br><span class="line">\ &#39;c,cpp,python,java,go,erlang,perl&#39;: [&#39;re!\w&#123;2&#125;&#39;],</span><br><span class="line">\ &#39;cs,lua,javascript&#39;: [&#39;re!\w&#123;2&#125;&#39;],</span><br><span class="line">\ &#125;</span><br></pre></td></tr></table></figure></li><li>下载安装<code>clang</code>与<code>cmake</code>并加入环境变量</li><li>这是最麻烦的，如果有vs还好说，像我一样不喜欢vs的就很麻烦了，首先去项目的仓库找说明文档,找到这里<br><img data-src="https://img-blog.csdnimg.cn/20200717175533479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p><strong>这是一个天坑</strong><br>他会让你下载一个vs build tool 2017，但是目前人家用的是2019，忘了改了<br>您可以看到链接地址是<a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;rel=15">https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;rel=15</a><br>如果安装之后会显示需要vs buildtool 2019而不是2017，所以把网址最后的15改成16(这是vs2019的版本编号)<br>下载，安装，只选择这一个<br><img data-src="https://img-blog.csdnimg.cn/20200717175854850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装包挺大的，建议安装到D盘<br><img data-src="https://img-blog.csdnimg.cn/20200717175920977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装后打开插件安装地址，按住shift，右键，点击打开powershell<br>输入命令<code>Python install.py --all</code> 等待，很慢，而且网络要求高，自己懂，挂好软件，一次不行重新执行命令，编译结束之后就可以了<br><img data-src="https://img-blog.csdnimg.cn/20200717180059550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="10-10-Vim自动括号补全"><a href="#10-10-Vim自动括号补全" class="headerlink" title="10.10 Vim自动括号补全"></a>10.10 Vim自动括号补全</h2><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;Raimondi&#x2F;delimitMate&#39;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bundle &#39;Raimondi&#x2F;delimitMate&#39;</span><br></pre></td></tr></table></figure><h2 id="10-11-Vim函数整理"><a href="#10-11-Vim函数整理" class="headerlink" title="10.11 Vim函数整理"></a>10.11 Vim函数整理</h2><p>帮助你生成当前程序的所有函数和变量索引，F4激活<br>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;vim-scripts&#x2F;taglist.vim&#39;</span><br></pre></td></tr></table></figure><p><a href="http://ctags.sourceforge.net/">下载ctags58.zip文件</a><br>解压<br>为解压目录添加环境变量<br>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let Tlist_Use_Right_Window&#x3D;1 </span><br><span class="line">let Tlist_Inc_Winwidth&#x3D;0 </span><br><span class="line">let Tlist_File_Fold_Auto_Close&#x3D;1</span><br><span class="line">let Tlist_Exit_Onluwindow&#x3D;1</span><br><span class="line">map &lt;F4&gt; :TlistToggle&lt;cr&gt;         </span><br></pre></td></tr></table></figure><h2 id="10-12-gVim界面透明"><a href="#10-12-gVim界面透明" class="headerlink" title="10.12 gVim界面透明"></a>10.12 gVim界面透明</h2><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;vim-scripts&#x2F;VimTweak&#39;</span><br><span class="line">Plug &#39;mattn&#x2F;transparency-windows-vim&#39;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mattn/vimtweak">下载</a>vimtweak64.dll文件<br>放到gvim.exe同路径下<br>配置文件写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:call libcallnr(&quot;vimtweak64.dll&quot;, &quot;SetAlpha&quot;, 250)</span><br></pre></td></tr></table></figure><p>最后的数字为200-255自助调节透明度，成功后需要刷新配置文件</p><hr><h1 id="11-特定语言的插件介绍"><a href="#11-特定语言的插件介绍" class="headerlink" title="11. 特定语言的插件介绍"></a>11. 特定语言的插件介绍</h1><h2 id="11-1-C-C-的插件"><a href="#11-1-C-C-的插件" class="headerlink" title="11.1 C/C++的插件"></a>11.1 C/C++的插件</h2><h3 id="11-1-1-自动格式化代码"><a href="#11-1-1-自动格式化代码" class="headerlink" title="11.1.1 自动格式化代码"></a>11.1.1 自动格式化代码</h3><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;Chiel92&#x2F;vim-autoformat&#39;</span><br></pre></td></tr></table></figure><p><code>_vimrc</code>写下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">et g:autoformat_autoindent &#x3D; 0</span><br><span class="line">let g:autoformat_retab &#x3D; 0</span><br><span class="line">let g:autoformat_remove_trailing_spaces &#x3D; 0</span><br><span class="line">noremap &lt;F3&gt; :Autoformat&lt;CR&gt;</span><br><span class="line">let g:autoformat_verbosemode&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="11-1-2-代码高亮"><a href="#11-1-2-代码高亮" class="headerlink" title="11.1.2 代码高亮"></a>11.1.2 代码高亮</h3><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;octol&#x2F;vim-cpp-enhanced-highlight&#39;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let g:cpp_class_scope_highlight &#x3D; 1</span><br><span class="line">let g:cpp_member_variable_highlight &#x3D; 1</span><br><span class="line">let g:cpp_class_decl_highlight &#x3D; 1</span><br><span class="line">let g:cpp_experimental_simple_template_highlight &#x3D; 1</span><br><span class="line">let g:cpp_experimental_template_highlight &#x3D; 1</span><br><span class="line">let g:cpp_concepts_highlight &#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="11-1-3-代码检查ALE"><a href="#11-1-3-代码检查ALE" class="headerlink" title="11.1.3 代码检查ALE"></a>11.1.3 代码检查ALE</h3><p>见前</p><h2 id="11-2Python的插件"><a href="#11-2Python的插件" class="headerlink" title="11.2Python的插件"></a>11.2Python的插件</h2><h3 id="11-2-1-语言支持"><a href="#11-2-1-语言支持" class="headerlink" title="11.2.1 语言支持"></a>11.2.1 语言支持</h3><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;python-mode&#x2F;python-mode&#39;, &#123; &#39;for&#39;: &#39;python&#39;, &#39;branch&#39;: &#39;develop&#39; &#125;</span><br></pre></td></tr></table></figure><p>在<code>_vimrc</code>写下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&quot;开启警告</span><br><span class="line">let g:pymode_warnings &#x3D; 0</span><br><span class="line">&quot;保存文件时自动删除无用空格</span><br><span class="line">let g:pymode_trim_whitespaces &#x3D; 1</span><br><span class="line">let g:pymode_options &#x3D; 1</span><br><span class="line">&quot;显示允许的最大长度的列</span><br><span class="line">let g:pymode_options_colorcolumn &#x3D; 1</span><br><span class="line">&quot;设置QuickFix窗口的最大，最小高度</span><br><span class="line">let g:pymode_quickfix_minheight &#x3D; 3</span><br><span class="line">let g:pymode_quickfix_maxheight &#x3D; 10</span><br><span class="line">&quot;使用python3</span><br><span class="line">let g:pymode_python &#x3D; &#39;python3&#39;</span><br><span class="line">&quot;使用PEP8风格的缩进</span><br><span class="line">let g:pymode_indent &#x3D; 1</span><br><span class="line">&quot;取消代码折叠</span><br><span class="line">let g:pymode_folding &#x3D; 0</span><br><span class="line">&quot;开启python-mode定义的移动方式</span><br><span class="line">let g:pymode_motion &#x3D; 1</span><br><span class="line">&quot;启用python-mode内置的python文档，使用K进行查找</span><br><span class="line">let g:pymode_doc &#x3D; 1</span><br><span class="line">let g:pymode_doc_bind &#x3D; &#39;K&#39;</span><br><span class="line">&quot;自动检测并启用virtualenv</span><br><span class="line">let g:pymode_virtualenv &#x3D; 1</span><br><span class="line">&quot;不使用python-mode运行python代码</span><br><span class="line">let g:pymode_run &#x3D; 0</span><br><span class="line">&quot;let g:pymode_run_bind &#x3D; &#39;&lt;Leader&gt;r&#39;</span><br><span class="line">&quot;不使用python-mode设置断点</span><br><span class="line">let g:pymode_breakpoint &#x3D; 0</span><br><span class="line">&quot;let g:pymode_breakpoint_bind &#x3D; &#39;&lt;leader&gt;b&#39;</span><br><span class="line">&quot;启用python语法检查</span><br><span class="line">let g:pymode_lint &#x3D; 1</span><br><span class="line">&quot;修改后保存时进行检查</span><br><span class="line">let g:pymode_lint_on_write &#x3D; 0</span><br><span class="line">&quot;编辑时进行检查</span><br><span class="line">let g:pymode_lint_on_fly &#x3D; 0</span><br><span class="line">let g:pymode_lint_checkers &#x3D; [&#39;pyflakes&#39;, &#39;pep8&#39;]</span><br><span class="line">&quot;发现错误时不自动打开QuickFix窗口</span><br><span class="line">let g:pymode_lint_cwindow &#x3D; 0</span><br><span class="line">&quot;侧边栏不显示python-mode相关的标志</span><br><span class="line">let g:pymode_lint_signs &#x3D; 0</span><br><span class="line">&quot;let g:pymode_lint_todo_symbol &#x3D; &#39;WW&#39;</span><br><span class="line">&quot;let g:pymode_lint_comment_symbol &#x3D; &#39;CC&#39;</span><br><span class="line">&quot;let g:pymode_lint_visual_symbol &#x3D; &#39;RR&#39;</span><br><span class="line">&quot;let g:pymode_lint_error_symbol &#x3D; &#39;EE&#39;</span><br><span class="line">&quot;let g:pymode_lint_info_symbol &#x3D; &#39;II&#39;</span><br><span class="line">&quot;let g:pymode_lint_pyflakes_symbol &#x3D; &#39;FF&#39;</span><br><span class="line">&quot;启用重构</span><br><span class="line">let g:pymode_rope &#x3D; 1</span><br><span class="line">&quot;不在父目录下查找.ropeproject，能提升响应速度</span><br><span class="line">let g:pymode_rope_lookup_project &#x3D; 0</span><br><span class="line">&quot;光标下单词查阅文档</span><br><span class="line">let g:pymode_rope_show_doc_bind &#x3D; &#39;&lt;C-c&gt;d&#39;</span><br><span class="line">&quot;项目修改后重新生成缓存</span><br><span class="line">let g:pymode_rope_regenerate_on_write &#x3D; 1</span><br><span class="line">&quot;开启补全，并设置&lt;C-Tab&gt;为默认快捷键</span><br><span class="line">let g:pymode_rope_completion &#x3D; 1</span><br><span class="line">let g:pymode_rope_complete_on_dot &#x3D; 1</span><br><span class="line">let g:pymode_rope_completion_bind &#x3D; &#39;&lt;C-Tab&gt;&#39;</span><br><span class="line">&quot;&lt;C-c&gt;g跳转到定义处，同时新建竖直窗口打开</span><br><span class="line">let g:pymode_rope_goto_definition_bind &#x3D; &#39;&lt;C-c&gt;g&#39;</span><br><span class="line">let g:pymode_rope_goto_definition_cmd &#x3D; &#39;vnew&#39;</span><br><span class="line">&quot;重命名光标下的函数，方法，变量及类名</span><br><span class="line">let g:pymode_rope_rename_bind &#x3D; &#39;&lt;C-c&gt;rr&#39;</span><br><span class="line">&quot;重命名光标下的模块或包</span><br><span class="line">let g:pymode_rope_rename_module_bind &#x3D; &#39;&lt;C-c&gt;r1r&#39;</span><br><span class="line">&quot;开启python所有的语法高亮</span><br><span class="line">let g:pymode_syntax &#x3D; 1</span><br><span class="line">let g:pymode_syntax_all &#x3D; 1</span><br><span class="line">&quot;高亮缩进错误</span><br><span class="line">let g:pymode_syntax_indent_errors &#x3D; g:pymode_syntax_all</span><br><span class="line">&quot;高亮空格错误</span><br><span class="line">let g:pymode_syntax_space_errors &#x3D; g:pymode_syntax_all</span><br></pre></td></tr></table></figure><h3 id="11-2-2-代码检查ALE"><a href="#11-2-2-代码检查ALE" class="headerlink" title="11.2.2 代码检查ALE"></a>11.2.2 代码检查ALE</h3><p>见前</p><h2 id="11-3-LaTeX的插件"><a href="#11-3-LaTeX的插件" class="headerlink" title="11.3 LaTeX的插件"></a>11.3 LaTeX的插件</h2><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;lervag&#x2F;vimtex&#39;</span><br></pre></td></tr></table></figure><p>配置文件，F9运行，需要 <code>8. 编译程序</code>的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot; Autocomprtr not realize</span><br><span class="line">&quot; F9 not drc</span><br><span class="line">&quot; add SumatraPDF Path</span><br><span class="line">let g:tex_flavor&#x3D;&#39;latex&#39;</span><br><span class="line">let g:vimtex_view_general_viewer &#x3D; &#39;SumatraPDF&#39;</span><br><span class="line">let g:vimtex_view_general_options_latexmk &#x3D; &#39;-reuse-instance&#39;</span><br><span class="line">let g:vimtex_view_general_options</span><br><span class="line">\ &#x3D; &#39;-reuse-instance -forward-search @tex @line @pdf&#39;</span><br><span class="line">\ . &#39; -inverse-search &quot;&#39; . exepath(v:progpath)</span><br><span class="line">\ . &#39; --servername &#39; . v:servername</span><br><span class="line">\ . &#39; --remote-send \&quot;^&lt;C-\^&gt;^&lt;C-n^&gt;&#39;</span><br><span class="line">\ . &#39;:execute &#39;&#39;drop &#39;&#39; . fnameescape(&#39;&#39;\%f&#39;&#39;)^&lt;CR^&gt;&#39;</span><br><span class="line">\ . &#39;:\%l^&lt;CR^&gt;:normal\! zzzv^&lt;CR^&gt;&#39;</span><br><span class="line">\ . &#39;:call remote_foreground(&#39;&#39;&#39;.v:servername.&#39;&#39;&#39;)^&lt;CR^&gt;^&lt;CR^&gt;\&quot;&quot;&#39;</span><br><span class="line">set conceallevel&#x3D;1</span><br><span class="line">let g:tex_conceal&#x3D;&#39;abdmg&#39;</span><br></pre></td></tr></table></figure><h2 id="11-4-MarkDown的插件"><a href="#11-4-MarkDown的插件" class="headerlink" title="11.4 MarkDown的插件"></a>11.4 MarkDown的插件</h2><p>我们需要如下插件，并且 ==<strong>顺序不能变</strong>==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;dhruvasagar&#x2F;vim-table-mode&#39;</span><br><span class="line">Plug &#39;godlygeek&#x2F;tabular&#39;</span><br><span class="line">Plug &#39;mzlogin&#x2F;vim-markdown-toc&#39;</span><br><span class="line">Plug &#39;plasticboy&#x2F;vim-markdown&#39;</span><br><span class="line">Plug &#39;iamcco&#x2F;markdown-preview.nvim&#39;, &#123; &#39;do&#39;: &#123; -&gt; mkdp#util#install() &#125; &#125;</span><br><span class="line">Plug &#39;ferrine&#x2F;md-img-paste.vim&#39; </span><br></pre></td></tr></table></figure><p>后面就不写安装插件了，需要配置的会在后面给出</p><h3 id="11-4-1-MarkDown预览"><a href="#11-4-1-MarkDown预览" class="headerlink" title="11.4.1 MarkDown预览"></a>11.4.1 MarkDown预览</h3><p>配置结束之后请运行<code>:MarkdownPreviewToggel</code>激活一次就可以了<br>配置写下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let g:vim_markdown_math &#x3D; 1</span><br><span class="line">let g:vmt_auto_update_on_save &#x3D; 0</span><br><span class="line">let g:mkdp_path_to_chrome &#x3D; &quot;C:\Program Files (x86)\Google\Chrome\Application&quot;</span><br><span class="line">let g:mkdp_markdown_css&#x3D;&#39;&#39;</span><br></pre></td></tr></table></figure><p><code>let g:mkdp_path_to_chrome = &quot;C:\Program Files (x86)\Google\Chrome\Application&quot;</code>这里改成Chrome的路径，必须是Chrome</p><h3 id="11-4-2-MarkDown自动输入表格"><a href="#11-4-2-MarkDown自动输入表格" class="headerlink" title="11.4.2 MarkDown自动输入表格"></a>11.4.2 MarkDown自动输入表格</h3><p>用法是创建表格的时候输入<code>||+Esc</code>会自动补全<code>-</code>，后面写的表格长之后，前面的会加长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let g:table_mode_corner &#x3D; &#39;|&#39;</span><br><span class="line">let g:table_mode_border&#x3D;0</span><br><span class="line">let g:table_mode_fillchar&#x3D;&#39; &#39;</span><br><span class="line"></span><br><span class="line">function! s:isAtStartOfLine(mapping)</span><br><span class="line">  let text_before_cursor &#x3D; getline(&#39;.&#39;)[0 : col(&#39;.&#39;)-1]</span><br><span class="line">  let mapping_pattern &#x3D; &#39;\V&#39; . escape(a:mapping, &#39;\&#39;)</span><br><span class="line">  let comment_pattern &#x3D; &#39;\V&#39; . escape(substitute(&amp;l:commentstring, &#39;%s.*$&#39;, &#39;&#39;, &#39;&#39;), &#39;\&#39;)</span><br><span class="line">  return (text_before_cursor &#x3D;~? &#39;^&#39; . (&#39;\v(&#39; . comment_pattern . &#39;\v)?&#39;) . &#39;\s*\v&#39; . mapping_pattern . &#39;\v$&#39;)</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">inoreabbrev &lt;expr&gt; &lt;bar&gt;&lt;bar&gt;</span><br><span class="line">          \ &lt;SID&gt;isAtStartOfLine(&#39;\|\|&#39;) ?</span><br><span class="line">          \ &#39;&lt;c-o&gt;:TableModeEnable&lt;cr&gt;&lt;bar&gt;&lt;space&gt;&lt;bar&gt;&lt;left&gt;&lt;left&gt;&#39; : &#39;&lt;bar&gt;&lt;bar&gt;&#39;</span><br><span class="line">inoreabbrev &lt;expr&gt; __</span><br><span class="line">          \ &lt;SID&gt;isAtStartOfLine(&#39;__&#39;) ?</span><br><span class="line">          \ &#39;&lt;c-o&gt;:silent! TableModeDisable&lt;cr&gt;&#39; : &#39;__&#39;</span><br></pre></td></tr></table></figure><h2 id="11-5-R语言插件"><a href="#11-5-R语言插件" class="headerlink" title="11.5 R语言插件"></a>11.5 R语言插件</h2><p>我是直接学的这个<br>如果想把Vim 打造成你R的IDE，至少得保证在Vim中能做3件事情</p><ul><li>能写代码</li><li>可以运行当前代码</li><li>代码联想<br>为了让Vim拥有该功能，你需要装一个插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug &#39;jalvesaq&#x2F;Nvim-R&#39;</span><br></pre></td></tr></table></figure>用vimmyfile.R打开一个R脚本，输入\rf就可以打开R的终端。可以用\rq关闭终端<br><img data-src="https://img-blog.csdnimg.cn/20200717183540608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当你能打开如上界面之后，那么我们可以学习一些常用操作了，如下</li><li>执行当前文件的所有代码: \aa</li><li>执行整个函数: \ff</li><li>执行所选内容: \ss</li><li>执行当前行: \l<br><img data-src="https://img-blog.csdnimg.cn/20200717183646143.png#pic_center" alt="在这里插入图片描述"><br><a href="https://github.com/jalvesaq/Nvim-R/blob/master/doc/Nvim-R.txt">完整清单</a><br>上面的操作都需要用\作为前置符，为了减少操作，可以将一些常用操作进行映射, 修改”~/.vimrc” 添加如下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot; 将执行当前行代码映射为 , </span><br><span class="line">nmap , &lt;Plug&gt;RDSendLine</span><br><span class="line">&quot; 将执行选择的多行代码映射为 , </span><br><span class="line">vmap , &lt;Plug&gt;RDSendSelection</span><br><span class="line">&quot; 将执行选择的多行映射并输出内容隐射为 ,e</span><br><span class="line">vmap ,e &lt;Plug&gt;RESendSelection</span><br></pre></td></tr></table></figure></li></ul><p><strong>R全局变量窗口</strong><br>Rstudio有一个专门的窗口展示目前的全局环境变量，如下图。<br><img data-src="https://img-blog.csdnimg.cn/20200717183719152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而在vim中用\ro 就可以启动这个功能<br><img data-src="https://img-blog.csdnimg.cn/20200717183740513.png#pic_center" alt="在这里插入图片描述"><br>vim里不同窗口的切换用 ctrl + w + h/j/k/l</p><p><strong>帮助文档窗口</strong><br>写代码的时候，还需要经常的阅读文档，在Rstudio里有专门的窗口<br><img data-src="https://img-blog.csdnimg.cn/20200717183754428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在Vim则是用\rh查看帮助文档, 用 \re查看示例<br><img data-src="https://img-blog.csdnimg.cn/20200717183815434.png#pic_center" alt="在这里插入图片描述"><br><strong>查看数据</strong><br>还可以像Rstudio一样查看数据库中的内容，在对象上输入\rv, 在Linux上需要先安装插件”chrisbra/csv.vim”<br><img data-src="https://img-blog.csdnimg.cn/20200717183846177.png#pic_center" alt="在这里插入图片描述"><br><strong>代码补全</strong><br>代码补全依赖于一个更好的工具ncm-R, 但是安装起来特别的费劲，花了一个下午的时间都没有搞定，所以我放弃了。</p><p><strong>其他使用操作</strong></p><ul><li>设置当前文件夹为工作目录: \rd</li><li>输出运行结果作为注释: \o</li><li>对变量summary() 对应 \rs</li><li>对变量plot() 对应 \rg (服务器端别想了)</li><li>查看一个变量的列名对应 \rn</li><li>&lt;- 的对应”_”</li></ul><hr><h1 id="12-处理ESC"><a href="#12-处理ESC" class="headerlink" title="12. 处理ESC"></a>12. 处理ESC</h1><p>正如你所发现，我们需要平凡的切换到Normal模式，但是Esc键离手太远了，但是离的近的CapLock又没啥用，所以思路是把CapLock映射为Esc，Esc映射到CapLock，但是CapLock这个键特别特殊，只有Windows自己可以捕获他被按下，其他所有软件都不行(从来没见过CapLock做快捷键的)，所以通过修改注册编辑表来实现<br>将下面代码保存为 capslock2esc.reg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;&#x3D;hex:00,00,00,00,00,00,00,00,02,00,00,00,01,00,3a,00,00,00,00,00</span><br></pre></td></tr></table></figure><p>注：上面不是互换，如果要互换，则用下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;&#x3D;hex:00,00,00,00,00,00,00,00,03,00,00,00,3a,00,01,00,01,00,3a,00,00,00,00,00</span><br></pre></td></tr></table></figure><p>还原按键时，只需要在注册表的路径([HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout])下，删除Scancode Map键即可。<br>反正用惯巨好用。</p><hr><h1 id="13-Vim-键位图"><a href="#13-Vim-键位图" class="headerlink" title="13. Vim 键位图"></a>13. Vim 键位图</h1><p><img data-src="https://img-blog.csdnimg.cn/20200717190306155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717190305908.gif" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717190305260.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717190305253.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200717190304603.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="14-优秀的参考与学习资源"><a href="#14-优秀的参考与学习资源" class="headerlink" title="14. 优秀的参考与学习资源"></a>14. 优秀的参考与学习资源</h1><ol><li><a href="https://www.osvim.org/index.html">Vim中文社区</a></li><li><a href="https://github.com/vim-china">Vim中国论坛</a></li><li><a href="https://www.runoob.com/linux/linux-vim.html">菜鸟教程</a></li><li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide">所需即所获：像 IDE 一样使用 vim</a></li></ol><p>好多都没保存，我慢慢补</p><hr><h1 id="15-我的Vim配置"><a href="#15-我的Vim配置" class="headerlink" title="15. 我的Vim配置"></a>15. 我的Vim配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;  Basic setting for vim use   &#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">set encoding&#x3D;utf-8                  &quot;Encoding UTF-8, to use Gvim correct</span><br><span class="line">&quot;let &amp;pythondll&#x3D;&#39;&#39;                  &quot;sup python just use same bit &amp; ignore this</span><br><span class="line">&quot;let &amp;pythonhome&#x3D;&#39;&#39;                 &quot;Python 2&amp;3 only choose 1</span><br><span class="line">&quot;let &amp;pythonthreedll&#x3D;&#39;C:\Program Files (x86)\Python36-32\python36.dll&#39;</span><br><span class="line">&quot;let &amp;pythonthreehome&#x3D;&#39;C:\Program Files (x86)\Python36-32&#39;</span><br><span class="line">syntax on                           &quot;hilight_base</span><br><span class="line">let mapleader &#x3D; &quot;\&lt;space&gt;&quot;          &quot;change leader key</span><br><span class="line">language C                          &quot;Using English</span><br><span class="line">set nocompatible                    &quot;Compaty vi..</span><br><span class="line">filetype on</span><br><span class="line">filetype indent on</span><br><span class="line">filetype plugin on</span><br><span class="line">set mouse&#x3D;a                         &quot;Mouse enable</span><br><span class="line">let &amp;t_ut&#x3D;&#39;&#39;</span><br><span class="line">set expandtab                       &quot;Convent Tab to space</span><br><span class="line">set tabstop&#x3D;4&quot;Tab config</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">set softtabstop&#x3D;4</span><br><span class="line">set list&quot;Show &#39;$&#39; at cursor</span><br><span class="line">set listchars&#x3D;tab:▸\ ,trail:▫&quot;Show Tab &amp; space</span><br><span class="line">set scrolloff&#x3D;5&quot;At least n row before&#x2F;after cursor</span><br><span class="line">set backspace&#x3D;indent,eol,start&quot;Let Backspace cross row</span><br><span class="line">set foldmethod&#x3D;indent&quot;fold</span><br><span class="line">set foldlevel&#x3D;99</span><br><span class="line">let &amp;t_SI &#x3D; &quot;\&lt;Esc&gt;]50;CursorShape&#x3D;1\x7&quot;&quot;Theme of cursor</span><br><span class="line">let &amp;t_SR &#x3D; &quot;\&lt;Esc&gt;]50;CursorShape&#x3D;2\x7&quot;</span><br><span class="line">let &amp;t_EI &#x3D; &quot;\&lt;Esc&gt;]50;CursorShape&#x3D;0\x7&quot;</span><br><span class="line">set laststatus&#x3D;2&quot;Always show Status bar</span><br><span class="line">&quot;au BufReadPost * if line(&quot;&#39;&#39;\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#39;\&quot;&quot;) &lt;&#x3D; line(&quot;$&quot;) | exe &quot;normal! g&#39;\&quot;&quot; | endif.&quot;Save postion of cursor</span><br><span class="line">set autoindent&quot;ident</span><br><span class="line"></span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;  editor  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">set guifont&#x3D;Powerline_Consolas:h12:cANSI:qDRAFT&quot;NeoVim not support</span><br><span class="line">&quot;:call libcallnr(&quot;vimtweak64.dll&quot;, &quot;SetAlpha&quot;, 250)</span><br><span class="line">map &lt;silent&gt; &lt;F2&gt; :if &amp;guioptions &#x3D;~# &#39;T&#39; &lt;Bar&gt;</span><br><span class="line">\set guioptions-&#x3D;T &lt;Bar&gt;</span><br><span class="line">\set guioptions-&#x3D;m &lt;bar&gt;</span><br><span class="line">\else &lt;Bar&gt;</span><br><span class="line">\set guioptions &#x3D;T &lt;Bar&gt;</span><br><span class="line">\set guioptions &#x3D;m &lt;Bar&gt;</span><br><span class="line">\endif&lt;CR&gt;</span><br><span class="line">set guioptions-&#x3D;m   &quot;Hide Menu</span><br><span class="line">set guioptions-&#x3D;T   &quot;Hide Tool-Bar</span><br><span class="line">set guioptions-&#x3D;r   &quot;hide right scroll</span><br><span class="line">set guioptions-&#x3D;b   &quot;hide buttom scoll</span><br><span class="line">set guioptions-&#x3D;L   &quot;hide left scroll</span><br><span class="line"></span><br><span class="line">set number&quot;row number</span><br><span class="line">set relativenumber&quot;relative row number</span><br><span class="line">set cursorline&quot;hilight line cursor</span><br><span class="line">set cursorcolumn&quot;hilight colum cursor</span><br><span class="line">set wrap&quot;autowrap</span><br><span class="line">set showcmd&quot;show point out</span><br><span class="line">set wildmenu</span><br><span class="line">set hlsearch&quot;search hilight</span><br><span class="line">exec &quot;nohlsearch&quot;</span><br><span class="line">set incsearch&quot;real time search hilight</span><br><span class="line">set ignorecase&quot;ignore text-transform</span><br><span class="line">set smartcase&quot;smart text-transform</span><br><span class="line"></span><br><span class="line">vnoremap &lt;Leader&gt;y &quot;+y</span><br><span class="line">nmap &lt;Leader&gt;p &quot;+p</span><br><span class="line">map rc : e $HOME\_vimrc&lt;CR&gt; </span><br><span class="line">map S : w&lt;CR&gt;</span><br><span class="line">map s &lt;nop&gt;</span><br><span class="line">map Q :q&lt;CR&gt;</span><br><span class="line">map R :source $MYVIMRC&lt;CR&gt;</span><br><span class="line">noremap &lt;LEADER&gt;&lt;CR&gt;  :nohlsearch&lt;CR&gt;</span><br><span class="line">map spl :set splitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">map sph :set nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">map spj :set splitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="line">map spk :set nosplitbelow&lt;CR&gt;:split&lt;CR&gt;</span><br><span class="line">map &lt;A-h&gt; &lt;C-w&gt;h</span><br><span class="line">map &lt;A-j&gt; &lt;C-w&gt;j</span><br><span class="line">map &lt;A-k&gt; &lt;C-w&gt;k</span><br><span class="line">map &lt;A-l&gt; &lt;C-w&gt;l</span><br><span class="line">map &lt;A-&#x3D;&gt; :vertical resize+5 &lt;CR&gt; </span><br><span class="line">map &lt;A--&gt; :vertical resize-5 &lt;CR&gt; </span><br><span class="line">map &lt;A-+&gt; :resize+5 &lt;CR&gt; </span><br><span class="line">map &lt;A-_&gt; :resize-5 &lt;CR&gt; </span><br><span class="line">map sv &lt;C-w&gt;t&lt;c-W&gt;H</span><br><span class="line">map sv &lt;C-w&gt;t&lt;c-W&gt;K</span><br><span class="line"></span><br><span class="line">map tu :tabe&lt;CR&gt;</span><br><span class="line">map tc :tabc&lt;CR&gt;</span><br><span class="line">&quot; Move around tabs with tn and ti</span><br><span class="line">map tp :-tabnext&lt;CR&gt;</span><br><span class="line">map tn :+tabnext&lt;CR&gt;</span><br><span class="line">&quot; Move the tabs with tmn and tmi</span><br><span class="line">map tmn :-tabmove&lt;CR&gt;</span><br><span class="line">map tmi :+tabmove&lt;CR&gt;</span><br><span class="line">&quot;jump ])&#125;</span><br><span class="line">inoremap &lt;C-l&gt; &lt;Right&gt;</span><br><span class="line"></span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D; Processer &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">map  &lt;F9&gt;  :w&lt;CR&gt;:call Run()&lt;CR&gt;</span><br><span class="line">imap &lt;F9&gt;  &lt;ESC&gt;:w&lt;CR&gt;:call Run()&lt;CR&gt;</span><br><span class="line">map  &lt;F10&gt; :w&lt;CR&gt;:call Debug()&lt;CR&gt;</span><br><span class="line">imap &lt;F10&gt; &lt;ESC&gt;:w&lt;CR&gt;:call Debug()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">func!  Debug()</span><br><span class="line">    if expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;c&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cc&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cxx&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cpp&quot;</span><br><span class="line">        exe &quot;:setlocal makeprg&#x3D;&quot;.&#39;g++\ %\ -o\ %&lt;\ -gstabs+&#39;</span><br><span class="line">        echohl WarningMsg | echo &quot; compiling...&quot;</span><br><span class="line">        silent make</span><br><span class="line">        exe &quot;:!gdb %&lt;&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Debug finish! :-)&quot;</span><br><span class="line">    else</span><br><span class="line">        redraw!</span><br><span class="line">        echo &quot;Language not support! :-(&quot;</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">func! Run()</span><br><span class="line">    if expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;py&quot;</span><br><span class="line">        ! Python -u &quot;%&lt;.py&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;c&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cc&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cxx&quot; || expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;cpp&quot;</span><br><span class="line">        echo &quot; compiling...&quot;</span><br><span class="line">        :! g++ &quot;%&quot; -o &quot;%&lt;&quot; &amp;&amp; &quot;%&lt;.exe&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;r&quot;</span><br><span class="line">        exe &quot;:! Rscript %&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;vbs&quot;</span><br><span class="line">        exe &quot;:! %&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running finish! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;md&quot;</span><br><span class="line">        :MarkdownPreview</span><br><span class="line">        redraw!</span><br><span class="line">        echohl WarningMsg | echo &quot; Running on Chrome! :-)&quot;</span><br><span class="line">    elseif expand(&quot;%:e&quot;) &#x3D;&#x3D; &quot;tex&quot;</span><br><span class="line">        &quot;&lt;localleader&gt;ll</span><br><span class="line">        \\ll</span><br><span class="line">        &quot;:vimtex-compile</span><br><span class="line">    else</span><br><span class="line">        redraw!</span><br><span class="line">        echo &quot;Language not support! :-(&quot;</span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D; Plug config &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;------- xkb-switch --------</span><br><span class="line">&quot;copy dll to $VIM, and note bit</span><br><span class="line">let g:XkbSwitchEnabled     &#x3D; 1</span><br><span class="line">let g:XkbSwitchIMappings   &#x3D; [&#39;cn&#39;]</span><br><span class="line">let g:XkbSwitchIMappingsTr &#x3D; &#123;&#39;cn&#39;: &#123;&#39;&lt;&#39;: &#39;&#39;, &#39;&gt;&#39;: &#39;&#39;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&quot;------- ondotree ----------</span><br><span class="line">map &lt;F5&gt; :UndotreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;------- NERDTreeToggle ----</span><br><span class="line">map ff :NERDTreeToggle&lt;CR&gt; </span><br><span class="line"></span><br><span class="line">&quot;------- Airline -----------</span><br><span class="line">&quot;set ambiwidth&#x3D;double                    &quot; 设置为双字宽显示，否则无法完整显示如:☆</span><br><span class="line">let g:airline_theme&#x3D;&#39;bubblegum&#39;</span><br><span class="line">let g:airline_powerline_fonts &#x3D; 1</span><br><span class="line">&quot; 开启tabline</span><br><span class="line">let g:airline#extensions#tabline#enabled &#x3D; 1      &quot;tabline中当前buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_sep &#x3D; &#39; &#39;   &quot;tabline中未激活buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_alt_sep &#x3D; &#39;|&#39;      &quot;tabline中buffer显示编号</span><br><span class="line">let g:airline#extensions#tabline#buffer_nr_show &#x3D; 1      </span><br><span class="line">&quot; 映射切换buffer的键位</span><br><span class="line">nnoremap [b :bp&lt;CR&gt;</span><br><span class="line">nnoremap ]b :bn&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;------- vim-autodormat ----</span><br><span class="line">&quot;python need</span><br><span class="line">let g:autoformat_autoindent &#x3D; 0</span><br><span class="line">let g:autoformat_retab &#x3D; 0</span><br><span class="line">let g:autoformat_remove_trailing_spaces &#x3D; 0</span><br><span class="line">noremap &lt;F3&gt; :Autoformat&lt;CR&gt;</span><br><span class="line">let g:autoformat_verbosemode&#x3D;1</span><br><span class="line"></span><br><span class="line">&quot;------- nerdcommenter -----</span><br><span class="line">map &lt;C-m&gt; &lt;leader&gt;cc</span><br><span class="line">map &lt;A-m&gt; &lt;leader&gt;cu</span><br><span class="line">unmap &lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; 1. vscode defult 2. author defult 3. vscode show</span><br><span class="line">&quot;\&#39;guifgs&#39;: [&#39;#B21212&#39;, &#39;#1B9CED&#39;,&#39;#FFFC00&#39;],</span><br><span class="line">&quot;\&#39;guifgs&#39;: [&#39;royalblue3&#39;, &#39;darkorange3&#39;, &#39;seagreen3&#39;, &#39;firebrick&#39;],</span><br><span class="line">&quot;\&#39;guifgs&#39;: [&#39;#C186BF&#39;, &#39;#268EDB&#39;,&#39;#F79318&#39;],</span><br><span class="line">&quot;------- Rainbow -----------</span><br><span class="line">let g:rainbow_conf &#x3D; &#123;</span><br><span class="line">\&#39;guifgs&#39;: [&#39;#C186BF&#39;, &#39;#268EDB&#39;,&#39;#F79318&#39;],</span><br><span class="line">\&#39;ctermfgs&#39;: [&#39;lightblue&#39;, &#39;lightyellow&#39;, &#39;lightcyan&#39;, &#39;lightmagenta&#39;],</span><br><span class="line">\&#39;operators&#39;: &#39;_,_&#39;,</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F; fold&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F; fold&#39;, &#39;start&#x3D;&#x2F;&#123;&#x2F; end&#x3D;&#x2F;&#125;&#x2F; fold&#39;],</span><br><span class="line">\&#39;separately&#39;: &#123;</span><br><span class="line">\&#39;*&#39;: &#123;&#125;,</span><br><span class="line">\&#39;tex&#39;: &#123;</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F;&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F;&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;lisp&#39;: &#123;</span><br><span class="line">\&#39;guifgs&#39;: [&#39;royalblue3&#39;, &#39;darkorange3&#39;, &#39;seagreen3&#39;, &#39;firebrick&#39;, &#39;darkorchid3&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;vim&#39;: &#123;</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F;&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F;&#39;, &#39;start&#x3D;&#x2F;&#123;&#x2F; end&#x3D;&#x2F;&#125;&#x2F; fold&#39;, &#39;start&#x3D;&#x2F;(&#x2F; end&#x3D;&#x2F;)&#x2F; containedin&#x3D;vimFuncBody&#39;, &#39;start&#x3D;&#x2F;\[&#x2F; end&#x3D;&#x2F;\]&#x2F; containedin&#x3D;vimFuncBody&#39;, &#39;start&#x3D;&#x2F;&#123;&#x2F; end&#x3D;&#x2F;&#125;&#x2F; fold containedin&#x3D;vimFuncBody&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;html&#39;: &#123;</span><br><span class="line">\&#39;parentheses&#39;: [&#39;start&#x3D;&#x2F;\v\&lt;((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ &gt;])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\&#x3D;(&quot;[^&quot;]*&quot;|&#39;.&quot;&#39;&quot;.&#39;[^&#39;.&quot;&#39;&quot;.&#39;]*&#39;.&quot;&#39;&quot;.&#39;|[^ &#39;.&quot;&#39;&quot;.&#39;&quot;&gt;&lt;&#x3D;&#96;]*))?)*\&gt;&#x2F; end&#x3D;#&lt;&#x2F;\z1&gt;# fold&#39;],</span><br><span class="line">\&#125;,</span><br><span class="line">\&#39;css&#39;: 0,</span><br><span class="line">\&#125;</span><br><span class="line">\&#125;</span><br><span class="line">let g:rainbow_active &#x3D; 1</span><br><span class="line">&quot;------- ALE ---------------</span><br><span class="line">&quot;if need change airline icon:</span><br><span class="line">&quot;   open ~&#x2F;.vim&#x2F;plugged&#x2F;vim-airline&#x2F;autoload&#x2F;airline&#x2F;extensions&#x2F;ale.vim and replace</span><br><span class="line">&quot;   let error_symbol &#x3D; get(g:, &#39;airline#extensions#ale#error_symbol&#39;, &#39;😡&#39;)</span><br><span class="line">&quot;   let warning_symbol &#x3D; get(g:, &#39;airline#extensions#ale#warning_symbol&#39;, &#39;📛:&#39;)</span><br><span class="line">&quot;始终开启标志列</span><br><span class="line">let g:ale_sign_column_always &#x3D; 1</span><br><span class="line">let g:ale_set_highlights &#x3D; 0</span><br><span class="line">&quot;自定义error和warning图标</span><br><span class="line">let g:ale_sign_error &#x3D; &#39;❌&#39;</span><br><span class="line">let g:ale_sign_warning &#x3D; &#39;🔰&#39;</span><br><span class="line">&quot;在vim自带的状态栏中整合ale</span><br><span class="line">let g:ale_statusline_format &#x3D; [&#39;✗ %d&#39;, &#39;⚡ %d&#39;, &#39;✔ OK&#39;]</span><br><span class="line">&quot;显示Linter名称,出错或警告等相关信息</span><br><span class="line">let g:ale_echo_msg_error_str &#x3D; &#39;E&#39;</span><br><span class="line">let g:ale_echo_msg_warning_str &#x3D; &#39;W&#39;</span><br><span class="line">let g:ale_echo_msg_format &#x3D; &#39;[%linter%] %s [%severity%]&#39;</span><br><span class="line">&quot;普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告</span><br><span class="line">nmap sp &lt;Plug&gt;(ale_previous_wrap)</span><br><span class="line">nmap sn &lt;Plug&gt;(ale_next_wrap)</span><br><span class="line">&quot;&lt;Leader&gt;s触发&#x2F;关闭语法检查</span><br><span class="line">nmap &lt;Leader&gt;s :ALEToggle&lt;CR&gt;</span><br><span class="line">&quot;&lt;Leader&gt;d查看错误或警告的详细信息</span><br><span class="line">nmap &lt;Leader&gt;d :ALEDetail&lt;CR&gt;</span><br><span class="line">&quot;set statusline&#x3D;%F%m%r%h%w\ [FORMAT&#x3D;%&#123;&amp;ff&#125;]\ [TYPE&#x3D;%Y]\ [POS&#x3D;%l,%v][%p%%]\ %&#123;strftime(\&quot;%d&#x2F;%m&#x2F;%y\ -\ %H:%M\&quot;)&#125;\ %&#123;ALEGetStatusLine()&#125;</span><br><span class="line">&quot;cpp NOT C++</span><br><span class="line">let g:ale_linters &#x3D; &#123;</span><br><span class="line">\   &#39;cpp&#39;: [&#39;gcc&#39;],</span><br><span class="line">\   &#39;c&#39;: [&#39;gcc&#39;],</span><br><span class="line">\   &#39;python&#39;: [&#39;pylint&#39;],</span><br><span class="line">\&#125;</span><br><span class="line"></span><br><span class="line">&quot;------- MarkDown ----------</span><br><span class="line">&quot;first use :MarkdownPreviewToggel  to wake Plug</span><br><span class="line">let g:vim_markdown_math &#x3D; 1</span><br><span class="line">let g:vmt_auto_update_on_save &#x3D; 0</span><br><span class="line">let g:mkdp_path_to_chrome &#x3D; &quot;C:\Program Files (x86)\Google\Chrome\Application&quot;</span><br><span class="line">let g:mkdp_markdown_css&#x3D;&#39;&#39;</span><br><span class="line"></span><br><span class="line">&quot;------- MDTable -----------</span><br><span class="line">&quot;||+esc</span><br><span class="line">let g:table_mode_corner &#x3D; &#39;|&#39;</span><br><span class="line">let g:table_mode_border&#x3D;0</span><br><span class="line">let g:table_mode_fillchar&#x3D;&#39; &#39;</span><br><span class="line"></span><br><span class="line">function! s:isAtStartOfLine(mapping)</span><br><span class="line">  let text_before_cursor &#x3D; getline(&#39;.&#39;)[0 : col(&#39;.&#39;)-1]</span><br><span class="line">  let mapping_pattern &#x3D; &#39;\V&#39; . escape(a:mapping, &#39;\&#39;)</span><br><span class="line">  let comment_pattern &#x3D; &#39;\V&#39; . escape(substitute(&amp;l:commentstring, &#39;%s.*$&#39;, &#39;&#39;, &#39;&#39;), &#39;\&#39;)</span><br><span class="line">  return (text_before_cursor &#x3D;~? &#39;^&#39; . (&#39;\v(&#39; . comment_pattern . &#39;\v)?&#39;) . &#39;\s*\v&#39; . mapping_pattern . &#39;\v$&#39;)</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">inoreabbrev &lt;expr&gt; &lt;bar&gt;&lt;bar&gt;</span><br><span class="line">          \ &lt;SID&gt;isAtStartOfLine(&#39;\|\|&#39;) ?</span><br><span class="line">          \ &#39;&lt;c-o&gt;:TableModeEnable&lt;cr&gt;&lt;bar&gt;&lt;space&gt;&lt;bar&gt;&lt;left&gt;&lt;left&gt;&#39; : &#39;&lt;bar&gt;&lt;bar&gt;&#39;</span><br><span class="line">inoreabbrev &lt;expr&gt; __</span><br><span class="line">          \ &lt;SID&gt;isAtStartOfLine(&#39;__&#39;) ?</span><br><span class="line">          \ &#39;&lt;c-o&gt;:silent! TableModeDisable&lt;cr&gt;&#39; : &#39;__&#39;</span><br><span class="line"></span><br><span class="line">&quot;------- LaTeX -------------</span><br><span class="line">&quot; Autocomprtr not realize</span><br><span class="line">&quot; F9 not drc</span><br><span class="line">&quot; add SumatraPDF Path</span><br><span class="line">let g:tex_flavor&#x3D;&#39;latex&#39;</span><br><span class="line">let g:vimtex_view_general_viewer &#x3D; &#39;SumatraPDF&#39;</span><br><span class="line">let g:vimtex_view_general_options_latexmk &#x3D; &#39;-reuse-instance&#39;</span><br><span class="line">let g:vimtex_view_general_options</span><br><span class="line">\ &#x3D; &#39;-reuse-instance -forward-search @tex @line @pdf&#39;</span><br><span class="line">\ . &#39; -inverse-search &quot;&#39; . exepath(v:progpath)</span><br><span class="line">\ . &#39; --servername &#39; . v:servername</span><br><span class="line">\ . &#39; --remote-send \&quot;^&lt;C-\^&gt;^&lt;C-n^&gt;&#39;</span><br><span class="line">\ . &#39;:execute &#39;&#39;drop &#39;&#39; . fnameescape(&#39;&#39;\%f&#39;&#39;)^&lt;CR^&gt;&#39;</span><br><span class="line">\ . &#39;:\%l^&lt;CR^&gt;:normal\! zzzv^&lt;CR^&gt;&#39;</span><br><span class="line">\ . &#39;:call remote_foreground(&#39;&#39;&#39;.v:servername.&#39;&#39;&#39;)^&lt;CR^&gt;^&lt;CR^&gt;\&quot;&quot;&#39;</span><br><span class="line">set conceallevel&#x3D;1</span><br><span class="line">let g:tex_conceal&#x3D;&#39;abdmg&#39;</span><br><span class="line"></span><br><span class="line">&quot;------- YCM ---------------</span><br><span class="line">set runtimepath+&#x3D;~&#x2F;.vim&#x2F;plugged&#x2F;YouCompleteMe</span><br><span class="line">autocmd InsertLeave * if pumvisible() &#x3D;&#x3D; 0|pclose|endif &quot;离开插入模式后自动关闭预览窗口&quot;</span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files &#x3D; 1           &quot; 开启 YCM基于标签引擎</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 1 &quot; 注释与字符串中的内容也用于补全</span><br><span class="line">let g:syntastic_ignore_files&#x3D;[&quot;.*\.py$&quot;]</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax &#x3D; 1                  &quot; 语法关键字补全</span><br><span class="line">let g:ycm_complete_in_comments &#x3D; 1</span><br><span class="line">let g:ycm_confirm_extra_conf &#x3D; 0                            &quot; 关闭加载.ycm_extra_conf.py提示</span><br><span class="line">let g:ycm_key_list_select_completion &#x3D; [&#39;&lt;c-n&gt;&#39;, &#39;&lt;Down&gt;&#39;]  &quot; 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.</span><br><span class="line">let g:ycm_key_list_previous_completion &#x3D; [&#39;&lt;c-p&gt;&#39;, &#39;&lt;Up&gt;&#39;]</span><br><span class="line">let g:ycm_complete_in_comments &#x3D; 1                          &quot; 在注释输入中也能补全</span><br><span class="line">let g:ycm_complete_in_strings &#x3D; 1                           &quot; 在字符串输入中也能补全</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 1 &quot; 注释和字符串中的文字也会被收入补全</span><br><span class="line">&quot;let g:ycm_global_ycm_extra_conf&#x3D;&#39;~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe&#x2F;third_party&#x2F;ycmd&#x2F;cpp&#x2F;ycm&#x2F;.ycm_extra_conf.py&#39;</span><br><span class="line">let g:ycm_global_ycm_extra_conf&#x3D;&#39;~&#x2F;.vim&#x2F;plugged&#x2F;YouCompleteMe&#x2F;third_party&#x2F;ycmd&#x2F;cpp&#x2F;.ycm_extra_conf.py&#39;</span><br><span class="line">let g:ycm_show_diagnostics_ui &#x3D; 0                           &quot; 禁用语法检查</span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot;</span><br><span class="line">&quot; 回车即选中当前项</span><br><span class="line">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span><br><span class="line">&quot; 跳转到定义处</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion&#x3D;2                 &quot; 从第2个键入字符就开始罗列匹配项</span><br><span class="line">let g:ycm_key_invoke_completion &#x3D; &#39;&lt;c-z&gt;&#39;</span><br><span class="line">let g:ycm_semantic_triggers &#x3D;  &#123;</span><br><span class="line">\ &#39;c,cpp,python,java,go,erlang,perl&#39;: [&#39;re!\w&#123;2&#125;&#39;],</span><br><span class="line">\ &#39;cs,lua,javascript&#39;: [&#39;re!\w&#123;2&#125;&#39;],</span><br><span class="line">\ &#125;</span><br><span class="line"></span><br><span class="line">&quot;------- Python-mode -------</span><br><span class="line">&quot;开启警告</span><br><span class="line">let g:pymode_warnings &#x3D; 0</span><br><span class="line">&quot;保存文件时自动删除无用空格</span><br><span class="line">let g:pymode_trim_whitespaces &#x3D; 1</span><br><span class="line">let g:pymode_options &#x3D; 1</span><br><span class="line">&quot;显示允许的最大长度的列</span><br><span class="line">let g:pymode_options_colorcolumn &#x3D; 1</span><br><span class="line">&quot;设置QuickFix窗口的最大，最小高度</span><br><span class="line">let g:pymode_quickfix_minheight &#x3D; 3</span><br><span class="line">let g:pymode_quickfix_maxheight &#x3D; 10</span><br><span class="line">&quot;使用python3</span><br><span class="line">let g:pymode_python &#x3D; &#39;python3&#39;</span><br><span class="line">&quot;使用PEP8风格的缩进</span><br><span class="line">let g:pymode_indent &#x3D; 1</span><br><span class="line">&quot;取消代码折叠</span><br><span class="line">let g:pymode_folding &#x3D; 0</span><br><span class="line">&quot;开启python-mode定义的移动方式</span><br><span class="line">let g:pymode_motion &#x3D; 1</span><br><span class="line">&quot;启用python-mode内置的python文档，使用K进行查找</span><br><span class="line">let g:pymode_doc &#x3D; 1</span><br><span class="line">let g:pymode_doc_bind &#x3D; &#39;K&#39;</span><br><span class="line">&quot;自动检测并启用virtualenv</span><br><span class="line">let g:pymode_virtualenv &#x3D; 1</span><br><span class="line">&quot;不使用python-mode运行python代码</span><br><span class="line">let g:pymode_run &#x3D; 0</span><br><span class="line">&quot;let g:pymode_run_bind &#x3D; &#39;&lt;Leader&gt;r&#39;</span><br><span class="line">&quot;不使用python-mode设置断点</span><br><span class="line">let g:pymode_breakpoint &#x3D; 0</span><br><span class="line">&quot;let g:pymode_breakpoint_bind &#x3D; &#39;&lt;leader&gt;b&#39;</span><br><span class="line">&quot;启用python语法检查</span><br><span class="line">let g:pymode_lint &#x3D; 1</span><br><span class="line">&quot;修改后保存时进行检查</span><br><span class="line">let g:pymode_lint_on_write &#x3D; 0</span><br><span class="line">&quot;编辑时进行检查</span><br><span class="line">let g:pymode_lint_on_fly &#x3D; 0</span><br><span class="line">let g:pymode_lint_checkers &#x3D; [&#39;pyflakes&#39;, &#39;pep8&#39;]</span><br><span class="line">&quot;发现错误时不自动打开QuickFix窗口</span><br><span class="line">let g:pymode_lint_cwindow &#x3D; 0</span><br><span class="line">&quot;侧边栏不显示python-mode相关的标志</span><br><span class="line">let g:pymode_lint_signs &#x3D; 0</span><br><span class="line">&quot;let g:pymode_lint_todo_symbol &#x3D; &#39;WW&#39;</span><br><span class="line">&quot;let g:pymode_lint_comment_symbol &#x3D; &#39;CC&#39;</span><br><span class="line">&quot;let g:pymode_lint_visual_symbol &#x3D; &#39;RR&#39;</span><br><span class="line">&quot;let g:pymode_lint_error_symbol &#x3D; &#39;EE&#39;</span><br><span class="line">&quot;let g:pymode_lint_info_symbol &#x3D; &#39;II&#39;</span><br><span class="line">&quot;let g:pymode_lint_pyflakes_symbol &#x3D; &#39;FF&#39;</span><br><span class="line">&quot;启用重构</span><br><span class="line">let g:pymode_rope &#x3D; 1</span><br><span class="line">&quot;不在父目录下查找.ropeproject，能提升响应速度</span><br><span class="line">let g:pymode_rope_lookup_project &#x3D; 0</span><br><span class="line">&quot;光标下单词查阅文档</span><br><span class="line">let g:pymode_rope_show_doc_bind &#x3D; &#39;&lt;C-c&gt;d&#39;</span><br><span class="line">&quot;项目修改后重新生成缓存</span><br><span class="line">let g:pymode_rope_regenerate_on_write &#x3D; 1</span><br><span class="line">&quot;开启补全，并设置&lt;C-Tab&gt;为默认快捷键</span><br><span class="line">let g:pymode_rope_completion &#x3D; 1</span><br><span class="line">let g:pymode_rope_complete_on_dot &#x3D; 1</span><br><span class="line">let g:pymode_rope_completion_bind &#x3D; &#39;&lt;C-Tab&gt;&#39;</span><br><span class="line">&quot;&lt;C-c&gt;g跳转到定义处，同时新建竖直窗口打开</span><br><span class="line">let g:pymode_rope_goto_definition_bind &#x3D; &#39;&lt;C-c&gt;g&#39;</span><br><span class="line">let g:pymode_rope_goto_definition_cmd &#x3D; &#39;vnew&#39;</span><br><span class="line">&quot;重命名光标下的函数，方法，变量及类名</span><br><span class="line">let g:pymode_rope_rename_bind &#x3D; &#39;&lt;C-c&gt;rr&#39;</span><br><span class="line">&quot;重命名光标下的模块或包</span><br><span class="line">let g:pymode_rope_rename_module_bind &#x3D; &#39;&lt;C-c&gt;r1r&#39;</span><br><span class="line">&quot;开启python所有的语法高亮</span><br><span class="line">let g:pymode_syntax &#x3D; 1</span><br><span class="line">let g:pymode_syntax_all &#x3D; 1</span><br><span class="line">&quot;高亮缩进错误</span><br><span class="line">let g:pymode_syntax_indent_errors &#x3D; g:pymode_syntax_all</span><br><span class="line">&quot;高亮空格错误</span><br><span class="line">let g:pymode_syntax_space_errors &#x3D; g:pymode_syntax_all</span><br><span class="line"></span><br><span class="line">&quot;------- vim-cpp-hilight ---</span><br><span class="line">let g:cpp_class_scope_highlight &#x3D; 1</span><br><span class="line">let g:cpp_member_variable_highlight &#x3D; 1</span><br><span class="line">let g:cpp_class_decl_highlight &#x3D; 1</span><br><span class="line">let g:cpp_experimental_simple_template_highlight &#x3D; 1</span><br><span class="line">let g:cpp_experimental_template_highlight &#x3D; 1</span><br><span class="line">let g:cpp_concepts_highlight &#x3D; 1</span><br><span class="line"></span><br><span class="line">&quot;------- Start -------------</span><br><span class="line">&quot;let g:startify_custom_header &#x3D; [</span><br><span class="line">&quot;            \ &#39;+------------------------------+&#39;,</span><br><span class="line">&quot;            \ &#39;|                              |&#39;,</span><br><span class="line">&quot;            \ &#39;|    Still waters run deep!    |&#39;,</span><br><span class="line">&quot;            \ &#39;|                              |&#39;,</span><br><span class="line">&quot;            \ &#39;+----------------+-------------+&#39;,</span><br><span class="line">&quot;            \]</span><br><span class="line">&quot;let g:startify_custom_footer &#x3D; [</span><br><span class="line">&quot;            \ &#39;+------------------------------+&#39;,</span><br><span class="line">&quot;            \ &#39;|     Keep an open mind!       |&#39;,</span><br><span class="line">&quot;            \ &#39;+----------------+-------------+&#39;,</span><br><span class="line">&quot;            \]</span><br><span class="line">let g:startify_files_number &#x3D; 5</span><br><span class="line">&quot;let g:startify_custom_indices &#x3D; map(range(1,100), &#39;string(v:val)&#39;)</span><br><span class="line"></span><br><span class="line">&quot;------- Taglist -----------</span><br><span class="line">&quot;http:&#x2F;&#x2F;ctags.sourceforge.net&#x2F; to download ctags -&gt; unzip -&gt; add path</span><br><span class="line">&quot;add Plug Taglist from github mirror</span><br><span class="line">let Tlist_Use_Right_Window&#x3D;1 </span><br><span class="line">let Tlist_Inc_Winwidth&#x3D;0 </span><br><span class="line">let Tlist_File_Fold_Auto_Close&#x3D;1</span><br><span class="line">let Tlist_Exit_Onluwindow&#x3D;1</span><br><span class="line">map &lt;F4&gt; :TlistToggle&lt;cr&gt;              </span><br><span class="line"></span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D; VIM-Plug &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)</span><br><span class="line">Plug &#39;lyokha&#x2F;vim-xkbswitch&#39;                 &quot;neovim notsupport</span><br><span class="line">Plug &#39;DeXP&#x2F;xkb-switch-win&#39;                  &quot;neoivm norsupport</span><br><span class="line">Plug &#39;vim-airline&#x2F;vim-airline&#39;</span><br><span class="line">Plug &#39;connorholyday&#x2F;vim-snazzy&#39;</span><br><span class="line">Plug &#39;preservim&#x2F;nerdtree&#39;</span><br><span class="line">Plug &#39;mbbill&#x2F;undotree&#39;</span><br><span class="line">Plug &#39;dense-analysis&#x2F;ale&#39;</span><br><span class="line">Plug &#39;vim-airline&#x2F;vim-airline-themes&#39;</span><br><span class="line">Plug &#39;Raimondi&#x2F;delimitMate&#39;</span><br><span class="line">Plug &#39;Chiel92&#x2F;vim-autoformat&#39;</span><br><span class="line">Plug &#39;preservim&#x2F;nerdcommenter&#39;</span><br><span class="line">&quot;Plug &#39;kien&#x2F;rainbow_parentheses.vim&#39;</span><br><span class="line">Plug &#39;luochen1990&#x2F;rainbow&#39;</span><br><span class="line">Plug &#39;godlygeek&#x2F;tabular&#39;</span><br><span class="line">Plug &#39;mzlogin&#x2F;vim-markdown-toc&#39;</span><br><span class="line">Plug &#39;plasticboy&#x2F;vim-markdown&#39;</span><br><span class="line">Plug &#39;iamcco&#x2F;markdown-preview.nvim&#39;, &#123; &#39;do&#39;: &#123; -&gt; mkdp#util#install() &#125; &#125;</span><br><span class="line">Plug &#39;ferrine&#x2F;md-img-paste.vim&#39; </span><br><span class="line">Plug &#39;lervag&#x2F;vimtex&#39;</span><br><span class="line">Plug &#39;python-mode&#x2F;python-mode&#39;, &#123; &#39;for&#39;: &#39;python&#39;, &#39;branch&#39;: &#39;develop&#39; &#125;</span><br><span class="line">Plug &#39;octol&#x2F;vim-cpp-enhanced-highlight&#39;</span><br><span class="line">Plug &#39;mhinz&#x2F;vim-startify&#39;</span><br><span class="line">Plug &#39;dhruvasagar&#x2F;vim-table-mode&#39;</span><br><span class="line">Plug &#39;vim-scripts&#x2F;taglist.vim&#39;</span><br><span class="line">Plug &#39;ycm-core&#x2F;YouCompleteMe&#39;</span><br><span class="line">Plug &#39;vim-scripts&#x2F;VimTweak&#39;</span><br><span class="line">Plug &#39;mattn&#x2F;transparency-windows-vim&#39;</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D; Theme &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">colorscheme snazzy </span><br></pre></td></tr></table></figure><p>同时可以访问我的GitHub上的<a href="https://github.com/KairuiLiu/vimrc_backup">Vim配置文件备份项目</a>，上面还有文中所有的配置文件</p><hr><h1 id="16-Vim-在Linux下的配置"><a href="#16-Vim-在Linux下的配置" class="headerlink" title="16 Vim 在Linux下的配置"></a>16 Vim 在Linux下的配置</h1><p>与Windows配置大体相同，略做修改，吧Vim-Plug下的有win的插件删除，直接安装，注意的是部分插件的配置方法不同</p><ol><li>catag 不必下载解压略，之家Pacman安装即可</li><li>YCM 安装后进入Pluged - you… - 直接运行./install.py 不必下载VsBuild</li><li>XKB插件 将<code>Plug &#39;DeXP/xkb-switch-win&#39;</code>改为<code>Plug &#39;grwlf/xkb-switch&#39;</code>安装，进入Pluged - xkb - 运行如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>看起来就像是代码没写完，略去略一堆，但是实际上就是这样的<br>4. 字体设置那行删除掉<br>5. 滚动设置删除<br>6. Linux下切换ESC与CapsLock<br>在~/.Xmodmap写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">! Swap caps lock and escape</span><br><span class="line">remove Lock = Caps_Lock</span><br><span class="line">keysym Escape = Caps_Lock</span><br><span class="line">keysym Caps_Lock = Escape</span><br><span class="line">add Lock = Caps_Lock</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> xmodmap ~/.Xmodmap</span><br></pre></td></tr></table></figure><p>可以的话还要加入自启动</p><ol><li><a href="https://blog.csdn.net/tmjdone/article/details/5627239">KDE桌面的方法</a>，当然直接autostart加入.sh即可</li><li>i3wm的方法(后面会用到)<br>~/.config/i3/config写入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> xmodmap ~/.Xmodmap</span><br></pre></td></tr></table></figure></li></ol><hr><p><font size="5" color="red">谨记：Vim是一款工具，使用VIM是为了加快您的Coding效率的，不要配置比使用的时间还长</font></p><hr><h1 style=“fontsize:30px”>完结撒花~</h1>]]></content>
    
    
    <summary type="html">记录了我Windows下Vim的使用与配置经历，前前后后差不多用了一周，对于常用的C++,Python,LaTeX,R语言写的较为详细可行</summary>
    
    
    
    <category term="工具" scheme="http://liukairui.cc/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="IDE" scheme="http://liukairui.cc/categories/%E5%B7%A5%E5%85%B7/IDE/"/>
    
    <category term="杂七杂八" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    <category term="IDE" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/IDE/"/>
    
    <category term="Vim" scheme="http://liukairui.cc/categories/%E5%B7%A5%E5%85%B7/IDE/Vim/"/>
    
    <category term="Vim" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/IDE/Vim/"/>
    
    
    <category term="Vim" scheme="http://liukairui.cc/tags/Vim/"/>
    
    <category term="工具" scheme="http://liukairui.cc/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="IDE" scheme="http://liukairui.cc/tags/IDE/"/>
    
    <category term="杂七杂八" scheme="http://liukairui.cc/tags/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
  </entry>
  
  <entry>
    <title>解决vim ale clang找不到iostream</title>
    <link href="http://liukairui.cc/%E8%A7%A3%E5%86%B3vimaleclang%E6%89%BE%E4%B8%8D%E5%88%B0iostream/"/>
    <id>http://liukairui.cc/%E8%A7%A3%E5%86%B3vimaleclang%E6%89%BE%E4%B8%8D%E5%88%B0iostream/</id>
    <published>2020-10-30T16:00:15.000Z</published>
    <updated>2020-11-15T18:07:12.320Z</updated>
    
    <content type="html"><![CDATA[<p>转自湾湾一同学博客，百度的那个真的不靠谱<br>环境：(其他环境应该也可以用类似解法只是路径不同要自己找一下)<br>Cygwin<br>clang++ –version：5.0.1</p><p>主要是要写C++时，ale报错：<br>([clang] ‘iostream’ file not found [W ])<br>感觉是clang的问题，就来解决啦<br><img data-src="https://img-blog.csdnimg.cn/20200429052643298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>ps 图片中的 10055_Hashmat_the_brave_warrior 就自动换成test 啰</p><p>首先找不到iostream是因为clang没搜寻到存放的资料夹<br>(fatal error: ‘iostream’ file not found)<br><img data-src="https://img-blog.csdnimg.cn/20200429052656311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以使用加上-v 查看搜寻路径<br>$ clang++ -c test.cpp -v<br><img data-src="https://img-blog.csdnimg.cn/20200429052706806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>不过查看其实没啥用，还是会显示没找到iostream<br>所以要直接加入路径，我是直接使用gcc的路径<br>$ clang++ -c test.cpp -isystem /lib/gcc/x86_64-pc-cygwin/6.4.0/include/c++</p><p>但是会显示另一个错误，就是找不到bits/c++config.h<br>(fatal error: ‘bits/c++config.h’ file not found)<br><img data-src="https://img-blog.csdnimg.cn/2020042905272147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后我就发现x86_64-pc-cygwin 资料夹，里面的bits 内有c++config.h !!!!<br><img data-src="https://img-blog.csdnimg.cn/20200429052731145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所以就把它移到外面的bits里啰<br>到”cygwin安装路径”\cygwin\lib\gcc\x86_64-pc-cygwin\6.4.0\include\c++<br>找到x86_64-pc-cygwin资料夹<br>把里面的bits资料夹内部所有档案复制后贴到与x86_64-pc-cygwin同层的bits资料夹内<br>同理把所有x86_64-pc-cygwin资料夹内的子资料夹都这样做</p><p><img data-src="https://img-blog.csdnimg.cn/20200429052740597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后刚刚的指令就没有错误了<br>$ clang++ -c test.cpp -isystem /lib/gcc/x86_64-pc-cygwin/6.4.0/include/c++</p><p>接着就设定vim啰<br>打开设定档eg .vimrc<br>加入：<br>let g : ale_cpp_clang_options = ‘-std=c++14 -Wall -nostdinc++ -isystem /lib/gcc/x86_64-pc-cygwin/6.4.0/include/c++’ 解决OuO</p><p><img data-src="https://img-blog.csdnimg.cn/20200429052751129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">转自湾湾一同学博客，百度的那个真的不靠谱 环境：(其他环境应该也可以用类似解法只是路径不同要自己找一下) Cygwin clang++ --version：5.0.1</summary>
    
    
    
    <category term="杂七杂八的" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84/"/>
    
    <category term="工具" scheme="http://liukairui.cc/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Vim" scheme="http://liukairui.cc/categories/%E5%B7%A5%E5%85%B7/Vim/"/>
    
    <category term="Vim" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84/Vim/"/>
    
    
    <category term="Vim" scheme="http://liukairui.cc/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>常见的文件头格式</title>
    <link href="http://liukairui.cc/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A0%BC%E5%BC%8F/"/>
    <id>http://liukairui.cc/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A0%BC%E5%BC%8F/</id>
    <published>2020-10-30T16:00:14.000Z</published>
    <updated>2020-11-15T18:05:00.348Z</updated>
    
    <content type="html"><![CDATA[<p>可直接进行文件格式分析的小工具：<a href="https://download.csdn.net/download/Liukairui/12347994"></a></p><h2 id="1-从Ultra－edit-32中提取出来的"><a href="#1-从Ultra－edit-32中提取出来的" class="headerlink" title="1. 从Ultra－edit-32中提取出来的"></a>1. 从Ultra－edit-32中提取出来的</h2><table><thead><tr><th>文件格式</th><th>文件头</th></tr></thead><tbody><tr><td>JPEG (jpg)</td><td>FFD8FF</td></tr><tr><td>PNG (png)</td><td>89504E47</td></tr><tr><td>GIF (gif)</td><td>47494638</td></tr><tr><td>TIFF (tif)</td><td>49492A00</td></tr><tr><td>Windows Bitmap (bmp)</td><td>424D</td></tr><tr><td>CAD (dwg)</td><td>41433130</td></tr><tr><td>Adobe Photoshop (psd)</td><td>38425053</td></tr><tr><td>Rich Text Format (rtf)</td><td>7B5C727466</td></tr><tr><td>XML (xml)</td><td>3C3F786D6C</td></tr><tr><td>HTML (html)</td><td>68746D6C3E</td></tr><tr><td>Email [thorough only] (eml)</td><td>44656C69766572792D646174653A</td></tr><tr><td>Outlook Express (dbx)</td><td>CFAD12FEC5FD746F</td></tr><tr><td>Outlook (pst)</td><td>2142444E</td></tr><tr><td>MS Word/Excel (xls.or.doc)</td><td>D0CF11E0</td></tr><tr><td>MS Access (mdb)</td><td>5374616E64617264204A</td></tr><tr><td>WordPerfect (wpd)</td><td>FF575043</td></tr><tr><td>Postscript (eps.or.ps)</td><td>252150532D41646F6265</td></tr><tr><td>Adobe Acrobat (pdf)</td><td>255044462D312E</td></tr><tr><td>Quicken (qdf)</td><td>AC9EBD8F</td></tr><tr><td>Windows Password (pwl)</td><td>E3828596</td></tr><tr><td>ZIP Archive (zip)</td><td>504B0304</td></tr><tr><td>RAR Archive (rar)</td><td>52617221</td></tr><tr><td>Wave (wav)</td><td>57415645</td></tr><tr><td>AVI (avi)</td><td>41564920</td></tr><tr><td>Real Audio (ram)</td><td>2E7261FD</td></tr><tr><td>Real Media (rm)</td><td>2E524D46</td></tr><tr><td>MPEG (mpg)</td><td>000001BA</td></tr><tr><td>MPEG (mpg)</td><td>000001B3</td></tr><tr><td>Quicktime (mov)</td><td>6D6F6F76</td></tr><tr><td>Windows Media (asf)</td><td>3026B2758E66CF11</td></tr></tbody></table><h2 id="2-从winhex中取出的文件头列表"><a href="#2-从winhex中取出的文件头列表" class="headerlink" title="2. 从winhex中取出的文件头列表"></a>2. 从winhex中取出的文件头列表</h2><table><thead><tr><th>文件格式</th><th>文件头</th></tr></thead><tbody><tr><td>JPEG jpg;jpeg</td><td>0xFFD8FF</td></tr><tr><td>PNG png</td><td>0x89504E470D0A1A0A</td></tr><tr><td>GIF gif</td><td>GIF8</td></tr><tr><td>TIFF tif;tiff</td><td>0x49492A00</td></tr><tr><td>TIFF tif;tiff</td><td>0x4D4D002A</td></tr><tr><td>Bit map bmp</td><td>BM</td></tr><tr><td>AOL ART art</td><td>0x4A47040E00000</td></tr><tr><td>AOL ART art</td><td>0x4A47030E000000</td></tr><tr><td>PC Paintbrush pcx</td><td>0x0A050108</td></tr><tr><td>Graphics Metafile wmf</td><td>0xD7CDC69A</td></tr><tr><td>Graphics Metafile wmf</td><td>0x01000900</td></tr><tr><td>Graphics Metafile wmf</td><td>0x02000900</td></tr><tr><td>Enhanced Metafile emf</td><td>0x0100000058000000</td></tr><tr><td>Corel Draw cdr</td><td>CDR</td></tr><tr><td>CAD dwg</td><td>0x41433130</td></tr><tr><td>Adobe Photoshop psd</td><td>8BPS</td></tr><tr><td>Rich Text Format rtf</td><td>rtf</td></tr><tr><td>XML</td><td>xml</td></tr><tr><td>HTML html;htm;PHP;php3;php4;phtml;</td><td>shtml type</td></tr><tr><td>Email eml</td><td>Delivery-date:</td></tr><tr><td>Outlook Express dbx</td><td>0xCFAD12FE</td></tr><tr><td>MS Office/OLE2doc;xls;dot;ppt;xla;ppa;pps;pot;msi;sdw;db</td><td>0xD0CF11E0A1B11AE1</td></tr><tr><td>MS Access mdb;mda;mde;mdt</td><td>Standard J</td></tr><tr><td>WordPerfect wpd</td><td>0xFF575043</td></tr><tr><td>OpenOffice Writer</td><td>sxw writer</td></tr><tr><td>OpenOffice Calc</td><td>sxc calc</td></tr><tr><td>OpenOffice Math</td><td>sxm math</td></tr><tr><td>OpenOffice Impress</td><td>sxi impress</td></tr><tr><td>OpenOffice Draw</td><td>sxd draw</td></tr><tr><td>Adobe FrameMaker</td><td>fm &lt;MAKERFILE</td></tr><tr><td>PostScript eps.or.ps;ps;eps</td><td>%!PS-Adobe</td></tr><tr><td>Adobe Acrobat pdf</td><td>%PDF-1.</td></tr><tr><td>Quicken qdf</td><td>0xAC9EBD8F</td></tr><tr><td>QuickBooks Backup qbb</td><td>0x458600000600</td></tr><tr><td>Sage sly.or.srt.or.slt;sly;srt;</td><td>slt0x53520100</td></tr><tr><td>Sage Backup 1</td><td>SAGEBACKUP</td></tr><tr><td>Lotus WordPro v9 lwp</td><td>0x576F726450726F</td></tr><tr><td>Lotus 123 v9 123</td><td>0x00001A00051004</td></tr><tr><td>Lotus 123 v5 wk4</td><td>0x00001A0002100400</td></tr><tr><td>Lotus 123 v3 wk3</td><td>0x00001A0000100400</td></tr><tr><td>Lotus 123 v1 wk1</td><td>0x2000604060</td></tr><tr><td>Windows Password pwl</td><td>0xE3828596</td></tr><tr><td>ZIP Archive zip;jar</td><td>0x504B0304</td></tr><tr><td>ZIP Archive (outdated) zip</td><td>0x504B3030</td></tr><tr><td>RAR Archive</td><td>rar Rar!</td></tr><tr><td>GZ Archive gz;tgz</td><td>0x1F8B08</td></tr><tr><td>BZIP Archive bz2</td><td>BZh</td></tr><tr><td>ARJ Archive arj</td><td>0x60EA</td></tr><tr><td>7-ZIP Archive</td><td>7z 7z集’</td></tr><tr><td>Wave wav</td><td>WAVE</td></tr><tr><td>AVI avi</td><td>AVI</td></tr><tr><td>Real Audio ram;ra</td><td>.ra?0</td></tr><tr><td>Real Media rm</td><td>.RMF</td></tr><tr><td>MPEG mpg;mpeg</td><td>0x000001BA</td></tr><tr><td>MPEG mpg;mpeg</td><td>0x000001B3</td></tr><tr><td>Quicktime mov</td><td>moov</td></tr><tr><td>Windows Media asf</td><td>0x3026B2758E66CF11</td></tr><tr><td>MIDI mid</td><td>MThd</td></tr><tr><td>Win32 Executable exe;dll;drv;vxd;sys;ocx;</td><td>vbxMZ</td></tr><tr><td>Win16 Executable exe;dll;drv;vxd;sys;ocx;</td><td>vbxMZ</td></tr><tr><td>ELF Executable elf;</td><td>0x7F454C4601010100</td></tr></tbody></table><h2 id="3-各种文件类型文件头标志位详细列表"><a href="#3-各种文件类型文件头标志位详细列表" class="headerlink" title="3.各种文件类型文件头标志位详细列表"></a>3.各种文件类型文件头标志位详细列表</h2><table><thead><tr><th>文件头</th><th>文件类型</th></tr></thead><tbody><tr><td>FFD8FFFE00</td><td>.JPEG;.JPE;.JPG    JPGGraphic File</td></tr><tr><td>FFD8FFE000</td><td>.JPEG;.JPE;.JPG    JPGGraphic File</td></tr><tr><td>474946383961</td><td>.gif    GIF 89A</td></tr><tr><td>474946383761</td><td>.gif    GIF 87A</td></tr><tr><td>424D</td><td>.bmp    Windows Bitmap</td></tr><tr><td>4D5A</td><td>.exe;.com;.386;.ax;.acm;.sys;.dll;.drv;.flt;.fon;.ocx;.scr;.lrc;.vxd;</td></tr><tr><td>.cpl;.x32</td><td>Executable File</td></tr><tr><td>504B0304</td><td>.zip    Zip Compressed</td></tr><tr><td>3A42617365</td><td>.cnt</td></tr><tr><td>D0CF11E0A1B11AE1</td><td>.doc;.xls;.xlt;.ppt;.apr    MS Compound Document v1 or Lotus Approach APRfile</td></tr><tr><td>0100000058000000</td><td>.emf</td></tr><tr><td>03000000C466C456</td><td>.evt</td></tr><tr><td>3F5F0300</td><td>.gid;.hlp;.lhp    Windows HelpFile</td></tr><tr><td>1F8B08</td><td>.gz    GZ Compressed File</td></tr><tr><td>28546869732066696C65</td><td>.hqx</td></tr><tr><td>0000010000</td><td>.ico    Icon File</td></tr><tr><td>4C000000011402</td><td>.lnk    Windows LinkFile</td></tr><tr><td>25504446</td><td>.pdf    Adobe PDF File</td></tr><tr><td>5245474544495434</td><td>.reg</td></tr><tr><td>7B5C727466</td><td>.rtf    Rich Text Format File</td></tr><tr><td>lh</td><td>.lzh    Lz compression file</td></tr><tr><td>MThd</td><td>.mid</td></tr><tr><td>0A050108</td><td>.pcx</td></tr><tr><td>25215053</td><td>.eps    Adobe EPS File</td></tr><tr><td>2112</td><td>.ain    AIN Archive File</td></tr><tr><td>1A02</td><td>.arc    ARC/PKPAK Compressed 1</td></tr><tr><td>1A03</td><td>.arc    ARC/PKPAK Compressed 2</td></tr><tr><td>1A04</td><td>.arc    ARC/PKPAK Compressed 3</td></tr><tr><td>1A08</td><td>.arc    ARC/PKPAK Compressed 4</td></tr><tr><td>1A09</td><td>.arc    ARC/PKPAK Compressed 5</td></tr><tr><td>60EA</td><td>.arj    ARJ Compressed</td></tr><tr><td>41564920</td><td>.avi    Audio Video Interleave(AVI)</td></tr><tr><td>425A68</td><td>.bz;.bz2    Bzip Archive</td></tr><tr><td>49536328</td><td>.cab    Cabinet File</td></tr><tr><td>4C01</td><td>.obj    Compiled Object Module</td></tr><tr><td>303730373037</td><td>.tar;.cpio    CPIO ArchiveFile</td></tr><tr><td>4352555348</td><td>.cru;.crush    CRUSH ArchiveFile</td></tr><tr><td>3ADE68B1</td><td>.dcx    DCX Graphic File</td></tr><tr><td>1F8B</td><td>.gz;.tar;.tgz    Gzip ArchiveFile</td></tr><tr><td>91334846</td><td>.hap    HAP Archive File</td></tr><tr><td>3C68746D6C3E</td><td>.htm;.html    HyperText Markup Language 1</td></tr><tr><td>3C48544D4C3E</td><td>.htm;.html    HyperText Markup Language 2</td></tr><tr><td>3C21444F4354</td><td>.htm;.html    HyperText MarkupLanguage 3</td></tr><tr><td>100</td><td>.ico    ICON File</td></tr><tr><td>5F27A889</td><td>.jar    JAR Archive File</td></tr><tr><td>2D6C68352D</td><td>.lha    LHA Compressed</td></tr><tr><td>20006040600</td><td>.wk1;.wks    Lotus 123 v1 Worksheet</td></tr><tr><td>00001A0007800100</td><td>.fm3    Lotus 123 v3 FMTfile</td></tr><tr><td>00001A0000100400</td><td>.wk3    Lotus 123 v3Worksheet</td></tr><tr><td>20006800200</td><td>.fmt    Lotus 123 v4 FMTfile</td></tr><tr><td>00001A0002100400</td><td>.wk4    Lotus 123 v5</td></tr><tr><td>5B7665725D</td><td>.ami    Lotus Ami Pro</td></tr><tr><td>300000041505052</td><td>.adx    Lotus ApproachADX file</td></tr><tr><td>1A0000030000</td><td>.nsf;.ntf    Lotus NotesDatabase/Template</td></tr><tr><td>4D47582069747064</td><td>.ds4    MicrografixDesigner 4</td></tr><tr><td>4D534346</td><td>.cab    Microsoft CAB FileFormat</td></tr><tr><td>4D546864</td><td>.mid    Midi Audio File</td></tr><tr><td>000001B3</td><td>.mpg;.mpeg    MPEG Movie</td></tr><tr><td>0902060000001000B9045C00</td><td>.xls    MS Excel v2</td></tr><tr><td>0904060000001000F6055C00</td><td>.xls    MS Excel v4</td></tr><tr><td>7FFE340A</td><td>.doc    MS Word</td></tr><tr><td>1234567890FF</td><td>.doc    MS Word 6.0</td></tr><tr><td>31BE000000AB0000</td><td>.doc    MS Word forDOS 6.0</td></tr><tr><td>1A00000300001100</td><td>.nsf    NotesDatabase</td></tr><tr><td>7E424B00</td><td>.psp    PaintShop Pro Image File</td></tr><tr><td>504B0304</td><td>.zip    PKZIP Compressed</td></tr><tr><td>89504E470D0A</td><td>.png    PNG Image File</td></tr><tr><td>6D646174</td><td>.mov    QuickTime Movie</td></tr><tr><td>6D646174</td><td>.qt    Quicktime MovieFile</td></tr><tr><td>52617221</td><td>.rar    RAR Archive File</td></tr><tr><td>2E7261FD</td><td>.ra;.ram    Real AudioFile</td></tr><tr><td>EDABEEDB</td><td>.rpm    RPM Archive File</td></tr><tr><td>2E736E64</td><td>.au    SoundMachine AudioFile</td></tr><tr><td>53495421</td><td>.sit    Stuffit v1 ArchiveFile</td></tr><tr><td>53747566664974</td><td>.sit    Stuffit v5Archive File</td></tr><tr><td>1F9D</td><td>.z    TAR Compressed ArchiveFile</td></tr><tr><td>49492A</td><td>.tif;.tiff    TIFF (Intel)</td></tr><tr><td>4D4D2A</td><td>.tif;.tiff    TIFF (Motorola)</td></tr><tr><td>554641</td><td>.ufa    UFA Archive File</td></tr><tr><td>57415645666D74</td><td>.wav    Wave Files</td></tr><tr><td>D7CDC69A</td><td>.wmf    Windows Meta File</td></tr><tr><td>4C000000</td><td>.lnk    Windows Shortcut (LinkFile)</td></tr><tr><td>504B3030504B0304</td><td>.zip    WINZIPCompressed</td></tr><tr><td>FF575047</td><td>.wpg    WordPerfectGraphics</td></tr><tr><td>FF575043</td><td>.wp    WordPerfect v5 orv6</td></tr><tr><td>3C3F786D6C</td><td>.xml    XML Document</td></tr><tr><td>FFFE3C0052004F004F0054005300540055004200</td><td>.xml    XML Document(ROOTSTUB)</td></tr><tr><td>3C21454E54495459</td><td>.dtd    XML DTD</td></tr><tr><td>5A4F4F20</td><td>.zoo    ZOO Archive File</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">每一个二进制文件在编码的时候会为自己的文件加入相应格式的文件头，我们可以通过分析文件头获得文件可能的类型(扩展名)</summary>
    
    
    
    <category term="杂七杂八的" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84/"/>
    
    <category term="文件头格式" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84/%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A0%BC%E5%BC%8F/"/>
    
    
    <category term="文件头" scheme="http://liukairui.cc/tags/%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>2020牛客寒假算法基础集训营6题解</title>
    <link href="http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A56%E9%A2%98%E8%A7%A3/"/>
    <id>http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A56%E9%A2%98%E8%A7%A3/</id>
    <published>2020-10-30T16:00:13.000Z</published>
    <updated>2020-11-15T18:02:49.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-配对"><a href="#A-配对" class="headerlink" title="A: 配对"></a>A: 配对</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231404240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><hr><p>考虑贪心：首先，用A中最大的K个数字和B中最大的K个数字去组合如果A1&lt;A2,B1&lt;B2，那么一定是由A1和B2配对较优。所以，倒序配对是最优的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100050</span>],b[<span class="number">100050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line">    sort(b,b+n,cmp);</span><br><span class="line">    sort(a,a+k);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)ans=min(ans,a[i]+b[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-图"><a href="#B-图" class="headerlink" title="B: 图"></a>B: 图</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231421752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><p>n-1条边也就是说他是一棵树，所以这个题相当于是在问图的直径，见文章：<a href="https://blog.csdn.net/Liukairui/article/details/79368790">关于计蒜客习题：网络延迟的思路（求树的最大直径求法与证明）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,to[<span class="number">1000050</span>],dp[<span class="number">1000050</span>],deep[<span class="number">1000050</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1000050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">    vis[pos]=<span class="number">1</span>;deep[pos]=dep;</span><br><span class="line">    <span class="keyword">if</span>(dp[to[pos]])dp[pos]=dp[to[pos]]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(deep[to[pos]])&#123;</span><br><span class="line">        dp[pos]=(deep[pos]-deep[to[pos]]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> nw=to[pos];</span><br><span class="line">        <span class="keyword">while</span>(nw!=pos)&#123;</span><br><span class="line">            dp[nw]=dp[pos];</span><br><span class="line">            nw=to[nw];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        dfs(to[pos],dep+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!dp[pos])dp[pos]=dp[to[pos]]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;to[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!vis[i])dfs(i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=max(dp[i],ans);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-汉诺塔"><a href="#C-汉诺塔" class="headerlink" title="C: 汉诺塔"></a>C: 汉诺塔</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231440770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><hr><p>官方题解：<br>将木板按照Xi从小到大排序，将这时的Yi数列记为Zi数列，则问题变成将Zi划分为尽可能少的若干组上升子序列。<br>根据<a href="https://www.cnblogs.com/ZDHYXZ/p/6871802.html">Dilworth定理</a>，最小组数等于Zi的最长下降子序列长度。<br>要求最长下降子序列的长度，我们有一种经典的二分优化dp的方法，在这里不再详述。 借助这种做法我们能给出一种<a href="https://www.cnblogs.com/milky-w/p/8431333.html">构造方法</a>，在求出最小组数的同时得出方案。<br>将状态数组的每个位置变为栈，用入栈操作代替修改元素操作，即可在求出组数的同时，用这些栈来完成对数列的划分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> d[maxn],bl[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> x,y,id;</span><br><span class="line">   <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x&lt;rhs.x;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">      a[i].id=i;</span><br><span class="line">   &#125;</span><br><span class="line">   sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      d[i]=-INF;</span><br><span class="line">      <span class="keyword">int</span> k=lower_bound(d+<span class="number">1</span>,d+i+<span class="number">1</span>,a[i].y,greater&lt;<span class="keyword">int</span>&gt;())-d;</span><br><span class="line">      ans=max(ans,k),d[k]=a[i].y,bl[a[i].id]=k;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,ans,bl[<span class="number">1</span>]);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,bl[i]); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-重排列"><a href="#D-重排列" class="headerlink" title="D: 重排列"></a>D: 重排列</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231454774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><hr><p>首先对于输入排序，然后每一个数找到那个比他大的，运用乘法原理即可求解，具体忘了qwq<br>官方题解是：</p><blockquote><p>容易知道按升序将A和B排序不影响结果。 按标号从小到大考虑A的每个位置填什么数。 例：A（1,2,3）；B（1,3,4）<br>则考虑第一个位置时，只能填1。 考虑第二个位置时，可以填2或3。 但是由于2和3在这里是完全等价的，也就是说我们并不关心填了谁。<br>那么我们只需要记录每一步有多少个数可填就好了，这个答案与之前填入的方案无关。 具体实现的时候只需要用双指针进行一轮扫描就可以了。</p></blockquote><p>似乎我不是这样写的…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>,mod=<span class="number">1000000007</span>,n,a[<span class="number">100050</span>],b[<span class="number">100050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;b[i]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;((upper_bound(a+1,a+n+1,b[i])-a-i)*ans)%mod&lt;&lt;&quot;  **  &quot;;</span></span><br><span class="line">        ans=(((upper_bound(a+<span class="number">1</span>,a+n+<span class="number">1</span>,b[i])-a-i+mod)%mod)*ans)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-立方数"><a href="#E-立方数" class="headerlink" title="E: 立方数"></a>E: 立方数</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231511420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">27</span> <span class="number">24</span> <span class="number">7</span> <span class="number">54</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><p>首先想到的思路是，把这个数的因数搞出来，对于所有的因数，如果(计数&gt;3)就给ans乘上(计数/3).<br>轻松写出代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">map</span>&lt; <span class="keyword">long</span>, <span class="keyword">long</span> &gt; mp;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        ll n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!mp.count(i))mp[i] = <span class="number">0</span>;</span><br><span class="line">                ++mp[i];</span><br><span class="line">                n/=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = mp.rbegin();it != mp.rend();it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second &gt;= <span class="number">3</span>)ans*=it-&gt;first * (it-&gt;second/<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后轻松TLE，然后我们进行优化，我们枚举每个数的因数，当然是质数，那么枚举范围是0 ~ n吗，不是，是0 ~ n^(1/3) ，因为他要立方<br>我们继续考虑优化，实际上只需要枚举 0 ~ n^(1/4) 以内的质数去试除，最后剩的数为X<br>此时X要么是一个完全立方数，要么对答案没有任何贡献，只需要验证X是不是一个完全立方数即可<br>我们使用二分法确定    </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp=<span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> vst[MAX_N],len,p[MAX_N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MAX_N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vst[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            p[len++]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;MAX_N;j+=i)</span><br><span class="line">                vst[j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll t,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ll ans=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        ll max_len=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n))));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]&gt;max_len)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%p[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                n/=p[i];</span><br><span class="line">                <span class="keyword">if</span>(cnt==<span class="number">3</span>)&#123;ans*=p[i];cnt=<span class="number">0</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>  l=<span class="number">1</span>,r=<span class="number">1e6</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            ll mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid*mid*mid==n)&#123;</span><br><span class="line">                ans*=mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid*mid*mid&lt;n)&#123;</span><br><span class="line">                l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上不需要用二分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">31644</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; pri;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            pri.push_back(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;maxn;j+=i)&#123;</span><br><span class="line">                vis[j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        ll n;<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        ll ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pri.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%pri[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(n%(pri[i]*pri[i]*pri[i])==<span class="number">0</span>)&#123;</span><br><span class="line">                    n/=(pri[i]*pri[i]*pri[i]);cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(n%pri[i]==<span class="number">0</span>) n/=pri[i];</span><br><span class="line">                <span class="keyword">while</span>(cnt--)&#123;</span><br><span class="line">                    ans*=pri[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll x=<span class="built_in">pow</span>(n,<span class="number">1.0</span>/<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(ll i=max(<span class="number">1l</span>l,x+<span class="number">1</span>);i&lt;=x+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i*i*i==n)&#123;</span><br><span class="line">                ans*=i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-十字阵列"><a href="#F-十字阵列" class="headerlink" title="F: 十字阵列"></a>F: 十字阵列</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231525407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">890</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">造成伤害的情况是：</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">4</span> <span class="number">9</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>补充的说明：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">890</span> = <span class="number">1</span>*(<span class="number">1</span>+<span class="number">1</span>)+<span class="number">3</span>*(<span class="number">1</span>+<span class="number">2</span>)+<span class="number">4</span>*(<span class="number">1</span>+<span class="number">3</span>)+...+<span class="number">5</span>*(<span class="number">5</span>+<span class="number">5</span>）,一共<span class="number">25</span>项累加得到<span class="number">890</span></span><br></pre></td></tr></table></figure><hr><p>统计每行每列的总伤害，然后在每次消除的时候删除行列和然后加上交叉点值，不要爆<code>long long</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num_c[<span class="number">2050</span>],num_r[<span class="number">2050</span>],h,n,m,ans=<span class="number">0</span>,ex[<span class="number">2050</span>][<span class="number">2050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        num_c[y]+=z;num_r[x]+=z;ex[x][y]+=z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tmp=(((num_c[j]+num_r[i]%mod)-ex[i][j])%mod)*(i+j%mod)%mod;</span><br><span class="line">            ans=(ans+tmp)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-括号序列"><a href="#G-括号序列" class="headerlink" title="G: 括号序列"></a>G: 括号序列</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231540794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">())(()</span><br><span class="line"><span class="number">9</span></span><br><span class="line">()(()()))</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>思路与<a href="https://blog.csdn.net/Liukairui/article/details/105356555">2020寒假训练营第四场B题</a>一样，遇到有问题的就修正然后ans加一即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt;s;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="keyword">char</span> ss[<span class="number">1000050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>,&amp;n,ss);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ss[i]==<span class="string">&#x27;(&#x27;</span>||ss[i]==<span class="string">&#x27;[&#x27;</span>||ss[i]==<span class="string">&#x27;&#123;&#x27;</span>)s.push(ss[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;ss[i]&lt;&lt;&quot; &quot;&lt;&lt;s.size()&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">if</span>(s.empty())&#123;ans++;&#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">char</span> tmp=s.top();</span><br><span class="line">                    <span class="keyword">if</span>((tmp==<span class="string">&#x27;&#123;&#x27;</span>&amp;&amp;ss[i]==<span class="string">&#x27;&#125;&#x27;</span>)||(tmp==<span class="string">&#x27;(&#x27;</span>&amp;&amp;ss[i]==<span class="string">&#x27;)&#x27;</span>)||(tmp==<span class="string">&#x27;[&#x27;</span>&amp;&amp;ss[i]==<span class="string">&#x27;]&#x27;</span>))s.pop();</span><br><span class="line">                    <span class="keyword">else</span> &#123;ans++;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=s.size();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-云"><a href="#H-云" class="headerlink" title="H: 云"></a>H: 云</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231554724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">-2</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">-2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>官方题解:<br>直接考虑问题较难，因为两种云都在运动。<br>但是我们可以考虑相对运动，将这个过程等效为左下角的云朝右上方移动。<br>在这个背景下我们容易发现：将所有的云投影成y=-x这条直线上的一条线段，则两朵云会相遇当且仅当他们的投影有交点。<br>这是一个简单的扫描线问题，将线段拆成端点后排序统计即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400050</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> loc, lr, typ;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(loc == b.loc &amp;&amp; lr == b.lr)</span><br><span class="line">            <span class="keyword">return</span> typ &lt; b.typ;</span><br><span class="line">        <span class="keyword">if</span>(loc == b.loc)</span><br><span class="line">            <span class="keyword">return</span> lr &gt; b.lr;</span><br><span class="line">        <span class="keyword">return</span> loc &lt; b.loc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;A[N];</span><br><span class="line"><span class="keyword">int</span> n, m, a, b, c, d, k;</span><br><span class="line">LL cnt[<span class="number">2</span>], ans;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m); n --;)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        A[++ k] = (node)&#123;d - c, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        A[++ k] = (node)&#123;b - a, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        A[++ k] = (node)&#123;d - c, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        A[++ k] = (node)&#123;b - a, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(A + <span class="number">1</span>, A + k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)&#123;</span><br><span class="line">        cnt[A[i].typ] += A[i].lr;</span><br><span class="line">        <span class="keyword">if</span>(A[i].lr == <span class="number">1</span>)</span><br><span class="line">            ans += cnt[A[i].typ ^ <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-导航系统"><a href="#I-导航系统" class="headerlink" title="I: 导航系统"></a>I: 导航系统</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231608378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><p>显然数据给出的原图是一棵树。<br>容易发现，如果将输入的N(N-1)个距离看做N(N-1)条无向边的话，那么如果数据合法，原树就是这张新图的最小生成树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">550</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> g[MAX_N][MAX_N],n;  <span class="comment">// 算法中的 G 矩阵</span></span><br><span class="line"><span class="keyword">int</span> rd[<span class="number">3</span>*MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (g[i][k] + g[k][j] != g[i][j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;g[i][j]);</span><br><span class="line">            <span class="keyword">if</span>(g[i][j]!=<span class="number">0</span>)rd[cnt++]=g[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!floyd())<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        sort(rd,rd+cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*(n<span class="number">-1</span>);i+=<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;rd[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-签到题"><a href="#J-签到题" class="headerlink" title="J: 签到题"></a>J: 签到题</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231623797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line"><span class="number">1.00</span> <span class="number">1.00</span> <span class="number">2.00</span></span><br></pre></td></tr></table></figure><p>直接列三元一次方程组<br>设三个圆半径为$r_1,r_2,r_3$<br>$$<br>\begin{cases}<br>r_1+r_2+r_2+r_3&gt;r_1+r_3 \<br>r_2+r_3+r_3+r_1&gt;r_1+r_2 \<br>r_3+r_1+r_1+r_2&gt;r_2+r_3<br>\end{cases}<br>$$<br>求解即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    ans[<span class="number">0</span>]=(a+b+c)*<span class="number">0.5</span>-a;</span><br><span class="line">    ans[<span class="number">1</span>]=(a+b+c)*<span class="number">0.5</span>-c;</span><br><span class="line">    ans[<span class="number">2</span>]=(a+b+c)*<span class="number">0.5</span>-b;</span><br><span class="line">    sort(ans,ans+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(a+b&lt;=c)&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;wtnl&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(ans[<span class="number">0</span>]&lt;=<span class="number">0</span>)&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)<span class="built_in">printf</span>(<span class="string">&quot;%.2f &quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原题来自2020牛客寒假算法基础集训营6，作以存档备查</summary>
    
    
    
    <category term="ACM" scheme="http://liukairui.cc/categories/ACM/"/>
    
    <category term="题解" scheme="http://liukairui.cc/categories/ACM/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://liukairui.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="ACM" scheme="http://liukairui.cc/tags/ACM/"/>
    
    <category term="牛客" scheme="http://liukairui.cc/tags/%E7%89%9B%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>2020牛客寒假算法基础集训营5题解</title>
    <link href="http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55%E9%A2%98%E8%A7%A3/"/>
    <id>http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55%E9%A2%98%E8%A7%A3/</id>
    <published>2020-10-30T16:00:12.000Z</published>
    <updated>2020-11-15T18:01:58.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-模板"><a href="#A-模板" class="headerlink" title="A: 模板"></a>A: 模板</h2><p><img data-src="https://img-blog.csdnimg.cn/2020040823073345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line">WXYZ</span><br><span class="line">WXY</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>只需找到两个字符串中不一样的字符替换，长度补齐即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">100050</span>],s2[<span class="number">100050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s%s&quot;</span>,&amp;a,&amp;b,s1,s2);</span><br><span class="line">    ans+=<span class="built_in">abs</span>(a-b);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)&#123;swap(s1,s2);swap(a,b);&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a;i++)<span class="keyword">if</span>(s1[i]!=s2[i])ans++;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-牛牛战队的比赛地"><a href="#B-牛牛战队的比赛地" class="headerlink" title="B: 牛牛战队的比赛地"></a>B: 牛牛战队的比赛地</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408230806767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当在(<span class="number">0</span>,<span class="number">0</span>)(<span class="number">0</span>,<span class="number">0</span>)比赛时，到三个训练基地的最大距离是<span class="number">22</span>。可以证明这是最小值。</span><br></pre></td></tr></table></figure><hr><p>我们设，从x坐标轴最左边向最右边移动的过程中最远点的距离为f(x),那么f(x)一定是一个先减后增的函数（仔细想一下，如果是先减后增后减后增那么一定第一次增加之前最远点就变了）所以可以直接使用三分<a href="https://blog.csdn.net/Liukairui/article/details/81295084">看这里</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(X,Y) (X&gt;Y?X:Y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(X,Y) (X&lt;Y?X:Y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp=<span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x[MAX_N],y[MAX_N],max_x=-INF,min_x=INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">double</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dis_max=-INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        dis_max=max(dis_max,y[i]*y[i]+(p-x[i])*(p-x[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis_max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">        max_x=max(max_x,x[i]);</span><br><span class="line">        min_x=min(min_x,x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> l=min_x,r=max_x,ml=l+(r-l)/<span class="number">3</span>,mr=l+(r-l)/<span class="number">3</span>*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(ml+esp&lt;mr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dis(ml)&lt;dis(mr))r=mr;</span><br><span class="line">        <span class="keyword">else</span> l=ml;</span><br><span class="line">        ml=l+(r-l)/<span class="number">3.0</span>;</span><br><span class="line">        mr=l+(r-l)/<span class="number">3.0</span>*<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,<span class="built_in">sqrt</span>(dis((ml+mr)/<span class="number">2</span>)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-C语言IDE"><a href="#C-C语言IDE" class="headerlink" title="C: C语言IDE"></a>C: C语言IDE</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408230828120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020040823084595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, plus(a, b)); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><hr><p>匹配括号，模拟即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> source;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="built_in">string</span> oldstr, <span class="built_in">string</span> newstr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span>::size_type pos = <span class="number">0</span>; pos != <span class="built_in">string</span>::npos; pos += newstr.length())</span><br><span class="line">        <span class="keyword">if</span> ((pos = s.find(oldstr, pos)) != <span class="built_in">string</span>::npos)</span><br><span class="line">            s.replace(pos, oldstr.length(), newstr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">functions</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> inClass, name, outputType;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; inputType;</span><br><span class="line">    functions(<span class="built_in">string</span> inClass = <span class="string">&quot;&quot;</span>, <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>, <span class="built_in">string</span> outputType = <span class="string">&quot;void&quot;</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; inputType = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(<span class="number">0</span>))</span><br><span class="line">        : inClass(inClass), name(name), outputType(outputType), inputType(inputType) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;functions&gt; funs;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    replaceAll(s, <span class="string">&quot;/*&quot;</span>, <span class="string">&quot; /* &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;*/&quot;</span>, <span class="string">&quot; */ &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;//&quot;</span>, <span class="string">&quot; // &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;(&quot;</span>, <span class="string">&quot; ( &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;)&quot;</span>, <span class="string">&quot; ) &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot; &#123; &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot; &#125; &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;=&quot;</span>, <span class="string">&quot; = &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot; \&quot; &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot; &#x27; &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;;&quot;</span>, <span class="string">&quot; ; &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;,&quot;</span>, <span class="string">&quot; , &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;+ = &quot;</span>, <span class="string">&quot;+=&quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;- = &quot;</span>, <span class="string">&quot;-=&quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;* = &quot;</span>, <span class="string">&quot;*=&quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;/ = &quot;</span>, <span class="string">&quot;/=&quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;^ = &quot;</span>, <span class="string">&quot;^=&quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;| = &quot;</span>, <span class="string">&quot;|=&quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;&amp; = &quot;</span>, <span class="string">&quot;&amp;=&quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot;:&quot;</span>, <span class="string">&quot; : &quot;</span>);</span><br><span class="line">    replaceAll(s, <span class="string">&quot; :  : &quot;</span>, <span class="string">&quot;::&quot;</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tokens;</span><br><span class="line">    <span class="built_in">string</span> now = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span> || s[i] == <span class="string">&#x27;\t&#x27;</span> || s[i] == <span class="string">&#x27;\r&#x27;</span> || s[i] == <span class="string">&#x27;\n&#x27;</span> || s[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (now != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (now == <span class="string">&quot;:&quot;</span> &amp;&amp; tokens.back() == <span class="string">&quot;)&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> tmpnow = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; s[j]; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s[j] == <span class="string">&#x27; &#x27;</span> || s[j] == <span class="string">&#x27;\t&#x27;</span> || s[j] == <span class="string">&#x27;\r&#x27;</span> || s[j] == <span class="string">&#x27;\n&#x27;</span> || s[j] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tmpnow == <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                now = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">                                i = j - <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            tmpnow = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            tmpnow += s[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (now == <span class="string">&quot;const&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    now = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (now == <span class="string">&quot;//&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; s[j]; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s[j] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            i = j - <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    now = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (now == <span class="string">&quot;/*&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">string</span> tmpnow = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; s[j]; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s[j] == <span class="string">&#x27; &#x27;</span> || s[j] == <span class="string">&#x27;\t&#x27;</span> || s[j] == <span class="string">&#x27;\r&#x27;</span> || s[j] == <span class="string">&#x27;\n&#x27;</span> || s[j] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tmpnow == <span class="string">&quot;/*&quot;</span>)</span><br><span class="line">                                num++;</span><br><span class="line">                            <span class="keyword">if</span> (tmpnow == <span class="string">&quot;*/&quot;</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                num--;</span><br><span class="line">                                <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    i = j - <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            tmpnow = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            tmpnow += s[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    now = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tokens.push_back(now);</span><br><span class="line">                now = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            now += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> nowNamespace = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="keyword">int</span>)tokens.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((tokens[i] == <span class="string">&quot;struct&quot;</span> || tokens[i] == <span class="string">&quot;class&quot;</span>) &amp;&amp; tokens[i + <span class="number">2</span>] == <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">            nowNamespace = tokens[i + <span class="number">1</span>];</span><br><span class="line">            i += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">functions <span class="title">tmp</span><span class="params">(nowNamespace)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;&#123;&quot;</span> &amp;&amp; tokens[i - <span class="number">1</span>] == <span class="string">&quot;)&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tokens[j] == <span class="string">&quot;)&quot;</span>)</span><br><span class="line">                    num++;</span><br><span class="line">                <span class="keyword">if</span> (tokens[j] == <span class="string">&quot;(&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num--;</span><br><span class="line">                    <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp.name = tokens[j - <span class="number">1</span>];</span><br><span class="line">                        tmp.outputType = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = j - <span class="number">2</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">                            <span class="keyword">if</span> (tokens[k] != <span class="string">&quot;&#125;&quot;</span> &amp;&amp; tokens[k] != <span class="string">&quot;&#125;&quot;</span> &amp;&amp; tokens[k] != <span class="string">&quot;;&quot;</span> &amp;&amp;</span><br><span class="line">                                tokens[k].back() != <span class="string">&#x27;:&#x27;</span> &amp;&amp; tokens[k] != <span class="string">&quot;inline&quot;</span> &amp;&amp;</span><br><span class="line">                                tokens[k] != <span class="string">&quot;static&quot;</span> &amp;&amp; tokens[k][<span class="number">0</span>] != <span class="string">&#x27;#&#x27;</span> &amp;&amp;</span><br><span class="line">                                tokens[k].back() != <span class="string">&#x27;\&quot;&#x27;</span> &amp;&amp; tokens[k].back() != <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">                                tmp.outputType = tmp.outputType == <span class="string">&quot;&quot;</span> ? tokens[k] : tokens[k] + <span class="string">&quot; &quot;</span> + tmp.outputType;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">int</span> last = i - <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">2</span>; k &gt;= j; k--)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (tokens[k] == <span class="string">&quot;(&quot;</span> || tokens[k] == <span class="string">&quot;,&quot;</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">string</span> tt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> t = k + <span class="number">1</span>; t &lt; last; t++)</span><br><span class="line">                                    tt = tt == <span class="string">&quot;&quot;</span> ? tokens[t] : tt + <span class="string">&quot; &quot;</span> + tokens[t];</span><br><span class="line">                                <span class="keyword">if</span> (tt != <span class="string">&quot;&quot;</span>)</span><br><span class="line">                                    tmp.inputType.push_back(tt);</span><br><span class="line">                                last = k - <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (tokens[k] == <span class="string">&quot;=&quot;</span> || tokens[k] == <span class="string">&quot;)&quot;</span>)</span><br><span class="line">                                last = k - <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        reverse(tmp.inputType.begin(), tmp.inputType.end());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            funs.push_back(tmp);</span><br><span class="line">            num = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; (<span class="keyword">int</span>)tokens.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tokens[j] == <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">                    num++;</span><br><span class="line">                <span class="keyword">if</span> (tokens[j] == <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num--;</span><br><span class="line">                    <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        i = j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nowNamespace != <span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;&#123;&quot;</span>)</span><br><span class="line">                cnt++;</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] == <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt--;</span><br><span class="line">                <span class="keyword">if</span> (!cnt)</span><br><span class="line">                    nowNamespace = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">        source += ch;</span><br><span class="line">    solve(source);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : funs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.outputType != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i.outputType &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (i.inClass != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i.inClass &lt;&lt; <span class="string">&quot;::&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i.name &lt;&lt; <span class="string">&quot;(&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)i.inputType.size(); j++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i.inputType[j] &lt;&lt; (j == (<span class="keyword">int</span>)i.inputType.size() - <span class="number">1</span> ? <span class="string">&quot;)&quot;</span> : <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">int</span>)i.inputType.size() == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-牛牛与牛妹的约会"><a href="#D-牛牛与牛妹的约会" class="headerlink" title="D: 牛牛与牛妹的约会"></a>D: 牛牛与牛妹的约会</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408230908352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.442249570</span></span><br><span class="line"><span class="number">1.000000000</span></span><br></pre></td></tr></table></figure><hr><p>只需对于每一次枚举判断闪现是否比直接走值得就可以了，然后判断最后一次闪现过头后回头走是否比不闪现更快即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">double</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span>)&#123;a=-a;b=-b;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b)<span class="built_in">printf</span>(<span class="string">&quot;%.9f\n&quot;</span>,b-a);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">double</span> ans=<span class="number">0</span>,lstp=a;</span><br><span class="line">            <span class="keyword">while</span>(a&gt;b&amp;&amp;(a-cbrt(a)&gt;<span class="number">1</span>))&#123;ans+=<span class="number">1</span>;lstp=a;a=cbrt(a);&#125;</span><br><span class="line">            ans=min(ans<span class="number">-1</span>+<span class="built_in">abs</span>(b-lstp),ans+<span class="built_in">abs</span>(b-a));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.9f\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Enjoy-the-game"><a href="#E-Enjoy-the-game" class="headerlink" title="E: Enjoy the game"></a>E: Enjoy the game</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408230944439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alice</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先手必须拿走一张牌，然后后手拿走了另一张牌，游戏结束。</span><br></pre></td></tr></table></figure><hr><p>找规律可以发现，当张数是$2^n$的时候输出Alice，否则输出Bob。<br>如果不是<strong>2^n</strong> ，先手直接拿等同于其二进制最低位的数量的张数，后手将无力还击~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">if</span>((t&amp;(t<span class="number">-1</span>))==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Alice&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-碎碎念"><a href="#F-碎碎念" class="headerlink" title="F: 碎碎念"></a>F: 碎碎念</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231002665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一组询问：可以是三个AC，或者一个RJ。</span><br><span class="line">第二组询问：可以是<span class="number">1</span>~<span class="number">4</span>个AC，一个AC和一个RJ（共<span class="number">2</span>种顺序），或者一个RJ。</span><br><span class="line">第三组询问：可以有<span class="number">1</span>~<span class="number">5</span>个AC，两个AC和一个RJ（共<span class="number">3</span>种顺序），一个AC和一个RJ（共<span class="number">2</span>种顺序），或者一个RJ。</span><br></pre></td></tr></table></figure><p><strong>备注</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AC RJ AC AC 和 AC AC AC RJ 虽然都是<span class="number">3</span>个AC，<span class="number">1</span>个RJ，但是因为提交顺序的不同，视为不同种类。</span><br></pre></td></tr></table></figure><hr><p>考虑动态规划，</p><ol><li><p>   dp[i][0]表示一共说了i句话，最后的一次评测记录是AC,那么如果我说了i句话，最后一次是AC，那么说之前一定是说了i-1句话，但是因为这一次是AC，所以上一次(i-1句话时)不论是AC还是RJ都可以转移到i，即：<br>dp[i][0]=dp[i-1][0]+dp[i-1][1]</p></li><li><p>   dp[i][1]表示一共说了i句话，最后的一次评测记录是RJ,那么如果我说了i句话，最后一次是RJ，那么说之前一定是说了i-k句话，因为这一次是RJ所以上一次是AC<br>dp[i][1]=dp[i-k][0]</p></li><li><p>   边界条件是dp[0][0]=1,dp[0][1]=0<br>我们可以读入所有的$l_i，r_i$然后预处理$0 \to max(r_i)$的dp值，并计算前缀和s，我们需要输出$l_i \to r_i$直接输出$s[r_i]-s[l_i-1]$即可</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100100</span>;++i)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=(dp[i<span class="number">-1</span>][<span class="number">0</span>]+dp[i<span class="number">-1</span>][<span class="number">1</span>])%mod;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=x)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>]=dp[i-x][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100100</span>;++i)&#123;</span><br><span class="line">        dp[i][<span class="number">2</span>]=(dp[i][<span class="number">0</span>]+dp[i][<span class="number">1</span>])%mod;</span><br><span class="line">        dp[i][<span class="number">2</span>]=(dp[i][<span class="number">2</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(dp[r][<span class="number">2</span>]-dp[l<span class="number">-1</span>][<span class="number">2</span>]+mod)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-街机争霸"><a href="#G-街机争霸" class="headerlink" title="G: 街机争霸"></a>G: 街机争霸</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231031893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line">&amp;&amp;A</span><br><span class="line">###</span><br><span class="line">&amp;&amp;L</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> RIGHT</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果用*代表僵尸的位置，则起始时状态为</span><br><span class="line">&amp;&amp;A</span><br><span class="line">*##</span><br><span class="line">&amp;&amp;L</span><br><span class="line">一个单位时间后，牛能上走，僵尸向右走，两者并没有碰上</span><br><span class="line">&amp;&amp;A</span><br><span class="line">#*L</span><br><span class="line">&amp;&amp;#</span><br><span class="line">再一个单位时间后，牛能向上走，追上牛牛，取得胜利。</span><br><span class="line">&amp;&amp;L</span><br><span class="line">##*</span><br><span class="line">&amp;&amp;#</span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">L#&amp;A</span><br><span class="line">##&amp;#</span><br><span class="line">#&amp;##</span><br><span class="line">####</span><br><span class="line"><span class="number">3</span> <span class="number">3</span> DOWN</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oh no</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">初始状态</span><br><span class="line">L#&amp;A</span><br><span class="line">##&amp;#</span><br><span class="line">#&amp;*#</span><br><span class="line">####</span><br><span class="line">一单位时间后</span><br><span class="line">##&amp;A</span><br><span class="line">L#&amp;#</span><br><span class="line">#&amp;##</span><br><span class="line">##*#</span><br><span class="line">二单位时间后</span><br><span class="line">##&amp;A</span><br><span class="line">##&amp;#</span><br><span class="line">L&amp;*#</span><br><span class="line">####</span><br><span class="line">三单位时间后</span><br><span class="line">##&amp;A</span><br><span class="line">##&amp;#</span><br><span class="line">#&amp;##</span><br><span class="line">L#*#</span><br><span class="line">四单位时间后</span><br><span class="line">##&amp;A</span><br><span class="line">##&amp;#</span><br><span class="line">#&amp;*#</span><br><span class="line">#L##</span><br><span class="line">牛能如果再向左走的话就会跟僵尸碰个正着，而且不论牛能怎么往回走，在（<span class="number">4</span>,<span class="number">3</span>）总能遇见僵尸，所以他失败了。</span><br></pre></td></tr></table></figure><p>迷宫题，似乎用图论算法处理不了，于是想到bfs，但是最毒瘤的是他可以走到他以前走过的空格…那BFS是永远都走不完的!，但是我们发现这个题有一个特殊性质,<strong>僵尸的运动长度是固定的</strong>.<br>所以每隔<strong>2k-2个单位长度，僵尸的位置会重复一次</strong>，所以对于一个点，这个点在时间t的僵尸状态与t+2k-2的时候在这个点状态是重复的！！所以往回走的时候如果这个点在t-n(2k-2)访问过就算重复，所以不访问，否则访问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">10</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;        <span class="comment">//上右下左</span></span><br><span class="line"><span class="keyword">int</span> n,m,p,k,G[<span class="number">550</span>][<span class="number">550</span>],JS[<span class="number">100</span>][<span class="number">3</span>],sx,sy,ex,ey;</span><br><span class="line"><span class="keyword">bool</span> vst[<span class="number">550</span>][<span class="number">550</span>][<span class="number">120</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tt=t%(<span class="number">2</span>*k<span class="number">-2</span>);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;&gt;&gt;&gt;&gt;&gt; Try &quot;&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;t&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=n||y&lt;<span class="number">0</span>||y&gt;=m||vst[x][y][tt]||G[x][y]==<span class="string">&#x27;&amp;&#x27;</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;&gt;&gt;&gt;&gt;&gt; Pass 1 &quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos_jsx=JS[i][<span class="number">0</span>]+dx[JS[i][<span class="number">2</span>]]*(tt&gt;k<span class="number">-1</span>?<span class="number">2</span>*k<span class="number">-2</span>-tt:tt);</span><br><span class="line">        <span class="keyword">int</span> pos_jsy=JS[i][<span class="number">1</span>]+dy[JS[i][<span class="number">2</span>]]*(tt&gt;k<span class="number">-1</span>?<span class="number">2</span>*k<span class="number">-2</span>-tt:tt);</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;@ JS &quot;&lt;&lt;i&lt;&lt;&quot; jsx= &quot;&lt;&lt;pos_jsx&lt;&lt;&quot; jsy= &quot;&lt;&lt;pos_jsy&lt;&lt;&quot; xx= &quot;&lt;&lt;(tt&gt;k-1?2*k-2-tt:tt)&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(x==pos_jsx&amp;&amp;y==pos_jsy)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;&gt;&gt;&gt;&gt;&gt; Pass 2 &quot;&lt;&lt;endl;</span></span><br><span class="line">    vst[x][y][tt]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> sx,<span class="keyword">int</span> sy)</span></span>&#123;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(sx,<span class="built_in">make_pair</span>(sy,<span class="number">0</span>)));</span><br><span class="line">    vst[sx][sy][<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> nx=q.front().first,ny=q.front().second.first,time=q.front().second.second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;&gt;&gt;&gt; &quot;&lt;&lt;nx&lt;&lt;&quot; &quot;&lt;&lt;ny&lt;&lt;&quot; &quot;&lt;&lt;time&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tx=nx+dx[i],ty=ny+dy[i];</span><br><span class="line">            <span class="keyword">if</span>(tx==ex&amp;&amp;ty==ey)<span class="keyword">return</span> time+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(ok(tx,ty,time+<span class="number">1</span>))</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(tx,<span class="built_in">make_pair</span>(ty,time+<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;p,&amp;k);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;G[i][j]);</span><br><span class="line">            <span class="keyword">if</span>(G[i][j]==<span class="string">&#x27;A&#x27;</span>)&#123;ex=i;ey=j;&#125;</span><br><span class="line">            <span class="keyword">if</span>(G[i][j]==<span class="string">&#x27;L&#x27;</span>)&#123;sx=i;sy=j;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=0;j&lt;m;j++)</span></span><br><span class="line">    <span class="comment">//         cout&lt;&lt;G[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> d[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>,&amp;JS[i][<span class="number">0</span>],&amp;JS[i][<span class="number">1</span>],d);</span><br><span class="line">        JS[i][<span class="number">0</span>]--;JS[i][<span class="number">1</span>]--;</span><br><span class="line">        <span class="keyword">if</span>(d[<span class="number">0</span>]==<span class="string">&#x27;U&#x27;</span>)JS[i][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d[<span class="number">0</span>]==<span class="string">&#x27;R&#x27;</span>)JS[i][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>)JS[i][<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> JS[i][<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout&lt;&lt;JS[0][2]&lt;&lt;&quot;***********\n&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans=bfs(sx,sy);</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Oh no&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Hash"><a href="#H-Hash" class="headerlink" title="H: Hash"></a>H: Hash</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231052786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdef <span class="number">11</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdeq</span><br></pre></td></tr></table></figure><hr><p>实际上，可以看到这就是一个26进制数，但是，对于所有的排列 ，可以排满所有的数字吗？似乎不可以，于是<br>最开始的思路是dfs，但是T掉了<br>但是实际上，他是可以完全覆盖所有的数字，所以直接写一个函数26-&gt;10进制，然后+mod，转26进制</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mod,n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,s,&amp;mod)==<span class="number">2</span>)&#123;</span><br><span class="line">        n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)n=n*<span class="number">26</span>+s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        n+=mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            s[i]=<span class="string">&#x27;a&#x27;</span>+n%<span class="number">26</span>;</span><br><span class="line">            n/=<span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n)<span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-I题是个签到题"><a href="#I-I题是个签到题" class="headerlink" title="I: I题是个签到题"></a>I: I题是个签到题</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231105101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> <span class="number">100</span></span><br><span class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><hr><p>签到题，直接判定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,num_i,a[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);&#125;</span><br><span class="line">    num_i=a[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">if</span>(num_i&gt;=<span class="number">0.8</span>*m)&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    <span class="keyword">if</span>(num_i&gt;=a[<span class="number">3</span>])&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-牛牛战队的秀场"><a href="#J-牛牛战队的秀场" class="headerlink" title="J: 牛牛战队的秀场"></a>J: 牛牛战队的秀场</h2><p><img data-src="https://img-blog.csdnimg.cn/20200408231118654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.414214</span></span><br></pre></td></tr></table></figure><hr><p>用弧度的定义$\alpha=\frac{l}{r}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r,n,i,j;</span><br><span class="line"><span class="keyword">double</span> pi=<span class="built_in">atan</span>(<span class="number">1</span>)*<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;r,&amp;i,&amp;j);</span><br><span class="line">    <span class="keyword">double</span> l=<span class="number">2</span>*<span class="built_in">sin</span>(pi/n)*r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6f&quot;</span>,l*min(<span class="built_in">abs</span>(i-j),n-<span class="built_in">abs</span>(i-j)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原题来自2020牛客寒假算法基础集训营5，作以存档备查</summary>
    
    
    
    <category term="ACM" scheme="http://liukairui.cc/categories/ACM/"/>
    
    <category term="题解" scheme="http://liukairui.cc/categories/ACM/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://liukairui.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="ACM" scheme="http://liukairui.cc/tags/ACM/"/>
    
    <category term="牛客" scheme="http://liukairui.cc/tags/%E7%89%9B%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>2020牛客寒假算法基础集训营4题解</title>
    <link href="http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54%E9%A2%98%E8%A7%A3/"/>
    <id>http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54%E9%A2%98%E8%A7%A3/</id>
    <published>2020-10-30T16:00:11.000Z</published>
    <updated>2020-11-15T18:01:32.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A：欧几里得"><a href="#A：欧几里得" class="headerlink" title="A：欧几里得"></a>A：欧几里得</h2><p><img data-src="https://img-blog.csdnimg.cn/2020040708251359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcd(<span class="number">1</span>,<span class="number">0</span>) 由于 b=<span class="number">0</span>，不会递归，即是递归<span class="number">0</span>次。</span><br></pre></td></tr></table></figure><hr><p>根据样例我们可以尝试写出n=2,3,4…的结果，发现他是斐波那契数列，写一个程序输出斐波那契前100位(long long)，打表即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[<span class="number">100</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">144</span>,<span class="number">233</span>,<span class="number">377</span>,<span class="number">610</span>,<span class="number">987</span>,<span class="number">1597</span>,<span class="number">2584</span>,<span class="number">4181</span>,<span class="number">6765</span>,<span class="number">10946</span>,<span class="number">17711</span>,<span class="number">28657</span>,<span class="number">46368</span>,<span class="number">75025</span>,<span class="number">121393</span>,<span class="number">196418</span>,<span class="number">317811</span>,<span class="number">514229</span>,<span class="number">832040</span>,<span class="number">1346269</span>,<span class="number">2178309</span>,<span class="number">3524578</span>,<span class="number">5702887</span>,<span class="number">9227465</span>,<span class="number">14930352</span>,<span class="number">24157817</span>,<span class="number">39088169</span>,<span class="number">63245986</span>,<span class="number">102334155</span>,<span class="number">165580141</span>,<span class="number">267914296</span>,<span class="number">433494437</span>,<span class="number">701408733</span>,<span class="number">1134903170</span>,<span class="number">1836311903</span>,<span class="number">2971215073</span>,<span class="number">4807526976</span>,<span class="number">7778742049</span>,<span class="number">12586269025</span>,<span class="number">20365011074</span>,<span class="number">32951280099</span>,<span class="number">53316291173</span>,<span class="number">86267571272</span>,<span class="number">139583862445</span>,<span class="number">225851433717</span>,<span class="number">365435296162</span>,<span class="number">591286729879</span>,<span class="number">956722026041</span>,<span class="number">1548008755920</span>,<span class="number">2504730781961</span>,<span class="number">4052739537881</span>,<span class="number">6557470319842</span>,<span class="number">10610209857723</span>,<span class="number">17167680177565</span>,<span class="number">27777890035288</span>,<span class="number">44945570212853</span>,<span class="number">72723460248141</span>,<span class="number">117669030460994</span>,<span class="number">190392490709135</span>,<span class="number">308061521170129</span>,<span class="number">498454011879264</span>,<span class="number">806515533049393</span>,<span class="number">1304969544928657</span>,<span class="number">2111485077978050</span>,<span class="number">3416454622906707</span>,<span class="number">5527939700884757</span>,<span class="number">8944394323791464</span>,<span class="number">14472334024676221</span>,<span class="number">23416728348467685</span>,<span class="number">37889062373143906</span>,<span class="number">61305790721611591</span>,<span class="number">99194853094755497</span>,<span class="number">160500643816367088</span>,<span class="number">259695496911122585</span>,<span class="number">420196140727489673</span>,<span class="number">679891637638612258</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B：括号序列"><a href="#B：括号序列" class="headerlink" title="B：括号序列"></a>B：括号序列</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407082853218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()&#123;&#125;[]</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;[]&#125;)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([)]</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><hr><p>只需要模拟一个栈即可，遇到左括号时压栈，遇到右括号看可否与栈顶元素相匹配，不匹配直接输出错误，匹配则消去栈顶元素。在输入结束后还要检查栈是否为空，为空证明有左括号未匹配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt;s;</span><br><span class="line"><span class="keyword">char</span> t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;t)==<span class="number">1</span>&amp;&amp;t!=<span class="string">&#x27;\n&#x27;</span>&amp;&amp;t!=<span class="string">&#x27;\r&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(t==<span class="string">&#x27;&#123;&#x27;</span>||t==<span class="string">&#x27;&#125;&#x27;</span>||t==<span class="string">&#x27;(&#x27;</span>||t==<span class="string">&#x27;)&#x27;</span>||t==<span class="string">&#x27;[&#x27;</span>||t==<span class="string">&#x27;]&#x27;</span>))<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="string">&#x27;&#123;&#x27;</span>||t==<span class="string">&#x27;[&#x27;</span>||t==<span class="string">&#x27;(&#x27;</span>)s.push(t);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.empty())&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">char</span> p=s.top();</span><br><span class="line">            <span class="keyword">if</span>((t==<span class="string">&#x27;&#125;&#x27;</span>&amp;&amp;p==<span class="string">&#x27;&#123;&#x27;</span>)||(t==<span class="string">&#x27;]&#x27;</span>&amp;&amp;p==<span class="string">&#x27;[&#x27;</span>)||(t==<span class="string">&#x27;)&#x27;</span>&amp;&amp;p==<span class="string">&#x27;(&#x27;</span>))s.pop();</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.empty())<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C：子段乘积"><a href="#C：子段乘积" class="headerlink" title="C：子段乘积"></a>C：子段乘积</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407083650967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">2</span>*<span class="number">3</span>\mod <span class="number">998244353</span>=<span class="number">61</span>∗<span class="number">2</span>∗<span class="number">3</span>mod998244353=<span class="number">6</span></span><br></pre></td></tr></table></figure><hr><p>可以使用双指针，但是需要求逆元，所以我直接用线段树求解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC (LC|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">200050</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ss[<span class="number">4</span>*MAX_N];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    ss[p]=ss[LC]*ss[RC]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        ss[p]+=v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=M)modify(LC,x,v,l,M);</span><br><span class="line">    <span class="keyword">else</span> modify(RC,x,v,M+<span class="number">1</span>,r);</span><br><span class="line">    up(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">        <span class="keyword">return</span> ss[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=M)res=res*query(LC,x,y,l,M)%mod;</span><br><span class="line">    <span class="keyword">if</span>(M&lt;y)res=res*query(RC,x,y,M+<span class="number">1</span>,r)%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">        modify(<span class="number">1</span>,i,t,<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+k<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=query(<span class="number">1</span>,i,i+k<span class="number">-1</span>,<span class="number">1</span>,n);</span><br><span class="line">        ans=ans&lt;t?t:ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D：子段异或"><a href="#D：子段异或" class="headerlink" title="D：子段异或"></a>D：子段异或</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407083945363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子段 [<span class="number">1</span>,<span class="number">3</span>] 和子段 [<span class="number">3</span>,<span class="number">5</span>] 是合法子段。</span><br></pre></td></tr></table></figure><hr><p>异或运算有自反性<br>A ^B ^B = A<br>运用这个性质我们可以得到<br>l<del>r的异或和为：前r的异或和 ^ 前l-1的异或和<br>所以l</del>r异或和为0当且仅当 l-1异或和==r-1异或和，所以我们<br>先计算一个异或和的前缀和<br>然后要找相同的数字，比较好的方法是<br>对于前缀数组排序，对于每一个数在左右统计相同的数字个数即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s[<span class="number">200050</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;s[i]);</span><br><span class="line">        s[i]=s[i]^s[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(s,s+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;=n;i++)cout&lt;&lt;s[i]&lt;&lt;&quot; * &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;=n)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> r=upper_bound(s+l,s+n+<span class="number">1</span>,s[l])-s;</span><br><span class="line">        ans+=(r-l)*(r-l<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;s[l]&lt;&lt;&#x27; &#x27;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;(r-l)*(r-l-1)/2&lt;&lt;endl;</span></span><br><span class="line">        l=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E：最小表达式"><a href="#E：最小表达式" class="headerlink" title="E：最小表达式"></a>E：最小表达式</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407084749602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>+<span class="number">11</span>=<span class="number">22</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9998765432111</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1112345678999</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>+<span class="number">35</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">38</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span>+<span class="number">13</span> = <span class="number">38</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23984692</span>+<span class="number">238752</span>+<span class="number">2</span>+<span class="number">34</span>+</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5461</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">嗯，这个答案是可以得到的</span><br></pre></td></tr></table></figure><hr><p>首先找到这个字符串中<code>+</code>的数目，这个数目+1就是需要分出的数字<br>然后我们考虑位数问题：</p><ol><li>数字有20位，分成5组，那么每个数字均为4位要优于某个大于四位+某个小于四位</li><li>数字有21位，分成5组，那么就是一个数字为五位，另外四个均为四位</li></ol><p>最高位越小结果越小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len,num[<span class="number">500050</span>],ans[<span class="number">500050</span>],cnt_up,cnt_n;</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">500050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,tmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;tmp[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i]&gt;=<span class="string">&#x27;1&#x27;</span>&amp;&amp;tmp[i]&lt;=<span class="string">&#x27;9&#x27;</span>)num[cnt_n++]=tmp[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> cnt_up++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len_normal=cnt_n/(cnt_up+<span class="number">1</span>),len_special=cnt_n%(cnt_up+<span class="number">1</span>);</span><br><span class="line">    sort(num,num+cnt_n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len_special;i++)ans[<span class="number">0</span>]+=num[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur=len_special;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len_normal;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=cnt_up;j++)&#123;</span><br><span class="line">            ans[i]+=num[cur++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;**&quot;&lt;&lt;ans[i]&lt;&lt;&quot;**&quot;&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len_normal;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]&gt;<span class="number">9</span>)ans[i<span class="number">-1</span>]+=ans[i]/<span class="number">10</span>,ans[i]=ans[i]%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans[<span class="number">0</span>]!=<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;ans[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len_normal;i++)<span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F：树上博弈"><a href="#F：树上博弈" class="headerlink" title="F：树上博弈"></a>F：树上博弈</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407085603355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当且仅当牛牛在<span class="number">1</span>号点，牛妹在<span class="number">3</span>号点，或者牛牛在<span class="number">3</span>号点，牛妹在<span class="number">1</span>号点时，牛牛才获胜。</span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于无论如何牛牛都无路可走，因此必然牛妹获胜。</span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">4</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">13</span> <span class="number">13</span> <span class="number">13</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">428</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QwQ</span><br></pre></td></tr></table></figure><hr><p>我们设两人距离为d<br>那么一个人走一步，另一个人走一步，最后他们的距离一定为d或d-2或d+2，所以d奇偶性是不变的，经过无数字运动，一定会出现一种情况，牛妹进入了一个子树，但是唯一的出口被牛牛堵了，也就是牛妹进入了死胡同<br>牛妹必然会最终移动到叶子上。同样，如果最初D是奇数，则牛妹获胜。<br>因此，答案取决于距离的奇偶性：如果是偶数，则牛牛获胜，否则牛妹获胜。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">50</span>;</span><br><span class="line">ll p[MAX_N],eid=<span class="number">0</span>,deep_j,deep_o,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,next;</span><br><span class="line">&#125;E[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    eid=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">-1</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    E[eid].next=p[u];</span><br><span class="line">    E[eid].v=v;</span><br><span class="line">    p[u]=eid++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(deep%<span class="number">2</span>)deep_j++;</span><br><span class="line">    <span class="keyword">else</span> deep_o++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p[node];i+<span class="number">1</span>;i=E[i].next)&#123;</span><br><span class="line">        dfs(E[i].v,deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">        insert(t,i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;deep_j*(deep_j<span class="number">-1</span>)+deep_o*(deep_o<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G：音乐鉴赏"><a href="#G：音乐鉴赏" class="headerlink" title="G：音乐鉴赏"></a>G：音乐鉴赏</h2><p><img data-src="https://img-blog.csdnimg.cn/2020040709405610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">99</span> <span class="number">99</span> <span class="number">99</span> <span class="number">99</span> <span class="number">99</span> <span class="number">99</span> <span class="number">99</span> <span class="number">99</span> <span class="number">99</span> <span class="number">99</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50.00</span>%</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要随机占比<span class="number">50</span>%。</span><br></pre></td></tr></table></figure><hr><p>首先解释一下官方题解的意思<br><img data-src="https://img-blog.csdnimg.cn/20200407094234884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><p>Q: 这里的-y不应该是(y-90)吗？<br>A: 确实是，但是可以发现，因为$y \in [0,90]$所以y-90 均匀的分布在[-90,0]这与-y的分布式相同的，所以写了-y简便运算</p></li><li><p>   Q: E是怎么推出来的?<br>A: 在上一个式子中，带入y=90，得到$\frac{(sorce-90)<em>(1-x)}{90x} \geq 1$，如果一个一个分数满足题意，他的$\frac{(sorce-90)<em>1-x}{90x} \geq 1$，从</em></em>数学期望*<em>上说，10%的人优秀，相当于0.1</em>n的人均下来要恰好=1<br>这就有了E式</p></li></ol><p>实际上不必那么麻烦，我们可以按自己思路写下去<br>$$<br>sorce*(1-x)+xy \geq 90 \<br>\frac{sorce*(1-x)-90} {-x} \leq y\<br>$$<br>小于等于90的概率是<br>$$<br>\frac{sorce*(1-x)-90} {-90x}\<br>$$<br>大于等于90的概率是<br>$$<br>1-\frac{sorce*(1-x)-90} {-90x}\<br>\frac{90x-90+sorce*(1-x)} {90x}\<br>$$<br>于是<br>$$<br>\sum_{i=1}^{n}\frac{90x-90+sorce*(1-x)} {90x} = 0.1n<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,sumn=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        sumn+=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> s2=(sumn<span class="number">-90</span>*n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f%%&quot;</span>,(s2/(<span class="number">9</span>*n+s2)*<span class="number">100</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-坐火车"><a href="#H-坐火车" class="headerlink" title="H: 坐火车"></a>H: 坐火车</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407101404442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p>考虑构建一个数组记录某个颜色在<strong>当前状态(下标)</strong> 下，位置左边有多少个该颜色火车(sum_l[color])，右边有多少个火车(sum_r[color])，构建的这个数组随着当前数组下标位置的改变而改变<br>在构建一个前缀和，记录某个颜色在<strong>当前状态(下标)</strong> 左乘右的值(也就是贡献值)，这样，对于每一次查询我们只需要做一个差就可以了，我们用树状数组实现它<br>对于一次状态(数组下标)的移动(<strong>以从红色移到蓝色为例</strong>)，发生的变化是</p><ol><li>红色作左边的个数+1(sum_l[红色]++)</li><li>这个红色可以和右边的红色匹配，所以红色贡献值+=sum_r[红色]</li><li>蓝色作右边的个数-1(sum_r[蓝色]–)</li><li>这个蓝色失去了和左边的蓝色的匹配，所以蓝色贡献值-=sum_l[蓝色]<br>注意的是第一次是没有12步骤的，因为刚刚移动到第一节火车</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">5e5</span>+<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum_l[MAX_N],sum_r[MAX_N],s[MAX_N],n,col[MAX_N],col_l[MAX_N],col_r[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=MAX_N;i+=i&amp;(-i))s[i]+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;(-i))res+=s[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;col[i],&amp;col_l[i],&amp;col_r[i]);</span><br><span class="line">        sum_r[col[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        sum_r[col[i]]--;</span><br><span class="line">        add(col[i],-sum_l[col[i]]);</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,query(col_r[i])-query(col_l[i]<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum_l[col[i<span class="number">-1</span>]]++;</span><br><span class="line">        add(col[i<span class="number">-1</span>],sum_r[col[i<span class="number">-1</span>]]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,query(col_r[i])-query(col_l[i]<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-匹配星星"><a href="#I-匹配星星" class="headerlink" title="I: 匹配星星"></a>I: 匹配星星</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407102724900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p>我们构建一个可重复集合存放那些待配匹配的星星，他们的z一定是0，这样读取到z=1的星星的时候我们就拿z=1的星星尝试和他们匹配<br>在处理星星的时候我们遵循以下顺序<br>x小的优先读取，这样保证后读的星星x一定大，这样我准备去匹配的z=1星星一定比在待匹配集合中的星星x大，z大<br>匹配时我们的xz都比集合中的星星大，我们只要找y比匹配星星小的即可，那选哪个呢？选比匹配星星的y小的里面y最大的，这样，不仅满足了这次匹配，也为下次匹配创建了最大的机会<br>这么找这个星星呢？<br>可以使用upper_bound.<br>upper_bound在一般情况下是找严格大于一个数的第一个数据<br>所以我们可以重载&lt;从而实现找到严格小于这个数据的第一个数据，<a href="https://blog.csdn.net/Liukairui/article/details/104602907">看这里</a><br>可重复集合使用multiset即可实现，multiset<strong>自带</strong>一个upper_bounder的方法，<strong>用这个不需要指定查找范围</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">star</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> star t)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y&gt;t.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;a[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(star a,star b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x==b.x?a.z&gt;b.z:a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;star&gt;s;     <span class="comment">//s</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a[i].x,&amp;a[i].y,&amp;a[i].z);</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].z==<span class="number">0</span>)s.insert(a[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">auto</span> it=s.upper_bound(a[i]);</span><br><span class="line">            <span class="keyword">if</span>(it!=s.end())&#123;</span><br><span class="line">                s.erase(it);</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-二维跑步"><a href="#J-二维跑步" class="headerlink" title="J: 二维跑步"></a>J: 二维跑步</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407103758117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5616</span></span><br></pre></td></tr></table></figure><hr><p><img data-src="https://img-blog.csdnimg.cn/20200407103947641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sq</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*x*x%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?a-b+mod:a-b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a+b&gt;=mod?a+b-mod:a+b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*a*b%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">return</span> b&amp;<span class="number">1</span>?mul(sq(<span class="built_in">pow</span>(a,b/<span class="number">2</span>)),a):sq(<span class="built_in">pow</span>(a,b/<span class="number">2</span>));&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3000010</span>;</span><br><span class="line"><span class="keyword">int</span> G[N],fac[N],invfac[N],pow2[N],pow3[N],n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> mul(fac[n],mul(invfac[m],invfac[n-m]));&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&gt;n || m&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> mul(mul(fac[n],mul(invfac[m],invfac[n-m])),mul(pow2[n-m],pow3[m]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = pow2[<span class="number">0</span>] = pow3[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        fac[i] = <span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        pow2[i] = <span class="number">1l</span>l*pow2[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">        pow3[i] = <span class="number">1l</span>l*pow3[i<span class="number">-1</span>]*<span class="number">3</span>%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    invfac[N<span class="number">-1</span>] = <span class="built_in">pow</span>(fac[N<span class="number">-1</span>],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--) invfac[i] = <span class="number">1l</span>l*invfac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    G[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> upb = <span class="number">0</span>,lwb = <span class="number">0</span>,ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> move=n;move&gt;=<span class="number">0</span>;move--)&#123;</span><br><span class="line">        <span class="keyword">int</span> nlwb = max((-m+n-move+<span class="number">1</span>)/<span class="number">2</span>,<span class="number">0</span>),nupb = min((m+n-move)/<span class="number">2</span>,n-move);</span><br><span class="line">        <span class="keyword">while</span>(lwb&lt;nlwb)ans = sub(ans,F(n-move,lwb)),lwb++;</span><br><span class="line">        <span class="keyword">while</span>(lwb&gt;nlwb)lwb--,ans = add(ans,F(n-move,lwb));</span><br><span class="line">        <span class="keyword">while</span>(upb&lt;nupb)upb++,ans = add(ans,F(n-move,upb));</span><br><span class="line">        <span class="keyword">while</span>(upb&gt;nupb)ans = sub(ans,F(n-move,upb)),upb--;</span><br><span class="line">        G[move] = ans;</span><br><span class="line">        ans = mul(ans,<span class="number">5</span>);</span><br><span class="line">        ans = add(ans,mul(<span class="number">3</span>,F(n-move,lwb<span class="number">-1</span>)));</span><br><span class="line">        ans = add(ans,mul(<span class="number">2</span>,F(n-move,upb+<span class="number">1</span>)));</span><br><span class="line">        upb+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--) ans = add(ans,mul(G[i],C(n,i)));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原题来自2020牛客寒假算法基础集训营4，作以存档备查</summary>
    
    
    
    <category term="ACM" scheme="http://liukairui.cc/categories/ACM/"/>
    
    <category term="题解" scheme="http://liukairui.cc/categories/ACM/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://liukairui.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="ACM" scheme="http://liukairui.cc/tags/ACM/"/>
    
    <category term="牛客" scheme="http://liukairui.cc/tags/%E7%89%9B%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>动态规划-数位DP</title>
    <link href="http://liukairui.cc/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%95%B0%E4%BD%8DDP/"/>
    <id>http://liukairui.cc/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%95%B0%E4%BD%8DDP/</id>
    <published>2020-10-30T16:00:10.000Z</published>
    <updated>2020-11-15T18:38:42.505Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://blog.csdn.net/wust_zzwh/article/details/52100392">https://blog.csdn.net/wust_zzwh/article/details/52100392</a></p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><p>数位dp是一种计数用的dp，一般就是要统计一个区间[le,ri]内满足一些条件数的个数。所谓数位dp，字面意思就是在数位上进行dp咯。数位还算是比较好听的名字，数位的含义：一个数有个位、十位、百位、千位……数的每一位就是数位啦！</p><p>之所以要引入数位的概念完全就是为了dp。数位dp的实质就是换一种暴力枚举的方式，使得新的枚举方式满足dp的性质，然后记忆化就可以了。</p><p>两种不同的枚举：对于一个求区间[le,ri]满足条件数的个数，最简单的暴力如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=le;i&lt;=ri;i++)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(right(i)) ans++;</span><br></pre></td></tr></table></figure><p>然而这样枚举不方便记忆化，或者说根本无状态可言。</p><p>新的枚举：控制上界枚举，从最高位开始往下枚举，例如：ri=213，那么我们从百位开始枚举：百位可能的情况有0,1,2(觉得这里枚举0有问题的继续看)</p><p>然后每一位枚举都不能让枚举的这个数超过上界213（下界就是0或者1，这个次要），当百位枚举了1，那么十位枚举就是从0到9，因为百位1已经比上界2小了，后面数位枚举什么都不可能超过上界。所以问题就在于：当高位枚举刚好达到上界是，那么紧接着的一位枚举就有上界限制了。具体的这里如果百位枚举了2，那么十位的枚举情况就是0到1，如果前两位枚举了21，最后一位之是0到3(这一点正好对于代码模板里的一个变量limit 专门用来判断枚举范围)。最后一个问题：最高位枚举0：百位枚举0，相当于此时我枚举的这个数最多是两位数，如果十位继续枚举0，那么我枚举的就是以为数咯，因为我们要枚举的是小于等于ri的所以数，当然不能少了位数比ri小的咯！(这样枚举是为了无遗漏的枚举，不过可能会带来一个问题，就是前导零的问题，模板里用lead变量表示，不过这个不是每个题目都是会有影响的，可能前导零不会影响我们计数，具体要看题目)</p><p>由于这种新的枚举只控制了上界所以我们的Main函数总是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> le,ri;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,solve(ri)-solve(le<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w_w 是吧！统计[<span class="number">1</span>,ri]数量和[<span class="number">1</span>,le<span class="number">-1</span>]，然后相减就是区间[le,ri]的数量了，这里我写的下界是<span class="number">1</span>，其实<span class="number">0</span>也行，反正相减后就没了，注意题目中le的范围都是大于等于<span class="number">1</span>的(不然le=<span class="number">0</span>,再减一就G_G了)</span><br><span class="line"></span><br><span class="line">在讲例题之前先讲个基本的动态模板(先看后面的例题也行)：dp思想，枚举到当前位置pos，状态为state(这个就是根据题目来的，可能很多，毕竟dp千变万化)的数量(既然是计数,dp值显然是保存满足条件数的个数)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line">ll dp[<span class="number">20</span>][state];<span class="comment">//不同题目状态不同</span></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="comment">/*state变量*/</span>,<span class="keyword">bool</span> lead<span class="comment">/*前导零*/</span>,<span class="keyword">bool</span> limit<span class="comment">/*数位上界变量*/</span>)</span><span class="comment">//不是每个题都要判断前导零</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归边界，既然是按位枚举，最低位是0，那么pos==-1说明这个数我枚举完了</span></span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">/*这里一般返回1，表示你枚举的这个数是合法的，那么这里就需要你在枚举时必须每一位都要满足题目条件，也就是说当前枚举到pos位，一定要保证前面已经枚举的数位是合法的。不过具体题目不同或者写法不同的话不一定要返回1 */</span></span><br><span class="line">    <span class="comment">//第二个就是记忆化(在此前可能不同题目还能有一些剪枝)</span></span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; !lead &amp;&amp; dp[pos][state]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][state];</span><br><span class="line">    <span class="comment">/*常规写法都是在没有限制的条件记忆化，这里与下面记录状态是对应，具体为什么是有条件的记忆化后面会讲*/</span></span><br><span class="line">    <span class="keyword">int</span> up=limit?a[pos]:<span class="number">9</span>;<span class="comment">//根据limit判断枚举的上界up;这个的例子前面用213讲过了</span></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//开始计数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;i++)<span class="comment">//枚举，然后把不同情况的个数加到ans就可以了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>() ...</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>()...</span><br><span class="line">        ans+=dfs(pos<span class="number">-1</span>,<span class="comment">/*状态转移*/</span>,lead &amp;&amp; i==<span class="number">0</span>,limit &amp;&amp; i==a[pos]) <span class="comment">//最后两个变量传参都是这样写的</span></span><br><span class="line">        <span class="comment">/*这里还算比较灵活，不过做几个题就觉得这里也是套路了</span></span><br><span class="line"><span class="comment">        大概就是说，我当前数位枚举的数是i，然后根据题目的约束条件分类讨论</span></span><br><span class="line"><span class="comment">        去计算不同情况下的个数，还有要根据state变量来保证i的合法性，比如题目</span></span><br><span class="line"><span class="comment">        要求数位上不能有62连续出现,那么就是state就是要保存前一位pre,然后分类，</span></span><br><span class="line"><span class="comment">        前一位如果是6那么这意味就不能是2，这里一定要保存枚举的这个数是合法*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算完，记录状态</span></span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; !lead) dp[pos][state]=ans;</span><br><span class="line">    <span class="comment">/*这里对应上面的记忆化，在一定条件下时记录，保证一致性，当然如果约束条件不需要考虑lead，这里就是lead就完全不用考虑了*/</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)<span class="comment">//把数位都分解出来</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[pos++]=x%<span class="number">10</span>;<span class="comment">//个人老是喜欢编号为[0,pos),看不惯的就按自己习惯来，反正注意数位边界就行</span></span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(pos<span class="number">-1</span><span class="comment">/*从最高位开始枚举*/</span>,<span class="comment">/*一系列状态 */</span>,<span class="literal">true</span>,<span class="literal">true</span>);<span class="comment">//刚开始最高位都是有限制并且有前导零的，显然比最高位还要高的一位视为0嘛</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll le,ri;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化dp数组为-1,这里还有更加优美的优化,后面讲</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,solve(ri)-solve(le<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信读者还对这个有不少疑问，笔者认为有必要讲一下记忆化为什么是if(!limit)才行，大致就是说有无limit会出现状态冲突，举例：</p><p>约束：数位上不能出现连续的两个1(11、112、211都是不合法的)</p><p>假设就是[1,210]这个区间的个数</p><p>状态:dp[pos][pre]:当前枚举到pos位，前面一位枚举的是pre(更加前面的位已经合法了)，的个数(我的pos从0开始)</p><p>先看错误的方法计数，就是不判limit就是直接记忆化</p><p>那么假设我们第一次枚举了百位是0，显然后面的枚举limit=false，也就是数位上0到9的枚举，然后当我十位枚举了1，此时考虑dp[0][1],就是枚举到个位，前一位是1的个数，显然dp[0][1]=9;(个位只有是1的时候是不满足的)，这个状态记录下来，继续dfs，一直到百位枚举了2，十位枚举了1，显然此时递归到了pos=0,pre=1的层，而dp[0][1]的状态已经有了即dp[pos][pre]!=-1；此时程序直接return dp[0][1]了，然而显然是错的，因为此时是有limit的个位只能枚举0，根本没有9个数，这就是状态冲突了。有lead的时候可能出现冲突，这只是两个最基本的不同的题目可能还要加限制，反正宗旨都是让dp状态唯一</p><p>对于这个错误说两点：一是limit为true的数并不多，一个个枚举不会很浪费时间，所以我们记录下! limit的状态解决了不少子问题重叠。第二，有人可能想到把dp状态改一下dp[pos][state][limit]就是分别记录不同limit下的个数，这种方法一般是对的，关于这个具体会讲，下面有题bzoj3209会用到这个。</p><p>数位的部分就是这些，然后就是难点，dp部分，dp大牛的艺术，弱鸡只能看看+…+</p><p>既然从高位往低位枚举，那么状态一般都是与前面已经枚举的数位有关并且通常是根据约束条件当前枚举的这一位能使得状态完整(比如一个状态涉及到连续k位，那么就保存前k-1的状态，当前枚举的第k个是个恰好凑成成一个完整的状态，不过像那种状态是数位的和就直接保存前缀和为状态了)，不过必然有一位最简单的一个状态dp[pos]当前枚举到了pos位。dp部分就要开始讲例题了，不过会介绍几种常用防tle的优化。</p><h1 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h1><blockquote><p>例一：HDU 2089 不要62</p><p>入门题。就是数位上不能有4也不能有连续的62，没有4的话在枚举的时候判断一下，不枚举4就可以保证状态合法了，所以这个约束没有记忆化的必要，而对于62的话，涉及到两位，当前一位是6或者不是6这两种不同情况我计数是不相同的，所以要用状态来记录不同的方案数。</p></blockquote><p>dp[pos][sta]表示当前第pos位，前一位是否是6的状态，这里sta只需要去0和1两种状态就可以了，不是6的情况可视为同种，不会影响计数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> pre,<span class="keyword">int</span> sta,<span class="keyword">bool</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; dp[pos][sta]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][sta];</span><br><span class="line">    <span class="keyword">int</span> up=limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pre==<span class="number">6</span> &amp;&amp; i==<span class="number">2</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">4</span>) <span class="keyword">continue</span>;<span class="comment">//都是保证枚举合法性</span></span><br><span class="line">        tmp+=dfs(pos<span class="number">-1</span>,i,i==<span class="number">6</span>,limit &amp;&amp; i==a[pos]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) dp[pos][sta]=tmp;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos++]=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(pos<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> le,ri;</span><br><span class="line">    <span class="comment">//memset(dp,-1,sizeof dp);可优化</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;le,&amp;ri) &amp;&amp; le+ri)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,solve(ri)-solve(le<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入门就不多讲了，开始讲常用优化吧！</p><h1 id="第一-memset-dp-1-sizeof-dp-放在多组数据外面。"><a href="#第一-memset-dp-1-sizeof-dp-放在多组数据外面。" class="headerlink" title="第一:memset(dp,-1,sizeof dp);放在多组数据外面。"></a>第一:memset(dp,-1,sizeof dp);放在多组数据外面。</h1><p>这一点是一个数位特点，使用的条件是：约束条件是每个数自身的属性，而与输入无关。</p><p>具体的：上一题不要62和4，这个约束对每一个数都是确定的，就是说任意一个数满不满足这个约束都是确定，比如444这个数，它不满足约束条件，不管你输入的区间是多少你都无法改变这个数不满足约束这个事实，这就是数自身的属性（我们每组数据只是在区间计数而已，只能说你输入的区间不包含444的话，我们就不把它统计在内，而无法改变任何事实）。</p><p>由此，我们保存的状态就可以一直用(注意还有要limit，不同区间是会影响数位在有限制条件下的上限的)</p><p>这点优化就不给具体题目了，这个还有进一步的扩展。不过说几个我遇到的简单的约束：</p><p>1.求数位和是10的倍数的个数,这里简化为数位sum%10这个状态，即dp[pos][sum]这里10 是与多组无关的，所以可以memset优化，不过注意如果题目的模是输入的话那就不能这样了。</p><p>2.求二进制1的数量与0的数量相等的个数，这个也是数自身的属性。</p><p>3.。。。。。</p><p>还是做题积累吧。搞懂思想！</p><p>下面介绍的方法就是要行memset优化，把不满足前提的通过修改，然后优化。</p><p>介绍之前,先说一种较为笨拙的修改，那就是增加状态，前面讲limit的地方说增加一维dp[pos][state][limit]，能把不同情况下状态分别记录(不过这个不能memset放外面)。基于这个思想，我们考虑：约束为数位是p的倍数的个数，其中p数输入的，这和上面sum%10类似，但是dp[pos][sum]显然已经不行了，每次p可能都不一样，为了强行把memset提到外面加状态dp[pos][sum][p]，对于每个不同p分别保存对应的状态。这里前提就比较简单了，你dp数组必须合法，p太大就G_G了。所以对于与输入有关的约束都可以强行增加状态(这并不代表能ac，如果题目数据少的话就随便你乱搞了)</p><h1 id="第二：相减。"><a href="#第二：相减。" class="headerlink" title="第二：相减。"></a>第二：相减。</h1><p>例题：HDU 4734</p><p>题目给了个f(x)的定义：F(x) = An * 2n-1 + An-1 * 2n-2 + … + A2 * 2 + A1 * 1，Ai是十进制数位，然后给出a,b求区间[0,b]内满足f(i)&lt;=f(a)的i的个数。</p><p>常规想：这个f(x)计算就和数位计算是一样的，就是加了权值，所以dp[pos][sum]，这状态是基本的。a是题目给定的，f(a)是变化的不过f(a)最大好像是4600的样子。如果要memset优化就要加一维存f(a)的不同取值，那就是dp[10][4600][4600]，这显然不合法。</p><p>这个时候就要用减法了，dp[pos][sum]，sum不是存当前枚举的数的前缀和(加权的)，而是枚举到当前pos位，后面还需要凑sum的权值和的个数，</p><p>也就是说初始的是时候sum是f(a),枚举一位就减去这一位在计算f(i)的权值，那么最后枚举完所有位 sum&gt;=0时就是满足的，后面的位数凑足sum位就可以了。</p><p>仔细想想这个状态是与f(a)无关的(新手似乎很难理解)，一个状态只有在sum&gt;=0时才满足，如果我们按常规的思想求f(i)的话，那么最后sum&gt;=f(a)才是满足的条件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">12</span>][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=f(x/<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> ans*<span class="number">2</span>+(x%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> all;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">12</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> sum,<span class="keyword">bool</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>) &#123;<span class="keyword">return</span> sum&lt;=all;&#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;all) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; dp[pos][all-sum]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][all-sum];</span><br><span class="line">    <span class="keyword">int</span> up=limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=dfs(pos<span class="number">-1</span>,sum+i*(<span class="number">1</span>&lt;&lt;pos),limit &amp;&amp; i==a[pos]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) dp[pos][all-sum]=ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos++]=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(pos<span class="number">-1</span>,<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,ri;</span><br><span class="line">    <span class="keyword">int</span> T_T;</span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T_T);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">while</span>(T_T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;ri);</span><br><span class="line">        all=f(a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: %d\n&quot;</span>,kase++,solve(ri));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减法的艺术！！！</p><p>例题 POJ 3252</p><p>这题的约束就是一个数的二进制中0的数量要不能少于1的数量，通过上一题，这题状态就很简单了，dp[pos][num],到当前数位pos,0的数量减去1的数量不少于num的方案数，一个简单的问题，中间某个pos位上num可能为负数(这不一定是非法的，因为我还没枚举完嘛，只要最终的num&gt;=0才能判合法，中途某个pos就不一定了)，这里比较好处理，Hash嘛，最小就-32吧(好像),直接加上32，把32当0用。这题主要是要想讲一下lead的用法，显然我要统计0的数量，前导零是有影响的。至于!lead&amp;&amp;!limit才能dp，都是类似的，自己慢慢体会吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/STACK:10240000,10240000&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> R=<span class="number">0.5772156649015328606065120900</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">35</span>][<span class="number">66</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">66</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> sta,<span class="keyword">bool</span> lead,<span class="keyword">bool</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> sta&gt;=<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; !lead &amp;&amp; dp[pos][sta]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][sta];</span><br><span class="line">    <span class="keyword">int</span> up=limit?a[pos]:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(lead &amp;&amp; i==<span class="number">0</span>) ans+=dfs(pos<span class="number">-1</span>,sta,lead,limit &amp;&amp; i==a[pos]);<span class="comment">//有前导零就不统计在内</span></span><br><span class="line">        <span class="keyword">else</span> ans+=dfs(pos<span class="number">-1</span>,sta+(i==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>),lead &amp;&amp; i==<span class="number">0</span>,limit &amp;&amp; i==a[pos]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; !lead ) dp[pos][sta]=ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos++]=x&amp;<span class="number">1</span>;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(pos<span class="number">-1</span>,<span class="number">32</span>,<span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,solve(b)-solve(a<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是一些需要自己yy的题：</p><p>HDU 3709 这题就是要枚举中轴，然后数位dp</p><p>UVA 1305 这题我二分然后数位dp搞(好像不是正解，我水过的)</p><p>Hbzoj 1799 这题讲一下：</p><p>（偷偷告诉你，这个oj是单组测试，然后memset什么的都是浮云了）</p><p>约束：一个数是它自己数位和的倍数，直接dp根本找不到状态，枚举数位和，因为总就162,然后问题就变成了一个数%mod=0，mod是枚举的，想想状态：dp[pos][sum][val]，当前pos位上数位和是sum,val就是在算这个数%mod,（从高位算  *10+i），因为我们枚举的数要保证数位和等于mod，还要保证这个数是mod的倍数，很自然就能找到这些状态，显然对于每一个mod，val不能保证状态唯一，这是你要是想加一维dp[pos][sum][val][mod],记录每一个mod的状态(这里sum可以用减法，然而val不行，就只能加一维)，那你就想太多了，这样是会超时的(因为状态太多，记忆化效果不好)。这里直接对每一个mod，memset一次就能ac。下面的代码还把limit的当做了状态，因为每次都要初始化，所以能这样，memset在多组外面是不能这样的，不过奇葩的，这代码，如果不把limit当状态，还是在!limit 条件下记录dp，提交一发，时间竟然更短了，可能是每次memset的关系！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line">ll dp[<span class="number">20</span>][<span class="number">163</span>][<span class="number">163</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> sum,<span class="keyword">int</span> val,<span class="keyword">int</span> mod,<span class="keyword">bool</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum<span class="number">-9</span>*pos<span class="number">-9</span>&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//最坏的情况，这一位及后面的全部为9都不能达到0那就直接GG，这个剪枝不会影响ac</span></span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>) <span class="keyword">return</span> sum==<span class="number">0</span> &amp;&amp; val==<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(dp[pos][sum][val][limit]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][sum][val][limit];</span><br><span class="line">    <span class="keyword">int</span> up=limit?a[pos]:<span class="number">9</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum-i&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        ans+=dfs(pos<span class="number">-1</span>,sum-i,(val*<span class="number">10</span>+i)%mod,mod,limit &amp;&amp; i==a[pos]);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[pos][sum][val][limit]=ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos++]=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos*<span class="number">9</span>;i++)<span class="comment">//上限就是每一位都是9</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        ll tmp=dfs(pos<span class="number">-1</span>,i,<span class="number">0</span>,i,<span class="literal">true</span>);</span><br><span class="line">        ans+=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    cout&lt;&lt;18*9&lt;&lt;endl;</span></span><br><span class="line">    ll le,ri;</span><br><span class="line"><span class="comment">//    memset(dp,-1,sizeof dp);</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;le,&amp;ri))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,solve(ri)-solve(le<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 1000000000000000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>基本讲的差不多了。前段时间学了点新东西！！</p><h1 id="新的领域–计数转求和"><a href="#新的领域–计数转求和" class="headerlink" title="新的领域–计数转求和"></a>新的领域–计数转求和</h1><p>HDU 4507</p><p>这题麻烦就是要求数的平方和。</p><p>我们先考虑求和的问题，一个区间，数位dp能在一些约束下计数，现在要这些数的和。其实组合数学搞搞就可以了：如 现在枚举的某一位pos,我统计了这一位枚举i的满足条件的个数cnt，其实只要算i对总和的贡献就可以了，对于一个数而言第pos位是i，那么对求和贡献就是i<em>10^ pos 就是十进制的权值，然后有cnt个数都满足第pos位是i，最后sum=cnt</em>i<em>10^ pos.原理就是这样平方和可以看做(a</em>10^  pos+b)^2,a是你当前pos位要枚举的，b其实是个子问题，就是pos之后的位的贡献值，把这个平方展开就可以了！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/STACK:10240000,10240000&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> R=<span class="number">0.5772156649015328606065120900</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll fact[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        fact[i]=fact[i<span class="number">-1</span>]*<span class="number">10</span>%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll cnt,sum,sqr;</span><br><span class="line">    node(ll cnt=<span class="number">-1</span>,ll sum=<span class="number">0</span>,ll sqr=<span class="number">0</span>):cnt(cnt),sum(sum),sqr(sqr)&#123;&#125;</span><br><span class="line">&#125;dp[<span class="number">20</span>][<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="function">ll <span class="title">fac</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,ll num,ll val,ll&amp;cnt,ll&amp;sum,<span class="keyword">bool</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span> || val==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit &amp;&amp; dp[pos][num][val].cnt!=<span class="number">-1</span>) &#123;</span><br><span class="line">            cnt=dp[pos][num][val].cnt;</span><br><span class="line">            sum=dp[pos][num][val].sum;</span><br><span class="line">            <span class="keyword">return</span> dp[pos][num][val].sqr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> up=limit?a[pos]:<span class="number">9</span>;</span><br><span class="line">    ll sq=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=up;i++)</span><br><span class="line">    <span class="keyword">if</span>(i!=<span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll cn=<span class="number">0</span>,su=<span class="number">0</span>;</span><br><span class="line">        ll tmp=dfs(pos<span class="number">-1</span>,(num+i)%<span class="number">7</span>,(val*<span class="number">10</span>+i)%<span class="number">7</span>,cn,su,limit &amp;&amp; i==a[pos]);</span><br><span class="line">        ll tm=i*fact[pos]%mod;</span><br><span class="line">        tmp=(tmp+fac(tm)*cn%mod+(tm*su%mod)*<span class="number">2</span>%mod)%mod;<span class="comment">//计数之后要更新sum,sqr</span></span><br><span class="line">        sum=(sum+su+(i*fact[pos]%mod)*cn%mod)%mod;</span><br><span class="line">        cnt=(cnt+cn)%mod;</span><br><span class="line">        sq=(sq+tmp)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!limit) dp[pos][num][val]=node(cnt,sum,sq);</span><br><span class="line">    <span class="keyword">return</span> sq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos++]=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll t1=<span class="number">0</span>,t2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> dfs(pos<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,t1,t2,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x%<span class="number">7</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">10</span>==<span class="number">7</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        sum+=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum%=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">return</span> sum!=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">7</span>;k++)<span class="comment">//memset</span></span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][j][k].cnt=<span class="number">-1</span>;</span><br><span class="line">        dp[i][j][k].sum=<span class="number">0</span>;</span><br><span class="line">        dp[i][j][k].sqr=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T_T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T_T);</span><br><span class="line">    <span class="keyword">while</span>(T_T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll le,ri;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%I64d%I64d&quot;</span>,&amp;le,&amp;ri);</span><br><span class="line">        ll ans=solve(ri)-solve(le<span class="number">-1</span>);</span><br><span class="line">        ans=(ans%mod+mod)%mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">转了一篇数位DP的文章，数位DP主要是解决区间计数问题，将每一个位进行dp</summary>
    
    
    
    <category term="ACM" scheme="http://liukairui.cc/categories/ACM/"/>
    
    <category term="动态规划.数位DP" scheme="http://liukairui.cc/categories/ACM/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%95%B0%E4%BD%8DDP/"/>
    
    
    <category term="算法" scheme="http://liukairui.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="ACM" scheme="http://liukairui.cc/tags/ACM/"/>
    
    <category term="动态规划" scheme="http://liukairui.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="数位DP" scheme="http://liukairui.cc/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>2020牛客寒假算法基础集训营3题解</title>
    <link href="http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53%E9%A2%98%E8%A7%A3/"/>
    <id>http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53%E9%A2%98%E8%A7%A3/</id>
    <published>2020-10-30T16:00:09.000Z</published>
    <updated>2020-11-15T17:58:30.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A：牛牛的DRB迷宫I"><a href="#A：牛牛的DRB迷宫I" class="headerlink" title="A：牛牛的DRB迷宫I"></a>A：牛牛的DRB迷宫I</h2><p><img data-src="https://img-blog.csdnimg.cn/20200320144021809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line">RBBBR</span><br><span class="line">BBBBB</span><br><span class="line">BBBDB</span><br><span class="line">BDBBB</span><br><span class="line">RBBBB</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><hr><p>可以看到就是一个简单的dp题，然后再dp某一个点的时候，特判他能不能从左边和上边刷下来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">75</span>][<span class="number">75</span>],n,m;</span><br><span class="line"><span class="keyword">char</span> G[<span class="number">75</span>][<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,G[i]+<span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>)dp[i][j]=(dp[i][j]+(G[i<span class="number">-1</span>][j]==<span class="string">&#x27;R&#x27;</span>?<span class="number">0</span>:dp[i<span class="number">-1</span>][j]))%mod;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="number">1</span>)dp[i][j]=(dp[i][j]+(G[i][j<span class="number">-1</span>]==<span class="string">&#x27;D&#x27;</span>?<span class="number">0</span>:dp[i][j<span class="number">-1</span>]))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n][m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B：牛牛的DRB迷宫II"><a href="#B：牛牛的DRB迷宫II" class="headerlink" title="B：牛牛的DRB迷宫II"></a>B：牛牛的DRB迷宫II</h2><p><img data-src="https://img-blog.csdnimg.cn/20200320144558560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line">RBBBR</span><br><span class="line">BBBBB</span><br><span class="line">BBBDB</span><br><span class="line">BDBBB</span><br><span class="line">RBBBB</span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">样例为《牛牛的DRB迷宫I》中的样例反过来。</span><br></pre></td></tr></table></figure><hr><p>首先，不要被这个样例给虎了，这就是第一题的样例反过来，不是出题人标程序跑出来的结果，<br>我们考虑构造一个50x50的地图最多可能的结果，就是所有的位置全是B，那么构造的结果是$C_{2n}^n \gg 10^9+7$，但是找不到规律qwq<br>于是构造一个二进制数，强制对角线为$2^n$，如图<br><img data-src="https://img-blog.csdnimg.cn/2020032015075871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先，证明他的可行性，这样最大可以构造数字为$2^{50}&gt;2^{32}&gt;10^9+7$，说以这样构造是可行的<br>然后考虑如何构造这样的一个迷宫,由于数字只能从左上到右下流动，所以要想2倍，比较好的方法是<br><img data-src="https://img-blog.csdnimg.cn/20200320151406890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么，我们的构造方法是<br><img data-src="https://img-blog.csdnimg.cn/20200320151705500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>左上角的绿块一定要是<code>B</code>，右面那个可以是<code>B</code>也可以是<code>D</code>因为即使右边是B，向右流过去也不会影响下面的，但是有可能会影响64那个块，所以我们让右边一定是<code>D</code>，同理下面那个可以是<code>R</code>也可以是<code>B</code>，但是我们暂定为<code>R</code>,于是暂时构造迷宫如图<br><img data-src="https://img-blog.csdnimg.cn/20200320152131130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200320152221972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>错的思路：<br>这就好办了，我们把给的数分解为二进制，0就不选，1就选，例如25=11001(2进制)<br>蓝色是选，绿色是不选<br><img data-src="https://img-blog.csdnimg.cn/20200320152614490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>于是写出代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k,len;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(len=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;len)&lt;=k;len++);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,len,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j-i==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i-j==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">                k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==j)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;j)<span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这是错的，因为我们的二进制不选，下一个就会受影响，如图</strong><br><img data-src="https://img-blog.csdnimg.cn/20200320152828710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以这个对角线上的数字必须保留！<br>那如何优雅的表示选或者不选呢？？<br>首先，右上方的数字这么填写呢？？<br>一旦填写往下走到对角线上就会对对角线造成干扰，如图<br><img data-src="https://img-blog.csdnimg.cn/20200320153151452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以，不要让他对对角线造成干扰，我们把右上方黄线全部设为<code>D</code>!!!<br>这样右上方白块全都是0了，右上全写<code>R</code><br><img data-src="https://img-blog.csdnimg.cn/20200320153437410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200320153608234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们想让右下角数字承担选择转运的作用<br>首先一个要选的数字不能向右走，我们构造如下，首先把最后一个128要删去了，为啥，最后一个要放ans，我们假设<code>77</code>是最后要的结果<br><img data-src="https://img-blog.csdnimg.cn/20200320154313549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>让蓝色承担往下走的功能，红色是往右走<br><img data-src="https://img-blog.csdnimg.cn/20200320154629276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那如何让数据往下流呢？<br><img data-src="https://img-blog.csdnimg.cn/20200320154715901.png" alt="在这里插入图片描述"><br>比如现在他就流不下来<br>这么处理呢？<br>把他改成红色<br><img data-src="https://img-blog.csdnimg.cn/20200320154834148.png" alt="在这里插入图片描述"><br>这就流下卡了<br>那么我们就让想让他流下来的写成B，不想流下来的写成R，就这样就做到了<br><img data-src="https://img-blog.csdnimg.cn/20200320155101643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以，我们就做到了这一点，例如我们要处理一个<code>77</code>这样写<br>77=    1001101(二进制)<br><img data-src="https://img-blog.csdnimg.cn/20200320155609658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200320155801471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>错误思路！！！：</strong><br>轻松写出代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k,len=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(len=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;len)&lt;=k;len++);</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;len)==k)len++;len++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,len,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j-i==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j-i&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i-j&gt;<span class="number">1</span>)<span class="built_in">printf</span>((i==len<span class="number">-1</span>?<span class="string">&quot;R&quot;</span>:<span class="string">&quot;D&quot;</span>));</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(k&amp;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">                k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有问题！！<br><img data-src="https://img-blog.csdnimg.cn/20200320155948404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个灰色的表格，他是构造的时候让他构造主对角线才写为<code>D</code>,但是我们不能让他往下走，现在最后一个表格不是$2^n$了，写为<code>R</code><br><img data-src="https://img-blog.csdnimg.cn/2020032016023510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以再加一个特判</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k,len=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(len=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;len)&lt;=k;len++);</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;len)==k)len++;len++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,len,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==len<span class="number">-2</span>&amp;&amp;j==len<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==j)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j-i==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j-i&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i-j&gt;<span class="number">1</span>)<span class="built_in">printf</span>((i==len<span class="number">-1</span>?<span class="string">&quot;R&quot;</span>:<span class="string">&quot;D&quot;</span>));</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(k&amp;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">                k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但只有case通过95%<br>有两个bug，</p><ol><li>$k&gt;10^9+7$要mod回来</li><li>k=0的时候的解，我试了三个方法，这个spj只支持最后一个</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;0 0&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;No solution&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;2 2\nBR\nDB&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>最后写出AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k,len=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">    k=k%<span class="number">1000000007</span>;</span><br><span class="line">    <span class="comment">// if(k==0)&#123;printf(&quot;0 0&quot;);return 0;&#125;</span></span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;2 2\nBR\nDB&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="comment">// if(k==0)&#123;printf(&quot;No solution&quot;);return 0;&#125;</span></span><br><span class="line">    <span class="keyword">for</span>(len=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;len)&lt;=k;len++);</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;len)==k)len++;len++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,len,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==len<span class="number">-2</span>&amp;&amp;j==len<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==j)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j-i==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j-i&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i-j&gt;<span class="number">1</span>)<span class="built_in">printf</span>((i==len<span class="number">-1</span>?<span class="string">&quot;R&quot;</span>:<span class="string">&quot;D&quot;</span>));</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(k&amp;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;R&quot;</span>);</span><br><span class="line">                k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的是奇怪的构造qwq</p><hr><h2 id="C：牛牛的数组越位"><a href="#C：牛牛的数组越位" class="headerlink" title="C：牛牛的数组越位"></a>C：牛牛的数组越位</h2><p><img data-src="https://img-blog.csdnimg.cn/20200320162345326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">-1</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">-3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">-6</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">-1</span> <span class="number">8</span> <span class="number">5</span></span><br><span class="line"><span class="number">-2</span> <span class="number">13</span> <span class="number">6</span></span><br><span class="line"><span class="number">-100</span> <span class="number">406</span> <span class="number">7</span></span><br><span class="line"><span class="number">100</span> <span class="number">-393</span> <span class="number">8</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">8</span> <span class="number">1234</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">-51</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">Undefined Behaviour</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1234</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">Undefined Behaviour</span><br><span class="line">Runtime error</span><br><span class="line"><span class="number">7</span></span><br><span class="line">Accepted</span><br></pre></td></tr></table></figure><p><strong>备注:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无论是否发生数组越位或者非法访问，输入数据都要完整读入。</span><br><span class="line">题目中的代码不符合C/C++规范，在不同编译器中由于实现不同运行的结果也可能不同，请勿依赖特定编译器对于UB的实现。:)</span><br></pre></td></tr></table></figure><hr><p>签到题，二维数组用一维模拟即可，但是比较奇怪的是比赛写的一直是TLE<br>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">1103550</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> state=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n,m,p,x,y,v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;v);</span><br><span class="line">            <span class="keyword">if</span>(state==<span class="number">2</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> pos=m*x+y;</span><br><span class="line">            <span class="keyword">if</span>(pos&lt;<span class="number">0</span>||pos&gt;m*n<span class="number">-1</span>)&#123;</span><br><span class="line">                state=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=n||y&gt;=m)</span><br><span class="line">                    state=<span class="number">1</span>;</span><br><span class="line">                a[pos]=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(state==<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Runtime error&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)<span class="built_in">cout</span>&lt;&lt;a[i*m+j]&lt;&lt;(j==m<span class="number">-1</span>?<span class="string">&quot;&quot;</span>:<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(state==<span class="number">1</span>?<span class="string">&quot;Undefined Behaviour&quot;</span>:<span class="string">&quot;Accepted&quot;</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D：牛牛与二叉树的数组存储"><a href="#D：牛牛与二叉树的数组存储" class="headerlink" title="D：牛牛与二叉树的数组存储"></a>D：牛牛与二叉树的数组存储</h2><p><img data-src="https://img-blog.csdnimg.cn/20200320165114655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200320165130525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200320165153451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">The size of the tree is <span class="number">7</span></span><br><span class="line">Node <span class="number">1</span> is the root node of the tree</span><br><span class="line">The father of node <span class="number">1</span> is <span class="number">-1</span>, the left child is <span class="number">2</span>, <span class="keyword">and</span> the right child is <span class="number">3</span></span><br><span class="line">The father of node <span class="number">2</span> is <span class="number">1</span>, the left child is <span class="number">4</span>, <span class="keyword">and</span> the right child is <span class="number">5</span></span><br><span class="line">The father of node <span class="number">3</span> is <span class="number">1</span>, the left child is <span class="number">6</span>, <span class="keyword">and</span> the right child is <span class="number">7</span></span><br><span class="line">The father of node <span class="number">4</span> is <span class="number">2</span>, the left child is <span class="number">-1</span>, <span class="keyword">and</span> the right child is <span class="number">-1</span></span><br><span class="line">The father of node <span class="number">5</span> is <span class="number">2</span>, the left child is <span class="number">-1</span>, <span class="keyword">and</span> the right child is <span class="number">-1</span></span><br><span class="line">The father of node <span class="number">6</span> is <span class="number">3</span>, the left child is <span class="number">-1</span>, <span class="keyword">and</span> the right child is <span class="number">-1</span></span><br><span class="line">The father of node <span class="number">7</span> is <span class="number">3</span>, the left child is <span class="number">-1</span>, <span class="keyword">and</span> the right child is <span class="number">-1</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The size of the tree is <span class="number">4</span></span><br><span class="line">Node <span class="number">3</span> is the root node of the tree</span><br><span class="line">The father of node <span class="number">1</span> is <span class="number">2</span>, the left child is <span class="number">-1</span>, <span class="keyword">and</span> the right child is <span class="number">-1</span></span><br><span class="line">The father of node <span class="number">2</span> is <span class="number">3</span>, the left child is <span class="number">1</span>, <span class="keyword">and</span> the right child is <span class="number">4</span></span><br><span class="line">The father of node <span class="number">3</span> is <span class="number">-1</span>, the left child is <span class="number">-1</span>, <span class="keyword">and</span> the right child is <span class="number">2</span></span><br><span class="line">The father of node <span class="number">4</span> is <span class="number">2</span>, the left child is <span class="number">-1</span>, <span class="keyword">and</span> the right child is <span class="number">-1</span></span><br></pre></td></tr></table></figure><hr><p>前几天刚学了重口味线段树，即线段树的堆式存储<br>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ss[<span class="number">900050</span>],n,cnt=<span class="number">0</span>,pos[<span class="number">900050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">            c=getchar();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        k=k*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=read();</span><br><span class="line">        ss[i]=t;</span><br><span class="line">        <span class="keyword">if</span>(t&gt;<span class="number">0</span>)&#123;cnt++;pos[t]=i;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">for</span>(root=<span class="number">1</span>;root&lt;=n;root++)<span class="keyword">if</span>(ss[root]!=<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;The size of the tree is &quot;</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Node &quot;</span>&lt;&lt;ss[root]&lt;&lt;<span class="string">&quot; is the root node of the tree&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        root=pos[i];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;The father of node &quot;</span>&lt;&lt;ss[root]&lt;&lt;<span class="string">&quot; is &quot;</span>&lt;&lt;(ss[root&gt;&gt;<span class="number">1</span>]==<span class="number">0</span>?<span class="number">-1</span>:ss[root&gt;&gt;<span class="number">1</span>])&lt;&lt;<span class="string">&quot;, the left child is &quot;</span>&lt;&lt;(ss[root&lt;&lt;<span class="number">1</span>]==<span class="number">0</span>?<span class="number">-1</span>:ss[root&lt;&lt;<span class="number">1</span>])&lt;&lt;<span class="string">&quot;, and the right child is &quot;</span>&lt;&lt;(ss[(root&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>]==<span class="number">0</span>?<span class="number">-1</span>:ss[(root&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E：牛牛的随机数"><a href="#E：牛牛的随机数" class="headerlink" title="E：牛牛的随机数"></a>E：牛牛的随机数</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407081233666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">500000011</span></span><br><span class="line"><span class="number">222222228</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a可取<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>，b可取<span class="number">7</span>,<span class="number">8</span></span><br><span class="line"><span class="number">3</span>⊕<span class="number">7</span>=<span class="number">4</span>，<span class="number">4</span>⊕<span class="number">7</span>=<span class="number">3</span>，<span class="number">5</span>⊕<span class="number">7</span>=<span class="number">2</span></span><br><span class="line"><span class="number">3</span>⊕<span class="number">8</span>=<span class="number">11</span>，<span class="number">4</span>⊕<span class="number">8</span>=<span class="number">12</span>，<span class="number">5</span>⊕<span class="number">8</span>=<span class="number">13</span></span><br><span class="line">共<span class="number">6</span>种情况，答案为(<span class="number">4</span>+<span class="number">3</span>+<span class="number">2</span>+<span class="number">11</span>+<span class="number">12</span>+<span class="number">13</span>)/<span class="number">6</span>=<span class="number">45</span>/<span class="number">6</span>=<span class="number">15</span>/<span class="number">2</span>=<span class="number">15</span>*<span class="number">2</span>^(<span class="number">-1</span>)mod(<span class="number">10</span> ^<span class="number">9</span>+<span class="number">7</span>)=<span class="number">15</span>*<span class="number">500000004</span>%mod=<span class="number">500000011</span></span><br></pre></td></tr></table></figure><hr><p>因为是区间计数问题，所以使用数位dp<br>作者：四糸智乃<br>链接：<a href="https://ac.nowcoder.com/discuss/365306?type=101&amp;order=0&amp;pos=1&amp;page=2">https://ac.nowcoder.com/discuss/365306?type=101&amp;order=0&amp;pos=1&amp;page=2</a><br>来源：牛客网</p><p>有两种思路，第一种是拆位后直接数位DP。<br>首先考虑二进制的个位产生的贡献，那么二进制个位产生的贡献有两部分：<br>$[l_1,r_1]$区间内个位为0的数字乘以#[l_2,r_2]$区间内个位为1的数字。<br>$[l_1,r_1]$区间内个位为1的数字乘以$[l_2,r_2]$区间内个位为0的数字。<br>做一个二进制位的数位DP，用于统计该数位0与1的个数。<br>假设$x \in [l_1,R_1]中二进制的个位产生0的数目为￥cntx_0cnt二进制的个位产生1的数目为$cntx_1$<br>$y \in [l_2,R_2]$中二进制的个位产生0的数目为$cnty_0$二进制的个位产生1的数目为$cnty_1$<br>那么就产生了$cnty_0<em>cntx_1+cntx_0</em>cnty_1$的贡献。<br>如果是二进制的十位呢，那么就是$(cnty_0<em>cntx_1 +cntx_0</em>cnty_1)<em>2$。<br>那么二进制的第k位的贡献就为$(cnty_0</em>cntx_1+cntx_0*cnty_1)*2^k$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod=(<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> i,i0,T;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnta[<span class="number">70</span>],cntb[<span class="number">70</span>],dp[<span class="number">70</span>][<span class="number">70</span>][<span class="number">2</span>],a[<span class="number">70</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">bool</span> maxi,<span class="keyword">int</span> k,<span class="keyword">bool</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[len][k][f]!=<span class="number">-1</span>&amp;&amp;maxi==<span class="number">0</span>)<span class="keyword">return</span> dp[len][k][f];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!len)<span class="keyword">return</span> f;</span><br><span class="line">    <span class="keyword">int</span> maxn=maxi?a[len]:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxn;i++)cnt+=dfs(len<span class="number">-1</span>,maxi&amp;&amp;i==a[len],k,f||len==k&amp;&amp;i);</span><br><span class="line">    <span class="keyword">return</span> maxi?cnt:dp[len][k][f]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">div</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> tmp,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp)a[++p]=tmp%<span class="number">2</span>,tmp/=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> dfs(p,<span class="number">1</span>,k,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">inv</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k=mod<span class="number">-2</span>,ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) ans=ans*x%mod;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> l1,r1,l2,r2,p=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld %lld&quot;</span>,&amp;l1,&amp;r1,&amp;l2,&amp;r2);</span><br><span class="line">        l1--,l2--;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">60</span>;i++,p*=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnta[i]=div(r1,i)-div(l1,i);</span><br><span class="line">            cntb[i]=div(r2,i)-div(l2,i);</span><br><span class="line">            ans+=(cnta[i]%mod*((r2-l2-cntb[i])%mod)%mod+cntb[i]%mod*((r1-l1-cnta[i])%mod)%mod)*(p%mod)%mod;</span><br><span class="line">            ans%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ans%=mod,ans+=mod,ans%=mod;</span><br><span class="line">        ans=ans*inv(((r1-l1)%mod)*((r2-l2)%mod)%mod,mod)%mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F：牛牛的Link-Power-I"><a href="#F：牛牛的Link-Power-I" class="headerlink" title="F：牛牛的Link Power I"></a>F：牛牛的Link Power I</h2><p><img data-src="https://img-blog.csdnimg.cn/2020032016563852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">101</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">00110</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">000010</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p>记录每个1点的位置<br>对于第i个点，我们只要计算他以前的点即可<br>定义$pos_i$是第i个节点的位置$sum _ pos_i$是前i个位置的$pos$和，对于第i个位置<br>以前的节点和为<br>$$<br>     \sum \limits_{j=1}^{i}\left { pos_i-pos_j \right }<br>    =  \sum \limits_{j=1}^{i}pos_i-sum _ pos_{i-1}=i \times pos_i - sum _ pos_{i-1}<br>$$<br>写一个前缀和得到$sum _ pos_i$<br>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,n,pos[<span class="number">100050</span>];</span><br><span class="line"><span class="keyword">char</span> ss[<span class="number">100050</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ss);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ss[i]==<span class="string">&#x27;1&#x27;</span>)pos[cnt++]=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=-(cnt<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++,k+=<span class="number">2</span>)ans=(ans+(k*pos[i]))%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="G：牛牛的Link-Power-II"><a href="#G：牛牛的Link-Power-II" class="headerlink" title="G：牛牛的Link Power II"></a>G：牛牛的Link Power II</h2><p><img data-src="https://img-blog.csdnimg.cn/20200320171058726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">00001</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><hr><p>修改由于要频繁修改我们使用线段树来处理<br>对于第i的点，我们需要一个获得</p><ul><li>i前面所有1的pos和</li><li>i前面所有1的数目</li><li>i后面所有1的pos和</li><li>i后面所有1的数目<br>对于查询一个区间我们需要两个数据作为返回值pair&lt;1的pos总和，1的数目&gt;<br>所以线段树写成pair&lt;long long, long long&gt;数组的形式<br>注意pair合并的写法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC (LC|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_N 100050</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; PII;      <span class="comment">//pos cnt</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sumn=<span class="number">0</span>,cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">PII ss[MAX_N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    ss[p].first=(ss[LC].first+ss[RC].first)%mod;</span><br><span class="line">    ss[p].second=(ss[LC].second+ss[RC].second)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">1</span>)ss[p]=<span class="built_in">make_pair</span>(l,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">-1</span>)ss[p]=<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=M)modify(LC,x,v,l,M);</span><br><span class="line">    <span class="keyword">if</span>(x&gt;M)modify(RC,x,v,M+<span class="number">1</span>,r);</span><br><span class="line">    up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PII <span class="title">quary</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)<span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)<span class="keyword">return</span> ss[p];</span><br><span class="line">    PII res=<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=M)&#123;</span><br><span class="line">        PII tmp=quary(LC,x,y,l,M);</span><br><span class="line">        res.first=(res.first+tmp.first)%mod;</span><br><span class="line">        res.second=(res.second+tmp.second)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;M)&#123;</span><br><span class="line">        PII tmp=quary(RC,x,y,M+<span class="number">1</span>,r);</span><br><span class="line">        res.first=(res.first+tmp.first)%mod;</span><br><span class="line">        res.second=(res.second+tmp.second)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line">        <span class="keyword">if</span>(tmp==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            modify(<span class="number">1</span>,i,<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">            ans=(ans+i*(cnt++)-sumn)%mod;</span><br><span class="line">            sumn+=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> op,pos;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;op,&amp;pos);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            modify(<span class="number">1</span>,pos,<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">            PII l=quary(<span class="number">1</span>,<span class="number">1</span>,pos<span class="number">-1</span>,<span class="number">1</span>,n),r=quary(<span class="number">1</span>,pos+<span class="number">1</span>,n,<span class="number">1</span>,n);</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> LA=(l.second*pos-l.first+mod)%mod,RA=(r.first-r.second*pos+mod)%mod;</span><br><span class="line">            ans=(ans+LA+RA+mod)%mod;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            modify(<span class="number">1</span>,pos,<span class="number">-1</span>,<span class="number">1</span>,n);</span><br><span class="line">            PII l=quary(<span class="number">1</span>,<span class="number">1</span>,pos<span class="number">-1</span>,<span class="number">1</span>,n),r=quary(<span class="number">1</span>,pos+<span class="number">1</span>,n,<span class="number">1</span>,n);</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> LA=(l.second*pos-l.first+mod)%mod,RA=(r.first-r.second*pos+mod)%mod;</span><br><span class="line">            ans=(ans-LA-RA+mod*<span class="number">2</span>)%mod;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="H：牛牛的k合因子数"><a href="#H：牛牛的k合因子数" class="headerlink" title="H：牛牛的k合因子数"></a>H：牛牛的k合因子数</h2><p><img data-src="https://img-blog.csdnimg.cn/20200320171701491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>~<span class="number">10</span>的范围内</span><br><span class="line"><span class="number">1</span>合因子数有：<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>，共<span class="number">4</span>个</span><br><span class="line"><span class="number">2</span>合因子数有：<span class="number">8</span>，共<span class="number">1</span>一个</span><br></pre></td></tr></table></figure><hr><p>使用埃筛即可出解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> is_prime[<span class="number">100050</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,num_hy[<span class="number">100050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">es</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is_prime,<span class="literal">true</span>,<span class="keyword">sizeof</span>(is_prime));</span><br><span class="line">    is_prime[<span class="number">0</span>]=is_prime[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= n; i ++)&#123;<span class="comment">//判断改成i*i&lt;N </span></span><br><span class="line">        <span class="keyword">if</span>(is_prime[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i*i; j &lt;= n; j += i)&#123;<span class="comment">//从i*i开始就可以了 </span></span><br><span class="line">                is_prime[j] = <span class="literal">false</span>;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    is_prime[<span class="number">0</span>]=is_prime[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jduge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;i*j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!is_prime[i])&#123;num_hy[i*j]++;&#125;<span class="comment">//cout&lt;&lt;&quot;&gt;&gt;&gt; &quot;&lt;&lt;i*j&lt;&lt;&quot; have a hyz &quot;&lt;&lt;i&lt;&lt;endl;&#125;</span></span><br><span class="line">            <span class="keyword">if</span>(!is_prime[j])&#123;num_hy[i*j]++;&#125;<span class="comment">//cout&lt;&lt;&quot;&gt;&gt;&gt; &quot;&lt;&lt;i*j&lt;&lt;&quot; have a hyz &quot;&lt;&lt;j&lt;&lt;endl;&#125;</span></span><br><span class="line">            <span class="keyword">if</span>(i==j&amp;&amp;!is_prime[j])&#123;num_hy[i*j]--;&#125;<span class="comment">//cout&lt;&lt;&quot;&gt;&gt;&gt; &quot;&lt;&lt;i*j&lt;&lt;&quot; -- &quot;&lt;&lt;j&lt;&lt;endl;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    es();</span><br><span class="line">    jduge();</span><br><span class="line">    sort(num_hy+<span class="number">1</span>,num_hy+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,upper_bound(num_hy+<span class="number">1</span>,num_hy+<span class="number">1</span>+n,k)-lower_bound(num_hy+<span class="number">1</span>,num_hy+<span class="number">1</span>+n,k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;-------------------------------------------------&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)cout&lt;&lt;num_hy[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="I：牛牛的汉诺塔"><a href="#I：牛牛的汉诺塔" class="headerlink" title="I：牛牛的汉诺塔"></a>I：牛牛的汉诺塔</h2><p><img data-src="https://img-blog.csdnimg.cn/2020032017194149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200320172031280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A-&gt;B:<span class="number">1</span></span><br><span class="line">A-&gt;C:<span class="number">3</span></span><br><span class="line">B-&gt;A:<span class="number">1</span></span><br><span class="line">B-&gt;C:<span class="number">1</span></span><br><span class="line">C-&gt;A:<span class="number">0</span></span><br><span class="line">C-&gt;B:<span class="number">1</span></span><br><span class="line">SUM:<span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">A-&gt;C</span><br><span class="line">A-&gt;B</span><br><span class="line">C-&gt;B</span><br><span class="line">A-&gt;C</span><br><span class="line">B-&gt;A</span><br><span class="line">B-&gt;C</span><br><span class="line">A-&gt;C</span><br><span class="line">统计：</span><br><span class="line">A-&gt;B出现<span class="number">1</span>次</span><br><span class="line">A-&gt;C出现<span class="number">3</span>次</span><br><span class="line">B-&gt;C出现<span class="number">1</span>次</span><br><span class="line">B-&gt;A出现<span class="number">1</span>次</span><br><span class="line">C-&gt;B出现<span class="number">1</span>次</span><br><span class="line">总计<span class="number">7</span>次</span><br></pre></td></tr></table></figure><hr><p>首先要解决的是总数的问题$2^{n-1}$<br><a href="https://blog.csdn.net/restarted_/article/details/90377777">解法见此</a></p><p>写下n=2-5的所有过程，可以发现规律</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A-&gt;B=（上一次）A-&gt;C-&gt;B</span><br><span class="line">B-&gt;C=（上一次）B-&gt;A-&gt;C</span><br><span class="line">C-&gt;A=（上一次）C-&gt;B-&gt;A</span><br></pre></td></tr></table></figure><p>递归求解即可<br>递推代码丢了，上一个别人的<br>只留着打表的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[<span class="number">70</span>][<span class="number">10</span>]=&#123;</span><br><span class="line">    &#123;<span class="number">0</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">1</span> &#125; ,</span><br><span class="line">&#123;<span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">3</span> &#125; ,        </span><br><span class="line">&#123;<span class="number">1</span> , <span class="number">3</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">7</span> &#125; ,        </span><br><span class="line">&#123;<span class="number">4</span> , <span class="number">3</span> , <span class="number">1</span> , <span class="number">4</span> , <span class="number">2</span> , <span class="number">1</span> , <span class="number">15</span> &#125; ,       </span><br><span class="line">&#123;<span class="number">4</span> , <span class="number">9</span> , <span class="number">6</span> , <span class="number">4</span> , <span class="number">2</span> , <span class="number">6</span> , <span class="number">31</span> &#125; ,       </span><br><span class="line">&#123;<span class="number">15</span> , <span class="number">9</span> , <span class="number">6</span> , <span class="number">15</span> , <span class="number">12</span> , <span class="number">6</span> , <span class="number">63</span> &#125; ,    </span><br><span class="line">&#123;<span class="number">15</span> , <span class="number">31</span> , <span class="number">27</span> , <span class="number">15</span> , <span class="number">12</span> , <span class="number">27</span> , <span class="number">127</span> &#125; ,</span><br><span class="line">&#123;<span class="number">58</span> , <span class="number">31</span> , <span class="number">27</span> , <span class="number">58</span> , <span class="number">54</span> , <span class="number">27</span> , <span class="number">255</span> &#125; ,</span><br><span class="line">&#123;<span class="number">58</span> , <span class="number">117</span> , <span class="number">112</span> , <span class="number">58</span> , <span class="number">54</span> , <span class="number">112</span> , <span class="number">511</span> &#125; ,</span><br><span class="line">&#123;<span class="number">229</span> , <span class="number">117</span> , <span class="number">112</span> , <span class="number">229</span> , <span class="number">224</span> , <span class="number">112</span> , <span class="number">1023</span> &#125; ,</span><br><span class="line">&#123;<span class="number">229</span> , <span class="number">459</span> , <span class="number">453</span> , <span class="number">229</span> , <span class="number">224</span> , <span class="number">453</span> , <span class="number">2047</span> &#125; ,</span><br><span class="line">&#123;<span class="number">912</span> , <span class="number">459</span> , <span class="number">453</span> , <span class="number">912</span> , <span class="number">906</span> , <span class="number">453</span> , <span class="number">4095</span> &#125; ,</span><br><span class="line">&#123;<span class="number">912</span> , <span class="number">1825</span> , <span class="number">1818</span> , <span class="number">912</span> , <span class="number">906</span> , <span class="number">1818</span> , <span class="number">8191</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3643</span> , <span class="number">1825</span> , <span class="number">1818</span> , <span class="number">3643</span> , <span class="number">3636</span> , <span class="number">1818</span> , <span class="number">16383</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3643</span> , <span class="number">7287</span> , <span class="number">7279</span> , <span class="number">3643</span> , <span class="number">3636</span> , <span class="number">7279</span> , <span class="number">32767</span> &#125; ,</span><br><span class="line">&#123;<span class="number">14566</span> , <span class="number">7287</span> , <span class="number">7279</span> , <span class="number">14566</span> , <span class="number">14558</span> , <span class="number">7279</span> , <span class="number">65535</span> &#125; ,</span><br><span class="line">&#123;<span class="number">14566</span> , <span class="number">29133</span> , <span class="number">29124</span> , <span class="number">14566</span> , <span class="number">14558</span> , <span class="number">29124</span> , <span class="number">131071</span> &#125; ,</span><br><span class="line">&#123;<span class="number">58257</span> , <span class="number">29133</span> , <span class="number">29124</span> , <span class="number">58257</span> , <span class="number">58248</span> , <span class="number">29124</span> , <span class="number">262143</span> &#125; ,</span><br><span class="line">&#123;<span class="number">58257</span> , <span class="number">116515</span> , <span class="number">116505</span> , <span class="number">58257</span> , <span class="number">58248</span> , <span class="number">116505</span> , <span class="number">524287</span> &#125; ,</span><br><span class="line">&#123;<span class="number">233020</span> , <span class="number">116515</span> , <span class="number">116505</span> , <span class="number">233020</span> , <span class="number">233010</span> , <span class="number">116505</span> , <span class="number">1048575</span> &#125; ,</span><br><span class="line">&#123;<span class="number">233020</span> , <span class="number">466041</span> , <span class="number">466030</span> , <span class="number">233020</span> , <span class="number">233010</span> , <span class="number">466030</span> , <span class="number">2097151</span> &#125; ,</span><br><span class="line">&#123;<span class="number">932071</span> , <span class="number">466041</span> , <span class="number">466030</span> , <span class="number">932071</span> , <span class="number">932060</span> , <span class="number">466030</span> , <span class="number">4194303</span> &#125; ,</span><br><span class="line">&#123;<span class="number">932071</span> , <span class="number">1864143</span> , <span class="number">1864131</span> , <span class="number">932071</span> , <span class="number">932060</span> , <span class="number">1864131</span> , <span class="number">8388607</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3728274</span> , <span class="number">1864143</span> , <span class="number">1864131</span> , <span class="number">3728274</span> , <span class="number">3728262</span> , <span class="number">1864131</span> , <span class="number">16777215</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3728274</span> , <span class="number">7456549</span> , <span class="number">7456536</span> , <span class="number">3728274</span> , <span class="number">3728262</span> , <span class="number">7456536</span> , <span class="number">33554431</span> &#125; ,</span><br><span class="line">&#123;<span class="number">14913085</span> , <span class="number">7456549</span> , <span class="number">7456536</span> , <span class="number">14913085</span> , <span class="number">14913072</span> , <span class="number">7456536</span> , <span class="number">67108863</span> &#125; ,</span><br><span class="line">&#123;<span class="number">14913085</span> , <span class="number">29826171</span> , <span class="number">29826157</span> , <span class="number">14913085</span> , <span class="number">14913072</span> , <span class="number">29826157</span> , <span class="number">134217727</span> &#125; ,</span><br><span class="line">&#123;<span class="number">59652328</span> , <span class="number">29826171</span> , <span class="number">29826157</span> , <span class="number">59652328</span> , <span class="number">59652314</span> , <span class="number">29826157</span> , <span class="number">268435455</span> &#125; ,</span><br><span class="line">&#123;<span class="number">59652328</span> , <span class="number">119304657</span> , <span class="number">119304642</span> , <span class="number">59652328</span> , <span class="number">59652314</span> , <span class="number">119304642</span> , <span class="number">536870911</span> &#125; ,</span><br><span class="line">&#123;<span class="number">238609299</span> , <span class="number">119304657</span> , <span class="number">119304642</span> , <span class="number">238609299</span> , <span class="number">238609284</span> , <span class="number">119304642</span> , <span class="number">1073741823</span> &#125; ,</span><br><span class="line">&#123;<span class="number">238609299</span> , <span class="number">477218599</span> , <span class="number">477218583</span> , <span class="number">238609299</span> , <span class="number">238609284</span> , <span class="number">477218583</span> , <span class="number">2147483647</span> &#125; ,</span><br><span class="line">&#123;<span class="number">954437182</span> , <span class="number">477218599</span> , <span class="number">477218583</span> , <span class="number">954437182</span> , <span class="number">954437166</span> , <span class="number">477218583</span> , <span class="number">4294967295</span> &#125; ,</span><br><span class="line">&#123;<span class="number">954437182</span> , <span class="number">1908874365</span> , <span class="number">1908874348</span> , <span class="number">954437182</span> , <span class="number">954437166</span> , <span class="number">1908874348</span> , <span class="number">8589934591</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3817748713</span> , <span class="number">1908874365</span> , <span class="number">1908874348</span> , <span class="number">3817748713</span> , <span class="number">3817748696</span> , <span class="number">1908874348</span> , <span class="number">17179869183</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3817748713</span> , <span class="number">7635497427</span> , <span class="number">7635497409</span> , <span class="number">3817748713</span> , <span class="number">3817748696</span> , <span class="number">7635497409</span> , <span class="number">34359738367</span> &#125; ,</span><br><span class="line">&#123;<span class="number">15270994836</span> , <span class="number">7635497427</span> , <span class="number">7635497409</span> , <span class="number">15270994836</span> , <span class="number">15270994818</span> , <span class="number">7635497409</span> , <span class="number">68719476735</span> &#125; ,</span><br><span class="line">&#123;<span class="number">15270994836</span> , <span class="number">30541989673</span> , <span class="number">30541989654</span> , <span class="number">15270994836</span> , <span class="number">15270994818</span> , <span class="number">30541989654</span> , <span class="number">137438953471</span> &#125; ,</span><br><span class="line">&#123;<span class="number">61083979327</span> , <span class="number">30541989673</span> , <span class="number">30541989654</span> , <span class="number">61083979327</span> , <span class="number">61083979308</span> , <span class="number">30541989654</span> , <span class="number">274877906943</span> &#125; ,</span><br><span class="line">&#123;<span class="number">61083979327</span> , <span class="number">122167958655</span> , <span class="number">122167958635</span> , <span class="number">61083979327</span> , <span class="number">61083979308</span> , <span class="number">122167958635</span> , <span class="number">549755813887</span> &#125; ,</span><br><span class="line">&#123;<span class="number">244335917290</span> , <span class="number">122167958655</span> , <span class="number">122167958635</span> , <span class="number">244335917290</span> , <span class="number">244335917270</span> , <span class="number">122167958635</span> , <span class="number">1099511627775</span> &#125; ,</span><br><span class="line">&#123;<span class="number">244335917290</span> , <span class="number">488671834581</span> , <span class="number">488671834560</span> , <span class="number">244335917290</span> , <span class="number">244335917270</span> , <span class="number">488671834560</span> , <span class="number">2199023255551</span> &#125; ,</span><br><span class="line">&#123;<span class="number">977343669141</span> , <span class="number">488671834581</span> , <span class="number">488671834560</span> , <span class="number">977343669141</span> , <span class="number">977343669120</span> , <span class="number">488671834560</span> , <span class="number">4398046511103</span> &#125; ,</span><br><span class="line">&#123;<span class="number">977343669141</span> , <span class="number">1954687338283</span> , <span class="number">1954687338261</span> , <span class="number">977343669141</span> , <span class="number">977343669120</span> , <span class="number">1954687338261</span> , <span class="number">8796093022207</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3909374676544</span> , <span class="number">1954687338283</span> , <span class="number">1954687338261</span> , <span class="number">3909374676544</span> , <span class="number">3909374676522</span> , <span class="number">1954687338261</span> , <span class="number">17592186044415</span> &#125; ,</span><br><span class="line">&#123;<span class="number">3909374676544</span> , <span class="number">7818749353089</span> , <span class="number">7818749353066</span> , <span class="number">3909374676544</span> , <span class="number">3909374676522</span> , <span class="number">7818749353066</span> , <span class="number">35184372088831</span> &#125; ,</span><br><span class="line">&#123;<span class="number">15637498706155</span> , <span class="number">7818749353089</span> , <span class="number">7818749353066</span> , <span class="number">15637498706155</span> , <span class="number">15637498706132</span> , <span class="number">7818749353066</span> , <span class="number">70368744177663</span> &#125; ,</span><br><span class="line">&#123;<span class="number">15637498706155</span> , <span class="number">31274997412311</span> , <span class="number">31274997412287</span> , <span class="number">15637498706155</span> , <span class="number">15637498706132</span> , <span class="number">31274997412287</span> , <span class="number">140737488355327</span> &#125; ,</span><br><span class="line">&#123;<span class="number">62549994824598</span> , <span class="number">31274997412311</span> , <span class="number">31274997412287</span> , <span class="number">62549994824598</span> , <span class="number">62549994824574</span> , <span class="number">31274997412287</span> , <span class="number">281474976710655</span> &#125; ,</span><br><span class="line">&#123;<span class="number">62549994824598</span> , <span class="number">125099989649197</span> , <span class="number">125099989649172</span> , <span class="number">62549994824598</span> , <span class="number">62549994824574</span> , <span class="number">125099989649172</span> , <span class="number">562949953421311</span> &#125; ,</span><br><span class="line">&#123;<span class="number">250199979298369</span> , <span class="number">125099989649197</span> , <span class="number">125099989649172</span> , <span class="number">250199979298369</span> , <span class="number">250199979298344</span> , <span class="number">125099989649172</span> , <span class="number">1125899906842623</span> &#125; ,</span><br><span class="line">&#123;<span class="number">250199979298369</span> , <span class="number">500399958596739</span> , <span class="number">500399958596713</span> , <span class="number">250199979298369</span> , <span class="number">250199979298344</span> , <span class="number">500399958596713</span> , <span class="number">2251799813685247</span> &#125; ,</span><br><span class="line">&#123;<span class="number">1000799917193452</span> , <span class="number">500399958596739</span> , <span class="number">500399958596713</span> , <span class="number">1000799917193452</span> , <span class="number">1000799917193426</span> , <span class="number">500399958596713</span> , <span class="number">4503599627370495</span> &#125; ,</span><br><span class="line">&#123;<span class="number">1000799917193452</span> , <span class="number">2001599834386905</span> , <span class="number">2001599834386878</span> , <span class="number">1000799917193452</span> , <span class="number">1000799917193426</span> , <span class="number">2001599834386878</span> , <span class="number">9007199254740991</span> &#125; ,</span><br><span class="line">&#123;<span class="number">4003199668773783</span> , <span class="number">2001599834386905</span> , <span class="number">2001599834386878</span> , <span class="number">4003199668773783</span> , <span class="number">4003199668773756</span> , <span class="number">2001599834386878</span> , <span class="number">18014398509481983</span> &#125; ,        </span><br><span class="line">&#123;<span class="number">4003199668773783</span> , <span class="number">8006399337547567</span> , <span class="number">8006399337547539</span> , <span class="number">4003199668773783</span> , <span class="number">4003199668773756</span> , <span class="number">8006399337547539</span> , <span class="number">36028797018963967</span> &#125; ,        </span><br><span class="line">&#123;<span class="number">16012798675095106</span> , <span class="number">8006399337547567</span> , <span class="number">8006399337547539</span> , <span class="number">16012798675095106</span> , <span class="number">16012798675095078</span> , <span class="number">8006399337547539</span> , <span class="number">72057594037927935</span> &#125; ,     </span><br><span class="line">&#123;<span class="number">16012798675095106</span> , <span class="number">32025597350190213</span> , <span class="number">32025597350190184</span> , <span class="number">16012798675095106</span> , <span class="number">16012798675095078</span> , <span class="number">32025597350190184</span> , <span class="number">144115188075855871</span> &#125; , </span><br><span class="line">&#123;<span class="number">64051194700380397</span> , <span class="number">32025597350190213</span> , <span class="number">32025597350190184</span> , <span class="number">64051194700380397</span> , <span class="number">64051194700380368</span> , <span class="number">32025597350190184</span> , <span class="number">288230376151711743</span> &#125; , </span><br><span class="line">&#123;<span class="number">64051194700380397</span> , <span class="number">128102389400760795</span> , <span class="number">128102389400760765</span> , <span class="number">64051194700380397</span> , <span class="number">64051194700380368</span> , <span class="number">128102389400760765</span> , <span class="number">576460752303423487</span> &#125; ,</span><br><span class="line">&#123;<span class="number">256204778801521560</span> , <span class="number">128102389400760795</span> , <span class="number">128102389400760765</span> , <span class="number">256204778801521560</span> , <span class="number">256204778801521530</span> , <span class="number">128102389400760765</span> , <span class="number">1152921504606846975</span> &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A-&gt;B:&quot;</span>&lt;&lt;ans[n<span class="number">-1</span>][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A-&gt;C:&quot;</span>&lt;&lt;ans[n<span class="number">-1</span>][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B-&gt;A:&quot;</span>&lt;&lt;ans[n<span class="number">-1</span>][<span class="number">2</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B-&gt;C:&quot;</span>&lt;&lt;ans[n<span class="number">-1</span>][<span class="number">3</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;C-&gt;A:&quot;</span>&lt;&lt;ans[n<span class="number">-1</span>][<span class="number">4</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;C-&gt;B:&quot;</span>&lt;&lt;ans[n<span class="number">-1</span>][<span class="number">5</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;SUM:&quot;</span>&lt;&lt;ans[n<span class="number">-1</span>][<span class="number">6</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题矩阵快速幂也可求解</p><h2 id="J：-牛牛的宝可梦Go"><a href="#J：-牛牛的宝可梦Go" class="headerlink" title="J：    牛牛的宝可梦Go"></a>J：    牛牛的宝可梦Go</h2><p><img data-src="https://img-blog.csdnimg.cn/20200407080516808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">100</span></span><br><span class="line"><span class="number">100</span> <span class="number">1</span> <span class="number">10000</span></span><br><span class="line"><span class="number">10000</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10101</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1000000000</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1000000000</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1000000000</span></span><br></pre></td></tr></table></figure><hr><p>这个题首先先求一遍最短路，这个求最短路的过程可以用flord实现。<br>接下来类似最长上升子序列，但是显然这个好像不太好优化，考虑暴力$k^2$转移，由于地图的大小只有200，所以200步以后可以转移到任意位置，用这个性质可以优化$k^2$-&gt;200k。<br>也就是说每次转移只暴力往前for200个，多余200个以上的时候记录一个前缀max，直接从这个前缀中转移。<br>时间复杂度：$O\left(200k\right)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">il <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">24</span>],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">24</span>,<span class="built_in">stdin</span>),p1==p2)? EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc getchar</span></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">inn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,c=gc();</span><br><span class="line">    <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c=gc()) <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(f) <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c=gc()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)-(c^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c=gc()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,l,mp[N][N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> t,p,v;</span><br><span class="line">&#125;a[K];</span><br><span class="line">ll f[K],ans,mx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</span><br><span class="line">                mp[i][j]=min(mp[i][j],mp[i][k]+mp[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.t&lt;b.t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=inn(),m=inn();</span><br><span class="line">    <span class="built_in">memset</span>(mp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(mp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u=inn(),v=inn();</span><br><span class="line">        mp[u][v]=mp[v][u]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) mp[i][i]=<span class="number">0</span>;</span><br><span class="line">    floyd();</span><br><span class="line">    k=inn();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) &#123;</span><br><span class="line">        a[i].t=inn(),a[i].p=inn(),a[i].v=inn();</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="number">1</span>][a[i].p]==inf) &#123; --i,--k,--n; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+k+<span class="number">1</span>,cmp);</span><br><span class="line">    a[<span class="number">0</span>].p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="number">1</span>][a[i].p]&gt;a[i].t) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i].t-a[l].t&gt;=n) &#123;</span><br><span class="line">            mx=max(mx,f[l++]);</span><br><span class="line">        &#125;</span><br><span class="line">        f[i]=mx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=l; j&lt;i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[a[j].p][a[i].p]&lt;=a[i].t-a[j].t) &#123;</span><br><span class="line">                f[i]=max(f[i],f[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[i]+=a[i].v;</span><br><span class="line">        ans=max(ans,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原题来自2020牛客寒假算法基础集训营3，作以存档备查</summary>
    
    
    
    <category term="ACM" scheme="http://liukairui.cc/categories/ACM/"/>
    
    <category term="题解" scheme="http://liukairui.cc/categories/ACM/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://liukairui.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="ACM" scheme="http://liukairui.cc/tags/ACM/"/>
    
    <category term="牛客" scheme="http://liukairui.cc/tags/%E7%89%9B%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX学习笔记(刘大成版)</title>
    <link href="http://liukairui.cc/LaTeX%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%88%98%E5%A4%A7%E6%88%90%E7%89%88)/"/>
    <id>http://liukairui.cc/LaTeX%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%88%98%E5%A4%A7%E6%88%90%E7%89%88)/</id>
    <published>2020-10-30T16:00:08.000Z</published>
    <updated>2020-11-15T17:57:34.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-LaTeX-的概述与安装"><a href="#1-LaTeX-的概述与安装" class="headerlink" title="1.$\LaTeX$的概述与安装"></a>1.$\LaTeX$的概述与安装</h2><p>$\LaTeX$ 是对$\TeX$ 的一种封装，所以我们先从$\TeX$ 说起，$\TeX$ 的发明是因为在很久以前计算机照排太差劲了，远远输于手工照排，有一个教授感觉这实在是太影响写作心情了，于是在他的同事学生的帮助下八年搞了一个$\TeX$ 的排版工具，但是这个实在是不易于使用，所以又一个教授写了一个$\LaTeX$ 这个就相对好用了，不过也由于此，他主要用于个人排版，而不用于专业印刷排版 </p><h3 id="1-1-LaTeX-的版本"><a href="#1-1-LaTeX-的版本" class="headerlink" title="1.1 $\LaTeX$ 的版本"></a>1.1 $\LaTeX$ 的版本</h3><p>$\LaTeX$ 有许多版本，例如$\mathbb{C}TeX$(不标准的写法) 和 $\TeX,live$ </p><h4 id="1-1-1-mathbb-C-TeX"><a href="#1-1-1-mathbb-C-TeX" class="headerlink" title="1.1.1 $\mathbb{C}TeX$"></a>1.1.1 $\mathbb{C}TeX$</h4><p>这是一个过气的中文$\TeX$ 版本，由中科院吴凌云(纪念大佬)维护的版本，包含了 WinEdt 做编辑器，SyumatraPDF做预览器，包含了很多常用的中文字体</p><h4 id="1-1-2-TeX-live"><a href="#1-1-2-TeX-live" class="headerlink" title="1.1.2  $\TeX,live$"></a>1.1.2  $\TeX,live$</h4><p>支持跨系统的发行版，首先需要下载 $\TeX,live$ 的安装程序(当然可以使用网络安装，但是网络要求太高了qwq，三点几G的文件，断下网就凉凉了)</p><ol><li>进入官网 <a href="http://www.tug.org/texlive/">http://www.tug.org/texlive/</a> </li><li>找到<strong>How to acquire TeX Live:</strong> download, on DVD, other methods.，选择<strong>on DVD</strong></li><li>点开最下面的 <strong>Information about downloading the TeX Live ISO image and burning your own DVD is available separately, as well as other ways to acquire TeX Live.**的</strong>downloading the TeX Live ISO image and burning your own DVD is available separately**</li><li>选择<strong>download from a nearby CTAN mirror; or</strong>的<strong>download from a nearby CTAN mirror</strong> 你就可以进入离你最近的镜像网站了(斜了门了，在重庆最近的镜像是清华的，在山西最近的镜像是重庆大学的)找到最新的ISO镜像文件，下载下来</li><li>如果是win8+的系统，双击下载的iso会自动加载虚拟光驱(所以装完了记得弹出)，选择<strong>install-tl-advanced.bat</strong>开始安装，一路下一步即可，$\LaTeX$会自动注册环境变量，然后就安装完成了</li></ol><p>至于Linux用户，还是看原书吧</p><h4 id="1-1-3-TeX-live-的附属软件"><a href="#1-1-3-TeX-live-的附属软件" class="headerlink" title="1.1.3 $\TeX,live$ 的附属软件"></a>1.1.3 $\TeX,live$ 的附属软件</h4><ol><li>TeXworks editor: 文件编辑器</li><li>DVIOUT DVI viewer: DVI文件预览器</li><li>PS_View: PostScrip文件查看器</li><li>TeX Live command line: 命令提示符</li><li>TeX Live documentation: 帮助文件链接</li><li>TeXdoc GUI: 文档列表</li><li>TeX Live Manager: TeX Live 的管理工具</li></ol><p>好的，以上软件我们基本不用</p><h3 id="1-2-LaTeX-涉及到的奇奇怪怪的格式"><a href="#1-2-LaTeX-涉及到的奇奇怪怪的格式" class="headerlink" title="1.2 $\LaTeX$ 涉及到的奇奇怪怪的格式"></a>1.2 $\LaTeX$ 涉及到的奇奇怪怪的格式</h3><ol><li>.aux/.bl/.synctex.gz 编译辅助文件，暂时不管</li><li>.tex 源文件</li><li>.sty style文件</li><li>PS格式文件：全称”PostScript”文件，不是Photoshop的psd，同出Adobe公司，的一种页面描述语言，很多软件可以画出其文件的内容，他在专业排版中很常见，但是在个人排版中pdf更为流行</li><li>esp文件: 位图图片文件，可以轻松转换为png或bmp文件</li></ol><h3 id="1-3-常用的编辑器"><a href="#1-3-常用的编辑器" class="headerlink" title="1.3 常用的编辑器"></a>1.3 常用的编辑器</h3><ol><li>Tex Studio</li><li>Vscode(使用方法见博客:<a href="https://blog.csdn.net/Liukairui/article/details/104603184">VScode使用全指南 (环境配置，插件推荐，美化) (C++,Python,LaTeX,R…)</a>)</li></ol><h2 id="2-第一次尝试"><a href="#2-第一次尝试" class="headerlink" title="2. 第一次尝试"></a>2. 第一次尝试</h2><ol><li><p>要使用中文请使用<code>\documentclass[*UTF8*]&#123;ctexart&#125;</code></p></li><li><p>图片请使用<code>\usepackage&#123;graphicx&#125;</code></p></li><li><p>H浮动体使用 <code>\usepackage&#123;float&#125;</code></p></li><li><p>使用eqref请使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\eqref&#123;XXX&#125;bl</span><br></pre></td></tr></table></figure></li><li><p>自定义定理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\newtheorem&#123;thm&#125;&#123;定理&#125;</span><br><span class="line">    \begin&#123;*thm*&#125;[勾股定理]</span><br><span class="line">         直角三角形$\angle ABC &#x3D; \pi &#x2F; 2$</span><br><span class="line">      \end&#123;*thm*&#125;</span><br></pre></td></tr></table></figure><p>效果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定理1 (勾股定理)直角三角∠ABC&#x3D;π&#x2F;2</span><br></pre></td></tr></table></figure></li><li><p>标题，作者，日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\newtheorem&#123;thm&#125;&#123;定理&#125;</span><br><span class="line">\title&#123;杂谈勾股定理&#125;</span><br><span class="line">\author&#123;张三&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br></pre></td></tr></table></figure></li><li><p>参考文献相关,bib使用见后文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">% 格式：</span><br><span class="line">% plain，按字母的顺序排列，比较次序为作者、年度和标题.</span><br><span class="line">% unsrt，样式同plain，只是按照引用的先后排序.</span><br><span class="line">% alpha，用作者名首字母+年份后两位作标号，以字母顺序排序.</span><br><span class="line">% abbrv，类似plain，将月份全拼改为缩写，更显紧凑.</span><br><span class="line">% ieeetr，国际电气电子工程师协会期刊样式.</span><br><span class="line">% acm，美国计算机学会期刊样式.</span><br><span class="line">% siam，美国工业和应用数学学会期刊样式.</span><br><span class="line">% apalike，美国心理学学会期刊样式.</span><br><span class="line">\bibliographystyle&#123;plain&#125;</span><br><span class="line"></span><br><span class="line">% rf为bib文件</span><br><span class="line">\bibliography&#123;rf&#125;</span><br><span class="line"></span><br><span class="line">%引用</span><br><span class="line">\cref&#123;王一晴2020&#125;</span><br><span class="line"></span><br><span class="line">% 注意：文中不引用就不显示，以下在\bibliography&#123;rf&#125;之前达到正文不显示但可以出现在ref中</span><br><span class="line">\nocite&#123;王一晴2020&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>设置摘要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;abstract&#125;</span><br><span class="line">        这是一杯关于勾股定理的小短文</span><br><span class="line">\end&#123;abstract&#125;</span><br></pre></td></tr></table></figure></li><li><p>显示首页<code>\maketitle</code></p></li><li><p>显示目录<code>\tableofcontents</code></p></li><li><p>小节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\section&#123;杂谈勾股定理&#125;</span><br><span class="line">\subsection&#123;杂谈勾股定理&#125;</span><br><span class="line">\subsubsection&#123;杂谈勾股定理&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置引文环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;quote&#125;</span><br><span class="line">    \zihao&#123;-5&#125;\kaishu</span><br><span class="line">    勾三股四玄五</span><br><span class="line">\end&#123;quote&#125;</span><br></pre></td></tr></table></figure></li><li><p>时间的短横线(1个c的距离)<code>我国的公元前7--6世纪</code></p></li><li><p>公式环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">% 行间公式有标号</span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">    a(b+c)&#x3D;ab+ac</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">% 行间公式无标号1</span><br><span class="line">\begin&#123;equation*&#125;</span><br><span class="line">    a(b+c)&#x3D;ab+ac</span><br><span class="line">\end&#123;equation*&#125;</span><br><span class="line">% 行间公式无标号2</span><br><span class="line">\[</span><br><span class="line">    a(b+c)&#x3D;ab+ac</span><br><span class="line">\]</span><br><span class="line">% 行间公式无标号3</span><br><span class="line">$$</span><br><span class="line">    a(b+c)&#x3D;ab+ac</span><br><span class="line">$$</span><br><span class="line">% 行间公式加Lable</span><br><span class="line">\begin&#123;equation&#125;\label&#123;1&#125;</span><br><span class="line">    a(b+c)&#x3D;ab+ac</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line">% 行内公式1</span><br><span class="line">\(a(b+c)&#x3D;ab+ac\)</span><br><span class="line">% 行内公式1</span><br><span class="line">$a(b+c)&#x3D;ab+ac$</span><br></pre></td></tr></table></figure></li><li><p>图片环境</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[ht]</span><br><span class="line">    \centering</span><br><span class="line">    %放缩因子有width,height,scale...</span><br><span class="line">    \includegraphics[scale&#x3D;0.6]&#123;xiatu&#125;</span><br><span class="line">    %注意上下</span><br><span class="line">    \caption&#123;仿制的弦图&#125;</span><br><span class="line">    \label&#123;fig:xiatu&#125;</span><br><span class="line"> \end&#123;figure&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>表格环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;table&#125;[H]</span><br><span class="line">%注意|与lrc</span><br><span class="line">    \begin&#123;tabular&#125;&#123;|rrr|&#125;</span><br><span class="line">    % 横线</span><br><span class="line">        \hline</span><br><span class="line">        % &amp;用于对齐</span><br><span class="line">        直角边 $a$ &amp; 直角边 $a$ &amp; 斜边 $a$\\</span><br><span class="line">        \hline</span><br><span class="line">        3&amp;4&amp;5\\</span><br><span class="line">        5&amp;12&amp;13\\</span><br><span class="line">        \hline</span><br><span class="line">    \end&#123;tabular&#125;%</span><br><span class="line">\end&#123;table&#125;</span><br></pre></td></tr></table></figure></li><li><p>参考文献管理</p><p>首先我们可以直接写，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;thebibliography&#125;&#123;99&#125;</span><br><span class="line">\addcontentsline&#123;toc&#125;&#123;section&#125;&#123;References&#125;</span><br><span class="line">\bibitem&#123;1&#125;Elisa T. Lee, Oscar T. Survival Analysis in Public Health Research. \emph&#123;Go. </span><br><span class="line">College of Public Health&#125;, 1997(18):105-134.</span><br><span class="line">\bibitem&#123;2&#125;Wikipedia: Proportional hazards model. 2017.11.26.   </span><br><span class="line">    \texttt&#123;\\https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Proportional\_&#123;&#125;hazards\_&#123;&#125;model&#125;</span><br><span class="line">\end&#123;thebibliography&#125;</span><br></pre></td></tr></table></figure><p>也可使用文件管理器将参考文献单独写一个文件，这里首推管理器为<strong>JabRef</strong>，好用，免费。注意：<strong>请下载官方版！！</strong>官网已经更新到5.0版本了但是国内都是4.2左右的，就连SourceForge都是2017的版本，界面简直没法比！！</p><p>首先打开官网：<a href="http://www.jabref.org/">www.jabref.org/</a></p><p>往下翻，有一个下载发行版还是源文件，选download latest release，然后选择对应版本即可</p><p>服务器在国外，所以下载很慢，自行处理┓(;´_｀)┏</p><p>软件很好用，就是没有中文的，生成之后直接保存到工作文件夹下即可</p><ol start="18"><li>修改页面页边距<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;geometry&#125;</span><br><span class="line">\geometry&#123;a6paper,centering,scale&#x3D;0.8&#125;</span><br><span class="line">% A6纸  居中  长宽为页面宽度0.8倍</span><br></pre></td></tr></table></figure></li></ol></li><li><p>修改表格标题格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\usepackage[format&#x3D;hang,font&#x3D;small,textfont&#x3D;it]&#123;caption&#125;</span><br><span class="line">% 图标标题悬挂对齐，左突出，小字号，斜体(中文楷书)</span><br></pre></td></tr></table></figure></li><li><p>自定义目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\usepackage[nottoc]&#123;tocbiblind&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义环境，$\LaTeX$ 的思想是格式与内容分离，所以一般不用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;quote&#125;</span><br><span class="line">    \zihao&#123;-10&#125;\kaishu</span><br><span class="line">    勾三股四玄五</span><br><span class="line">\end&#123;quote&#125;</span><br></pre></td></tr></table></figure><p>一般写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\newenvironment&#123;myquote&#125;</span><br><span class="line">    &#123;\begin(quote)\kaishu\zihao&#123;-5&#125;&#125;</span><br><span class="line">    &#123;\end&#123;quote&#125;&#125;</span><br><span class="line">\begin&#123;myquote&#125;</span><br><span class="line">    勾三股四玄五</span><br><span class="line">\end&#123;myquote&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-文本的组织"><a href="#3-文本的组织" class="headerlink" title="3. 文本的组织"></a>3. 文本的组织</h2><h3 id="3-1-符号的组织"><a href="#3-1-符号的组织" class="headerlink" title="3.1 符号的组织"></a>3.1 符号的组织</h3><h4 id="3-1-1重音符号"><a href="#3-1-1重音符号" class="headerlink" title="3.1.1重音符号"></a>3.1.1重音符号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\&quot;a</span><br><span class="line">\&#39;a</span><br><span class="line">\&#96;a</span><br><span class="line">\^a</span><br><span class="line">\ae</span><br></pre></td></tr></table></figure><p>效果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ä á à â æ</span><br></pre></td></tr></table></figure><p>还有很多，见后面的参考手册</p><p>当然因为我们用的是UTF-8所以直接输入法输入即可</p><h4 id="3-1-2连词的处理"><a href="#3-1-2连词的处理" class="headerlink" title="3.1.2连词的处理"></a>3.1.2连词的处理</h4><p>例如fi会直接连在一起，处理方法如下,{}与/均可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fififififififififiifiiiiff&#123;&#125;ffff\&#x2F;ffffiiii</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005408911.png" alt="在这里插入图片描述"></p><h4 id="3-1-3引号"><a href="#3-1-3引号" class="headerlink" title="3.1.3引号"></a>3.1.3引号</h4><p>Tab上面那个在英文状态下是引号的左半边，Enter左边的是后面的，中间写就是单引号(第一行)，双引号就是写双倍(第二行)，对于单双引号在一起的时候在分割地方加上<code>\,</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#96;hi&#39;</span><br><span class="line">&#96;&#96;&#39;&#39;</span><br><span class="line">&#96;\,&#96;&#96;&#39;\,&#39;&#39;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005422625.png"></p><h4 id="3-1-4-时间的短杠-破折号和波浪号"><a href="#3-1-4-时间的短杠-破折号和波浪号" class="headerlink" title="3.1.4 时间的短杠,破折号和波浪号"></a>3.1.4 时间的短杠,破折号和波浪号</h4><p>两个是时间的短杠，三个是破折号，\sim是波浪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wtat it is a---hokl--JIKL</span><br><span class="line">$\sim$</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005441656.png"></p><h4 id="3-1-5-三个省略号"><a href="#3-1-5-三个省略号" class="headerlink" title="3.1.5 三个省略号"></a>3.1.5 三个省略号</h4><ul><li><code>\ldots</code>是$\ldots$他会自动权衡这几个点之间的距离，点和文字之间的距离</li><li><code>\cdots</code>是$\cdots$唯一和ldots不同的是在中间</li><li><code>\dots</code> 是 amsmath 命令用来试图帮你在 \ldots 和 \cdots 中自动做决断的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaa\ldots aaaaaaaa\dots aaaaaa$\cdots$ aaaaaaaaa</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005454151.png"></p><h4 id="3-1-6-命令与文字的关系"><a href="#3-1-6-命令与文字的关系" class="headerlink" title="3.1.6 命令与文字的关系"></a>3.1.6 命令与文字的关系</h4><p>命令与文字之间的空格是会被忽略掉，latex会自动调整间距，也可以手动用<code>\ </code> 加空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">It is \LaTeX aws!</span><br><span class="line">    </span><br><span class="line">It is \LaTeX  aws!</span><br><span class="line">    </span><br><span class="line">It is \LaTeX\ \ \ aws!</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005509296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70"></p><h4 id="3-1-7-中文与英文之间的间距"><a href="#3-1-7-中文与英文之间的间距" class="headerlink" title="3.1.7 中文与英文之间的间距"></a>3.1.7 中文与英文之间的间距</h4><p>中英文之间会自动加间距，手打空格无效，也有规避方法，就是让latex不认为中文是中文，而是一个普通latex对象，就是给中文加一个单独的box放着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">中文与English的排版</span><br><span class="line"></span><br><span class="line">中文与 English 的排版</span><br><span class="line"></span><br><span class="line">\mbox&#123;盒子与&#125;English的排版</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200319005522768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70"></p><p>还有一个方法是用CJK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\CJKsetecglue&#123;&#125;</span><br><span class="line">    中文与CJK</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200319005530812.png"></p><h4 id="3-1-8-幻影空格"><a href="#3-1-8-幻影空格" class="headerlink" title="3.1.8 幻影空格"></a>3.1.8 幻影空格</h4><p>通过幻影空格我们可以<strong>占着茅坑不拉屎</strong>，占多大的茅坑呢？与给的参数的长度决定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">终极奥义，\phantom&#123;隐身&#125;!</span><br><span class="line"></span><br><span class="line">终极奥义，隐身!</span><br></pre></td></tr></table></figure><p>效果</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005541772.png" alt="在这里插入图片描述"></p><p>这是给他水平方向空了，垂直也可以空，是<code>\vphantom</code></p><h4 id="3-1-9-换行"><a href="#3-1-9-换行" class="headerlink" title="3.1.9 换行"></a>3.1.9 换行</h4><ol><li><p>双反斜线换行：用双反斜线空格，这样会不会认为另起一段，所以下一段不会像第一段一样开头空两格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 \\双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 双反斜线测试 </span><br></pre></td></tr></table></figure></li></ol><p><img data-src="https://img-blog.csdnimg.cn/20200319005557571.png" alt="在这里插入图片描述"></p><ol start="2"><li><p>空一行换行：认为是另起一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 </span><br><span class="line"></span><br><span class="line">双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 双换行测试 </span><br></pre></td></tr></table></figure></li></ol><p><img data-src="https://img-blog.csdnimg.cn/20200319005605529.png" alt="在这里插入图片描述"></p><ol start="3"><li><p>\linebreak 换行，默认写一个\linebreak就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 \linebreak</span><br><span class="line">linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 linebreak 测试 </span><br></pre></td></tr></table></figure></li></ol><p><img data-src="https://img-blog.csdnimg.cn/20200319005613235.png" alt="在这里插入图片描述"></p><p>可以看到三者区别就是</p><ul><li><code>\\</code>是前一段断尾正常写，下一段无空格</li><li>空格是两段段断尾正常写，下一段有空格</li><li><code>\linebreak</code> 是第一段断尾<strong>分散对齐</strong>，下一段无空格</li></ul><ol start="4"><li><code>\\</code>的扩展用法:给一个2cm的空行 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\[2cm] </span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200319005626283.png"></p><ol start="5"><li><p>linebreak的扩展用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\linebreak[0-4，数越大建议力度越大]</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-1-10-特殊符号"><a href="#3-1-10-特殊符号" class="headerlink" title="3.1.10 特殊符号"></a>3.1.10 特殊符号</h4><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\S </span><br><span class="line">\dag</span><br><span class="line">\ddag</span><br><span class="line">\P</span><br><span class="line">\copyright</span><br><span class="line">\textregistered</span><br><span class="line">\texttrademark</span><br><span class="line">\pounds</span><br><span class="line">\textbullet</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200319005636647.png"></p><p>不包含text的还可以用于数学环境，有text的可以加入但是会报错<code>Command \textregistered invalid in math mode.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\(</span><br><span class="line">        \S </span><br><span class="line">        \dag</span><br><span class="line">        \ddag</span><br><span class="line">        \P</span><br><span class="line">        \copyright</span><br><span class="line">        \pounds</span><br><span class="line">\)</span><br></pre></td></tr></table></figure><p>效果[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-eid1j8q4-1584550369596)<img data-src="https://img-blog.csdnimg.cn/20200319005648650.png"></p><p>注意\pound从欧元变为了美元</p><p>特殊符号扩展包：<code>\usepackage&#123;textcomp&#125;</code></p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;textcomp&#125;</span><br><span class="line">\texteuro</span><br><span class="line">\textperthousand</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200319005658145.png" alt="在这里插入图片描述"></p><p>实际上可以直接输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">§†‡¶©®™\$•</span><br></pre></td></tr></table></figure><p>也可以使用\symbol直接输入编号得到符号，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\symbol&#123;25289&#125;\symbol&#123;27888&#125;\symbol&#123;36203&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200319005715387.png" alt="在这里插入图片描述"></p><p>与python的ord(拉)的结果一样</p><p><strong>实际上，具体的标志可以查询长达358页的Pakin的参考手册</strong></p><p>简易版：<a href="https://math.uoregon.edu/wp-content/uploads/2014/12/compsymb-1qyb3zd.pdf">https://math.uoregon.edu/wp-content/uploads/2014/12/compsymb-1qyb3zd.pdf</a></p><p>标准版：<a href="http://tug.ctan.org/info/symbols/comprehensive/symbols-letter.pdf">http://tug.ctan.org/info/symbols/comprehensive/symbols-letter.pdf</a></p><h3 id="3-2-字体样式"><a href="#3-2-字体样式" class="headerlink" title="3.2 字体样式"></a>3.2 字体样式</h3><p><strong>字体族：</strong>有罗马样式(边角带勾的)，无衬线样式(没有带勾角的)，打字机字体(等宽)</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005816865.png" alt="在这里插入图片描述"></p><p><strong>字体形状：</strong>有直体(正常)，意大利体(斜体连笔)，斜体(斜的)，粗体</p><p>注意的是例如书名等理论上是用斜体，但实际上是用意大利，这是由于1.好看2.斜体支持不好(详见《西文排版》)</p><p>有两种声明形式</p><ol><li>\命令让后面的全应用</li><li>\ { }让括号内的应用</li></ol><p>我为了测试方便写在了quote里面，实际不需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;quote&#125;</span><br><span class="line">        \rmfamily This is Roma Family front family 罗马体\\</span><br><span class="line">        \sffamily This is sans serif Family front family 无衬线 \\</span><br><span class="line">        \ttfamily This is Typing front family 打字机\\</span><br><span class="line">        \textrm&#123;This is Roma Family front family 罗马体&#125; \\</span><br><span class="line">        \textsf&#123;This is sans serif Family front family 无衬线&#125; \\</span><br><span class="line">        \texttt&#123;This is Typing front family 打字机&#125; \\</span><br><span class="line">    \end&#123;quote&#125;</span><br><span class="line"></span><br><span class="line">    \begin&#123;quote&#125;</span><br><span class="line">        \upshape upfront upfront upfront 直立 \\</span><br><span class="line">        \itshape itshape itshape itshape 意大利体 \\</span><br><span class="line">        \slshape slshape slshape slshape 斜体 \\</span><br><span class="line">        \scshape scshape scshape scshape 小型大写 \\</span><br><span class="line">        \normalfont normalfontnormalfont 正常字体 \\</span><br><span class="line">        \textup&#123;textup textup textup 直立&#125; \\</span><br><span class="line">        \textit&#123;textit textit textit 意大利体&#125; \\</span><br><span class="line">        \textsl&#123;textsl textsl textsl 斜体&#125; \\</span><br><span class="line">        \textsc&#123;textsc textsc textsc 小型大写&#125; \\</span><br><span class="line">        \textnormal&#123;textnormal textnormal textnormal 正常字体&#125;\\</span><br><span class="line">    \end&#123;quote&#125;</span><br></pre></td></tr></table></figure><p>效果</p><p><img data-src="https://img-blog.csdnimg.cn/20200319005800907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>字体样式的矫正</strong>：啦啦啦啦啦啦</p><hr><h2 id="LaTeX-各种报错的方法"><a href="#LaTeX-各种报错的方法" class="headerlink" title="$\LaTeX$各种报错的方法"></a>$\LaTeX$各种报错的方法</h2><ol><li>Error Page XXX on XXX not …<br> 这是vscode配置问题，settings.json文件加入 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latex.recipes&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">       &quot;tools&quot;: [</span><br><span class="line">         &quot;xelatex&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;name&quot;: &quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;,</span><br><span class="line">       &quot;tools&quot;: [</span><br><span class="line">         &quot;xelatex&quot;,</span><br><span class="line">         &quot;bibtex&quot;,</span><br><span class="line">         &quot;xelatex&quot;,</span><br><span class="line">         &quot;xelatex&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;latex-workshop.latex.tools&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;name&quot;: &quot;latexmk&quot;,</span><br><span class="line">       &quot;command&quot;: &quot;latexmk&quot;,</span><br><span class="line">       &quot;args&quot;: [</span><br><span class="line">         &quot;-synctex&#x3D;1&quot;,</span><br><span class="line">         &quot;-interaction&#x3D;nonstopmode&quot;,</span><br><span class="line">         &quot;-file-line-error&quot;,</span><br><span class="line">         &quot;-pdf&quot;,</span><br><span class="line">         &quot;%DOC%&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;name&quot;: &quot;xelatex&quot;,</span><br><span class="line">       &quot;command&quot;: &quot;xelatex&quot;,</span><br><span class="line">       &quot;args&quot;: [</span><br><span class="line">         &quot;-synctex&#x3D;1&quot;,</span><br><span class="line">         &quot;-interaction&#x3D;nonstopmode&quot;,</span><br><span class="line">         &quot;-file-line-error&quot;,</span><br><span class="line">         &quot;%DOC%&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;name&quot;: &quot;bibtex&quot;,</span><br><span class="line">       &quot;command&quot;: &quot;bibtex&quot;,</span><br><span class="line">       &quot;args&quot;: [</span><br><span class="line">         &quot;%DOCFILE%&quot;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br></pre></td></tr></table></figure></li><li>vscode自动保存烦人？<br> 这是vscode配置问题，settings.json文件加入 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//auto compress</span></span><br><span class="line">    <span class="string">&quot;latex-workshop.latex.autoBuild.run&quot;</span>: <span class="string">&quot;never&quot;</span>,</span><br></pre></td></tr></table></figure></li><li>Missing } inserted.<br> 1.在数学区出现美元符号<br> 2.多写了},比如 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\newenvironment&#123;lalalalala&#125;</span><br><span class="line">   &#123;\begin&#123;quote&#125;\kaishu\zihao&#123;-<span class="number">5</span>&#125;&#125;</span><br><span class="line">    &#123;\end&#123;quote&#125;&#125;</span><br></pre></td></tr></table></figure> 写成了 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\newenvironment&#123;lalalalala&#125;&#123;</span><br><span class="line">   &#123;\begin&#123;quote&#125;\kaishu\zihao&#123;-<span class="number">5</span>&#125;&#125;</span><br><span class="line">    &#123;\end&#123;quote&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 4.There’s no line here to end.<pre><code> 前面是不是多加了`\\`</code></pre></li></ol>]]></content>
    
    
    <summary type="html">看了B站西北农林科技大学的视频，想通过刘大成的LaTeX教程完善一下(估计要烂尾)</summary>
    
    
    
    <category term="杂七杂八的" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84/"/>
    
    <category term="工具" scheme="http://liukairui.cc/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="LaTeX" scheme="http://liukairui.cc/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84/LaTeX/"/>
    
    <category term="LaTeX" scheme="http://liukairui.cc/categories/%E5%B7%A5%E5%85%B7/LaTeX/"/>
    
    
    <category term="LaTeX" scheme="http://liukairui.cc/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>2020牛客寒假算法基础集训营2题解</title>
    <link href="http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A52%E9%A2%98%E8%A7%A3/"/>
    <id>http://liukairui.cc/2020%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A52%E9%A2%98%E8%A7%A3/</id>
    <published>2020-10-30T16:00:07.000Z</published>
    <updated>2020-11-15T17:54:31.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A：做游戏"><a href="#A：做游戏" class="headerlink" title="A：做游戏"></a>A：做游戏</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311000820172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">114514</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">114514</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">114514</span></span><br></pre></td></tr></table></figure><hr><p>对于三种情况，取每次分组的最小值即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b,c,d,e,f;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e&gt;&gt;f;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;min(a,e)+min(b,f)+min(c,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B：排数字"><a href="#B：排数字" class="headerlink" title="B：排数字"></a>B：排数字</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311001024579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">11451419266</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>计算6,1出现次数即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> ss[<span class="number">200050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ss);</span><br><span class="line">    <span class="keyword">int</span> num_1=<span class="number">0</span>,num_6=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ss[i]==<span class="string">&#x27;1&#x27;</span>)num_1++;</span><br><span class="line">        <span class="keyword">if</span>(ss[i]==<span class="string">&#x27;6&#x27;</span>)num_6++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num_6&lt;=<span class="number">1</span>||num_1==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;min(num_6<span class="number">-1</span>,num_1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C：算概率"><a href="#C：算概率" class="headerlink" title="C：算概率"></a>C：算概率</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311001333670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">500000004</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">500000004</span> <span class="number">500000004</span></span><br></pre></td></tr></table></figure><hr><ol><li>考虑dp:<br>dp[i][j]为前i个题答对j个<br>$dp[i][j] =(dp[i-1][j-1]<em>p[i] + dp[i-1][j]</em>(1-p[i]))$</li><li>考虑概率的计算：<br>分数取模：<br>方法有很多如计算分子*分母的逆元，…<br>这里他直接给了取模后的结果，根据同余运算性质直接把他当做概率即可<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod =<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p[<span class="number">2009</span>],dp[<span class="number">2009</span>][<span class="number">2009</span>],n; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>]*(<span class="number">1</span>-p[i])%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">            dp[i][j] =(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]*p[i] + dp[i<span class="number">-1</span>][j]*(<span class="number">1</span>-p[i]))%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) <span class="built_in">cout</span>&lt;&lt;(dp[n][i]+mod)%mod&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="D-数三角"><a href="#D-数三角" class="headerlink" title="D:数三角"></a>D:数三角</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311084212937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70"><br>输入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">-1145</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><ol><li>判断是能不能构成，a+b!=c,我直接用叉积就不用开放了</li><li>不是钝三角:$a^2+b^2&lt;c^2$，我用的是向量&lt;0<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[<span class="number">550</span>];</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dj</span><span class="params">(point a,point b,point c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((b.x-a.x)*(c.y-a.y)-(c.x-a.x)*(b.y-a.y)==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>((b.x-a.x)*(c.x-a.x)+(b.y-a.y)*(c.y-a.y)&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>((a.x-b.x)*(c.x-b.x)+(a.y-b.y)*(c.y-b.y)&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>((a.x-c.x)*(b.x-c.x)+(a.y-c.y)*(b.y-c.y)&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cin</span>&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dj(p[i],p[j],p[k]))ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-做计数"><a href="#E-做计数" class="headerlink" title="E:做计数"></a>E:做计数</h2><img data-src="https://img-blog.csdnimg.cn/20200311091144908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>等式同平方得到<br>$$i+j+2\sqrt{ij}=k$$<br>$$\sqrt{ij}=\frac{k-i-j}{2}$$<br>那么要么$(k-i-j)/2=几.5$或者$(k-i-j)/2=整数$<br>但是如果$\sqrt{ij}=几.5$那么$ij=几.25$而$ij \in \mathbb{N}$，所以$\sqrt{ij} \in \mathbb{N}$<br>我们枚举$\sqrt{ij}$即可</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> sij=<span class="number">1</span>;sij*sij&lt;=n;sij++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>,ij=sij*sij;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sij;i++)</span><br><span class="line">            <span class="keyword">if</span>(ij%i==<span class="number">0</span>)tmp++;</span><br><span class="line">        ans+=tmp*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F：拿物品"><a href="#F：拿物品" class="headerlink" title="F：拿物品"></a>F：拿物品</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311092211562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">6</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">也会被判定为正确</span><br></pre></td></tr></table></figure><hr><p>开始我想的是贪心：<br>作为一个人取东西有两个目的：</p><ul><li>取东西的时候自己取的应该尽可能大</li><li>取得的东西应该防止对手拉开与自己尽可能大的距离</li></ul><p>这两个就是<strong>矛盾的</strong>…</p><ul><li>取东西的时候自己取的应该尽可能大的方法<strong>是取对自己大的</strong></li><li>取得的东西应该防止对手拉开与自己尽可能大的距离的方法是<strong>取对别人最大的而对自己最小的</strong></li></ul><p><strong>那是取最自己最大的还是最小的呢？</strong><br>如果是ACM你两个分开试一下就过来qwq<br>这两个如何交叉使用呢？用$A^*$算法来决策？我写不出来jduge函数</p><p>正解是这样的，假设：<br>N为某情况牛牛的最终得分<br>M为某情况牛可乐的最终得分<br>我们让牛牛的一个物品i和牛可乐的物品j交换<br>那么这时候牛牛的得分就变为了$N^{‘}=N-a_i+a_j$<br>牛可乐的得分就变为了$M^{‘}=M-b_j+b_i$<br>牛牛想：如果可以通过交换差距那么应该有<br>$$N^{‘}-M^{‘}&gt;N-M$$<br>$$N-a_i+a_j-M+b_j-b_i&gt;N-M$$<br>$$a_j+b_j&gt;a_i+b_i$$<br>所以对于牛牛来说要优选选择$a_i+b_i$最大的物品<br>同时对于牛可乐来说也要选择$a_i+b_i$最大的物品<br>这就简单了，排序然后一个一个取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thing</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,a,b;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> thing t)&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b&gt;t.a+t.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s[<span class="number">200050</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i].a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i].b);</span><br><span class="line">        s[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(s,s+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s[i].id+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i+=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s[i].id+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G：判正误"><a href="#G：判正误" class="headerlink" title="G：判正误"></a>G：判正误</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311095907874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">258</span></span><br><span class="line"><span class="number">114514</span> <span class="number">1919810</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><hr><p>首先我们必须用快速幂<br>然后呢？没有mod<br>不可能达到，用double？<br>稍稍一丁点误差就废了<br>如果有一个mod就好了<br>手动规定$mod=10^9+7$<br>然后就挂了<br>但是你一个项继续用这个mod就过了<br>用$mod=10^9+8$然后就过了？？<br>玄学？<br>这道题的正解是设置好几个mod，然后分别快速幂，有一个不行就false，全可以就认为true<br>那怎么设置呢？<br>自己试<br><strong>因为这是acm可以多次尝试</strong><br>什么****题目</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,c,d,e,f,g,t;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;<span class="comment">//a的b次方求余p </span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ret = (ret * a) % p;</span><br><span class="line">        a = (a * a) % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f,&amp;g);</span><br><span class="line">        <span class="keyword">if</span>(pow_mod(a,d)+pow_mod(b,e)==(g%p)-(pow_mod(c,f)%p))<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H：施魔法"><a href="#H：施魔法" class="headerlink" title="H：施魔法"></a>H：施魔法</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311101308833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">114514</span> <span class="number">114513</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><hr><p>首先我们要对于所有的元素按照能量值排序<br>我的想法就是贪心，首先我们知道选的越少极差越小，不能跳过这个数选其他数，让后面的组选这一个<br>所以我们只需要每次抉择这组选几个，这么选呢？首先这个有后效性吧，一共选多少组也没有规定，也没有上界，$IDA^*$也不可以，于是想到以下式子<br>$$f_i=\min_{j \in[i,i-k+1]}{f_{j-1}+a_i-a_j}=\min_{j \in [1,i-k+1]}{f_{j-1}-a_j}+a_i$$<br>$f_i$为前i个的最优解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,a[<span class="number">300050</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">300050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    dp[k<span class="number">-1</span>]=a[k<span class="number">-1</span>]-a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;n;i++)</span><br><span class="line">        dp[i]=min(dp[i<span class="number">-1</span>]-a[i<span class="number">-1</span>]+a[i],dp[i-k]+a[i]-a[i-k+<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I：建通道"><a href="#I：建通道" class="headerlink" title="I：建通道"></a>I：建通道</h2><p><img data-src="https://img-blog.csdnimg.cn/20200311103431437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>首先按照经验来说，对于这种全联通图，如果把所有的边全写出来然后Prime跑一遍是肯定不行的，一定要耍点小聪明，于是我是这么想的，对于一个图，我们先把每个权值写出来，例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000000</span></span><br><span class="line"><span class="number">000010</span></span><br><span class="line"><span class="number">001001</span></span><br><span class="line"><span class="number">000001</span></span><br><span class="line"><span class="number">000011</span></span><br><span class="line"><span class="number">000001</span></span><br></pre></td></tr></table></figure><p>如果我排序一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000000</span></span><br><span class="line"><span class="number">000001</span></span><br><span class="line"><span class="number">000001</span></span><br><span class="line"><span class="number">000010</span></span><br><span class="line"><span class="number">000011</span></span><br><span class="line"><span class="number">001001</span></span><br></pre></td></tr></table></figure><p>看到最扎眼的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000001</span></span><br><span class="line"><span class="number">000001</span></span><br></pre></td></tr></table></figure><p>这两个点的权值为0<br>那直接去重，方便之后计算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000000</span></span><br><span class="line"><span class="number">000001</span></span><br><span class="line"><span class="number">000010</span></span><br><span class="line"><span class="number">000011</span></span><br><span class="line"><span class="number">001001</span></span><br></pre></td></tr></table></figure><p>排序去重之后，<strong>似乎</strong>相邻的两个点之前差值是最小的所以连线的权值也是最短的，于是我排序，直接计算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">20</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,v[MAX_N],ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class="line">    sort(v,v+n);</span><br><span class="line">    m=unique(v,v+n)-v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x=v[i]^v[i<span class="number">-1</span>];</span><br><span class="line">        ans+=(x&amp;(-x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挂了…<br>问题在哪？<br>“<strong>似乎</strong>相邻的两个点之前差值是最小的所以连线的权值也是最短的”<br>这是错的，为啥，考虑这样一个去重排序序列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>0000100</span><br><span class="line"><span class="number">0</span>0100100</span><br><span class="line"><span class="number">10000000</span></span><br></pre></td></tr></table></figure><p>一二的权值是32，但是一三权值是4<br>所以，我需要的是找到最低一位的1，<br>首先，我找到的是最低一位的1，所以之后位全是0！<br>然后呢，对于所有这一位为0的，他们的与最低位1连接一定是权值最小的<br>写出代码，用|运算找出所有出现1的位然后找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">20</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,v[MAX_N],ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class="line">    sort(v,v+n);</span><br><span class="line">    m=unique(v,v+n)-v;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)tmp|=v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;tmp;i++)</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;tmp)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;((<span class="number">1</span>&lt;&lt;i)*(m<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是挂了…<br>为啥，在上一思路的基础上，我们找到最小1的位置，然后讨论了0，但是我们没有讨论这一位为1的情况，例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000111101000</span></span><br><span class="line"><span class="number">0000111111000</span></span><br><span class="line"><span class="number">0000000100000</span></span><br></pre></td></tr></table></figure><p>找到的一定是第四位，所以一三链接一定是最好的，但是二呢，不是12而是二三…，还是无法定论，所以我们需要找到的是一个最低的1，并且这一位有的数是1有的数是0，我们只要随意让哪一位01相互匹配即可！<br>这里用|找所有的1的位置，&amp;找所有有0的位置<br>注意这里要特判答案为0，就是1个或0个星球</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">20</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,v[MAX_N],ans=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class="line">    sort(v,v+n);</span><br><span class="line">    m=unique(v,v+n)-v;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp1=v[<span class="number">0</span>],tmp2=v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;tmp1|=v[i];tmp2&amp;=v[i];&#125;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;=<span class="number">1</span>)&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0&quot;</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(((<span class="number">1</span>&lt;&lt;i)&amp;tmp1)&amp;&amp;(!((<span class="number">1</span>&lt;&lt;i)&amp;tmp2)))&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(<span class="number">1</span>&lt;&lt;i)*(m<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是还有优化的空间，我们换一个顺序：要找的是一位，这一位有0,有1，然后再找到最小的哪一位<br>有0有1用异或，最小位lowbit即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">20</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,v[MAX_N],ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class="line">    sort(v,v+n);</span><br><span class="line">    m=unique(v,v+n)-v;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp1=v[<span class="number">0</span>],tmp2=v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;tmp1|=v[i];tmp2&amp;=v[i];&#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> r=tmp1^tmp2;</span><br><span class="line">    r=r&amp;(-r);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(m<span class="number">-1</span>)*r;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成！<br>最后请注意我们用位运算不要写<br><code>a&amp;b==0</code><br>或者<br><code>a|b!=0</code><br>直接写<br><code>!(a&amp;b)</code><br><code>a|b</code><br>不知道为啥不这么写会挂，后补</p><hr><h2 id="J：求函数"><a href="#J：求函数" class="headerlink" title="J：求函数"></a>J：求函数</h2><p><img data-src="https://img-blog.csdnimg.cn/20200319034321405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdWthaXJ1aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>示例</strong><br><strong>输入</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">114514</span> <span class="number">1919810</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2148838</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><hr><p>先写下三项<br>$$<br>f_l(1)=k_1+b_1\<br>f_{l+1}(f_l(1))=k_{l+1}k_l+k_{l+1}b_1+b_2 \<br>f_{l+2}(f_{l+1}(f_l(1)))=k_{l+2}k_{l+1}k_l+k_{l+2}k_{l+1}b_1+b_{l+2}b_2+b_3k_{l+1}k_l+b_3b_1k_{l+1}+b_3b_2<br>$$<br>找下规律~<br>$$<br>f_r(f_{r-1}(\dots f_{l+1}(f_l(1))\dots ))=\prod\limits_{i=l}^{r}k_i+\sum\limits_{i=1}^{r}b_i\prod\limits_{j=i+1}^{r}k_j<br>$$<br>由于涉及频繁修改与移动，我们采用线段树处理这个问题<br>维护两个线段树<br>$\prod\limits_{i=l}^{r}k_i$与$\sum\limits_{i=1}^{r}b_i\prod\limits_{j=i+1}^{r}k_j$<br>第一个很好维护，第二个的合并较为复杂<br>$\prod\limits_{i=l_1}^{r_1}k_i=n_1$,$\prod\limits_{i=l_2}^{r_2}k_i=n_2$<br>$\sum\limits_{i=l_1}^{r_1}b_i\prod\limits_{j=i+1}^{r}k_j=m_1$,$\sum\limits_{i=l_2}^{r_2}b_i\prod\limits_{j=i+1}^{r}k_j=m_2$<br>$\sum b_i\prod k_j=m_1*n_2+m_2$<br>写出代码(注意这里由于第二个树合并不是一个简单地相加，我们只好修改了query函数的查询顺序，以往是有一个加一个，现在要分类讨论一下)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC (LC|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_N 200050</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; PII;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s1[MAX_N&lt;&lt;<span class="number">2</span>],s2[MAX_N&lt;&lt;<span class="number">2</span>],k[MAX_N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    s1[p]=(s1[LC]*s1[RC])%mod;</span><br><span class="line">    s2[p]=(s2[LC]*s1[RC]+s2[RC])%mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> k,<span class="keyword">int</span> b,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        s1[p]=k;</span><br><span class="line">        s2[p]=b;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=M)modify(LC,x,k,b,l,M);</span><br><span class="line">    <span class="keyword">if</span>(x&gt;M)modify(RC,x,k,b,M+<span class="number">1</span>,r);</span><br><span class="line">    up(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)<span class="keyword">return</span> <span class="built_in">make_pair</span>(s1[p],s2[p]);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=M &amp;&amp; y&gt;M)&#123;</span><br><span class="line">        PII tmp1=query(LC,x,y,l,M),tmp2=query(RC,x,y,M+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>((tmp1.first*tmp2.first)%mod,(tmp1.second*tmp2.first+tmp2.second)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=M)<span class="keyword">return</span> query(LC,x,y,l,M);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;M)<span class="keyword">return</span> query(RC,x,y,M+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;b);</span><br><span class="line">        modify(<span class="number">1</span>,i,k[i],b,<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d);</span><br><span class="line">            modify(<span class="number">1</span>,b,c,d,<span class="number">1</span>,n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            PII s=query(<span class="number">1</span>,b,c,<span class="number">1</span>,n);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(s.first+s.second)%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">原题来自2020牛客寒假算法基础集训营2，作以存档备查</summary>
    
    
    
    <category term="ACM" scheme="http://liukairui.cc/categories/ACM/"/>
    
    <category term="题解" scheme="http://liukairui.cc/categories/ACM/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="http://liukairui.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="ACM" scheme="http://liukairui.cc/tags/ACM/"/>
    
    <category term="牛客" scheme="http://liukairui.cc/tags/%E7%89%9B%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>数论10-斐波那契数列的奇怪性质</title>
    <link href="http://liukairui.cc/%E6%95%B0%E8%AE%BA10-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E5%A5%87%E6%80%AA%E6%80%A7%E8%B4%A8/"/>
    <id>http://liukairui.cc/%E6%95%B0%E8%AE%BA10-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E5%A5%87%E6%80%AA%E6%80%A7%E8%B4%A8/</id>
    <published>2020-10-30T16:00:06.000Z</published>
    <updated>2020-11-15T18:41:20.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斐波那契数列求法"><a href="#斐波那契数列求法" class="headerlink" title="斐波那契数列求法"></a>斐波那契数列求法</h2><p>1.公式<br>$$fib(n)=\frac {1}{\sqrt5} \left[\left(\frac{1+\sqrt5}{2}\right)^n-\left(\frac{1-\sqrt5}{2}\right)^n\right]$$<br>这个一般不用</p><ul><li>因为太大的double挂了</li><li>太小的递推好写</li></ul><p>2.递推<br>$$<br>fib(n)=fib(n-1)+fib(n-2) (n\geq3)\<br>fib(1)=1 \<br>fib(2)=1 \<br>$$<br>3.矩阵快速幂<br><a href="https://blog.csdn.net/Liukairui/article/details/104680978">链接在这里</a></p><h2 id="fib与gcd"><a href="#fib与gcd" class="headerlink" title="fib与gcd"></a>fib与gcd</h2><p>$$<br>gcd(F_n,F_m)=gcd(F_{n−m},F_{m}) \<br>gcd(F_n,F_m)=F\left(gcd(n,m)\right)<br>$$</p>]]></content>
    
    
    <summary type="html">列举了斐波那契数列的各种各样奇怪性质</summary>
    
    
    
    <category term="ACM" scheme="http://liukairui.cc/categories/ACM/"/>
    
    <category term="数论" scheme="http://liukairui.cc/categories/ACM/%E6%95%B0%E8%AE%BA/"/>
    
    
    <category term="算法" scheme="http://liukairui.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="ACM" scheme="http://liukairui.cc/tags/ACM/"/>
    
    <category term="数论" scheme="http://liukairui.cc/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="斐波那契数列" scheme="http://liukairui.cc/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
</feed>
